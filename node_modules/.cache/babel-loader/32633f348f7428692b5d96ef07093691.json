{"ast":null,"code":"import { Contract } from \"@ethersproject/contracts\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { abi as IUniswapV2Router02ABI } from \"@uniswap/v2-periphery/build/IUniswapV2Router02.json\";\nimport { ROUTER_ADDRESS } from \"../constants\";\nimport { JSBI, Percent, Token, ETHER } from \"@uniswap/sdk\";\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value) {\n  try {\n    return getAddress(value);\n  } catch {\n    return false;\n  }\n}\nconst ETHERSCAN_PREFIXES = {\n  56: \"\",\n  97: \"testnet.\"\n};\nexport function getEtherscanLink(chainId, data, type) {\n  const prefix = `https://${ETHERSCAN_PREFIXES[chainId] || ETHERSCAN_PREFIXES[56]}bscscan.com`;\n\n  switch (type) {\n    case \"transaction\":\n      {\n        return `${prefix}/tx/${data}`;\n      }\n\n    case \"token\":\n      {\n        return `${prefix}/token/${data}`;\n      }\n\n    case \"block\":\n      {\n        return `${prefix}/block/${data}`;\n      }\n\n    case \"address\":\n    default:\n      {\n        return `${prefix}/address/${data}`;\n      }\n  }\n} // shorten the checksummed version of the input address to have 0x + 4 characters at start and end\n\nexport function shortenAddress(address, chars = 4) {\n  const parsed = isAddress(address);\n\n  if (!parsed) {\n    throw Error(`Invalid 'address' parameter '${address}'.`);\n  }\n\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`;\n} // add 10%\n\nexport function calculateGasMargin(value) {\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000));\n} // converts a basis points value to a sdk percent\n\nexport function basisPointsToPercent(num) {\n  return new Percent(JSBI.BigInt(num), JSBI.BigInt(10000));\n}\nexport function calculateSlippageAmount(value, slippage) {\n  if (slippage < 0 || slippage > 10000) {\n    throw Error(`Unexpected slippage value: ${slippage}`);\n  }\n\n  return [JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 - slippage)), JSBI.BigInt(10000)), JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 + slippage)), JSBI.BigInt(10000))];\n} // account is not optional\n\nexport function getSigner(library, account) {\n  return library.getSigner(account).connectUnchecked();\n} // account is optional\n\nexport function getProviderOrSigner(library, account) {\n  return account ? getSigner(library, account) : library;\n} // account is optional\n\nexport function getContract(address, ABI, library, account) {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`);\n  }\n\n  return new Contract(address, ABI, getProviderOrSigner(library, account));\n} // account is optional\n\nexport function getRouterContract(_, library, account) {\n  return getContract(ROUTER_ADDRESS, IUniswapV2Router02ABI, library, account);\n}\nexport function escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\n}\nexport function isTokenOnList(defaultTokens, currency) {\n  var _defaultTokens$curren;\n\n  if (currency === ETHER) return true;\n  return Boolean(currency instanceof Token && ((_defaultTokens$curren = defaultTokens[currency.chainId]) === null || _defaultTokens$curren === void 0 ? void 0 : _defaultTokens$curren[currency.address]));\n}","map":{"version":3,"sources":["/Users/chichke/Documents/Work/Freelance/swap-project/src/utils/index.ts"],"names":["Contract","getAddress","AddressZero","BigNumber","abi","IUniswapV2Router02ABI","ROUTER_ADDRESS","JSBI","Percent","Token","ETHER","isAddress","value","ETHERSCAN_PREFIXES","getEtherscanLink","chainId","data","type","prefix","shortenAddress","address","chars","parsed","Error","substring","calculateGasMargin","mul","from","add","div","basisPointsToPercent","num","BigInt","calculateSlippageAmount","slippage","divide","multiply","raw","getSigner","library","account","connectUnchecked","getProviderOrSigner","getContract","ABI","getRouterContract","_","escapeRegExp","string","replace","isTokenOnList","defaultTokens","currency","Boolean"],"mappings":"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","sourcesContent":["import { Contract } from \"@ethersproject/contracts\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { JsonRpcSigner, Web3Provider } from \"@ethersproject/providers\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { abi as IUniswapV2Router02ABI } from \"@uniswap/v2-periphery/build/IUniswapV2Router02.json\";\nimport { ROUTER_ADDRESS } from \"../constants\";\nimport {\n  ChainId,\n  JSBI,\n  Percent,\n  Token,\n  CurrencyAmount,\n  Currency,\n  ETHER,\n} from \"@uniswap/sdk\";\nimport { TokenAddressMap } from \"../state/lists/hooks\";\n\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value: any): string | false {\n  try {\n    return getAddress(value);\n  } catch {\n    return false;\n  }\n}\n\nconst ETHERSCAN_PREFIXES: { [chainId in ChainId]: string } = {\n  56: \"\",\n  97: \"testnet.\",\n};\n\nexport function getEtherscanLink(\n  chainId: ChainId,\n  data: string,\n  type: \"transaction\" | \"token\" | \"address\" | \"block\"\n): string {\n  const prefix = `https://${\n    ETHERSCAN_PREFIXES[chainId] || ETHERSCAN_PREFIXES[56]\n  }bscscan.com`;\n\n  switch (type) {\n    case \"transaction\": {\n      return `${prefix}/tx/${data}`;\n    }\n    case \"token\": {\n      return `${prefix}/token/${data}`;\n    }\n    case \"block\": {\n      return `${prefix}/block/${data}`;\n    }\n    case \"address\":\n    default: {\n      return `${prefix}/address/${data}`;\n    }\n  }\n}\n\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  const parsed = isAddress(address);\n  if (!parsed) {\n    throw Error(`Invalid 'address' parameter '${address}'.`);\n  }\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`;\n}\n\n// add 10%\nexport function calculateGasMargin(value: BigNumber): BigNumber {\n  return value\n    .mul(BigNumber.from(10000).add(BigNumber.from(1000)))\n    .div(BigNumber.from(10000));\n}\n\n// converts a basis points value to a sdk percent\nexport function basisPointsToPercent(num: number): Percent {\n  return new Percent(JSBI.BigInt(num), JSBI.BigInt(10000));\n}\n\nexport function calculateSlippageAmount(\n  value: CurrencyAmount,\n  slippage: number\n): [JSBI, JSBI] {\n  if (slippage < 0 || slippage > 10000) {\n    throw Error(`Unexpected slippage value: ${slippage}`);\n  }\n  return [\n    JSBI.divide(\n      JSBI.multiply(value.raw, JSBI.BigInt(10000 - slippage)),\n      JSBI.BigInt(10000)\n    ),\n    JSBI.divide(\n      JSBI.multiply(value.raw, JSBI.BigInt(10000 + slippage)),\n      JSBI.BigInt(10000)\n    ),\n  ];\n}\n\n// account is not optional\nexport function getSigner(\n  library: Web3Provider,\n  account: string\n): JsonRpcSigner {\n  return library.getSigner(account).connectUnchecked();\n}\n\n// account is optional\nexport function getProviderOrSigner(\n  library: Web3Provider,\n  account?: string\n): Web3Provider | JsonRpcSigner {\n  return account ? getSigner(library, account) : library;\n}\n\n// account is optional\nexport function getContract(\n  address: string,\n  ABI: any,\n  library: Web3Provider,\n  account?: string\n): Contract {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`);\n  }\n\n  return new Contract(\n    address,\n    ABI,\n    getProviderOrSigner(library, account) as any\n  );\n}\n\n// account is optional\nexport function getRouterContract(\n  _: number,\n  library: Web3Provider,\n  account?: string\n): Contract {\n  return getContract(ROUTER_ADDRESS, IUniswapV2Router02ABI, library, account);\n}\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\n}\n\nexport function isTokenOnList(\n  defaultTokens: TokenAddressMap,\n  currency?: Currency\n): boolean {\n  if (currency === ETHER) return true;\n  return Boolean(\n    currency instanceof Token &&\n      defaultTokens[currency.chainId]?.[currency.address]\n  );\n}\n"]},"metadata":{},"sourceType":"module"}