{"ast":null,"code":"var _jsxFileName = \"/Users/chichke/Documents/Work/Freelance/swap-project/src/components/claim/AddressClaimModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Modal from '../Modal';\nimport { AutoColumn, ColumnCenter } from '../Column';\nimport styled from 'styled-components';\nimport { DataCard, CardSection, Break } from '../earn/styled';\nimport { RowBetween } from '../Row';\nimport { TYPE, ExternalLink, CloseIcon, CustomLightSpinner, UniTokenAnimated } from '../../theme';\nimport { ButtonPrimary } from '../Button';\nimport { useClaimCallback, useUserUnclaimedAmount, useUserHasAvailableClaim } from '../../state/claim/hooks';\nimport tokenLogo from '../../assets/images/token-logo.png';\nimport Circle from \"../../assets/images/blue-loader.svg\";\nimport { Text } from 'rebass';\nimport AddressInputPanel from '../AddressInputPanel';\nimport useENS from '../../hooks/useENS';\nimport { useActiveWeb3React } from '../../hooks';\nimport { isAddress } from 'ethers/lib/utils';\nimport Confetti from '../Confetti';\nimport { CardNoise, CardBGImage, CardBGImageSmaller } from '../earn/styled';\nimport { useIsTransactionPending } from '../../state/transactions/hooks';\nimport { getEtherscanLink, shortenAddress } from '../../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ContentWrapper = styled(AutoColumn)`\n  width: 100%;\n`;\n_c = ContentWrapper;\nconst ModalUpper = styled(DataCard)`\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\n  background: radial-gradient(76.02% 75.41% at 1.84% 0%, #ff007a 0%, #021d43 100%);\n`;\n_c2 = ModalUpper;\nconst ConfirmOrLoadingWrapper = styled.div`\n  width: 100%;\n  padding: 24px;\n  position: relative;\n  background: ${({\n  activeBG\n}) => activeBG && 'radial-gradient(76.02% 75.41% at 1.84% 0%, rgba(255, 0, 122, 0.2) 0%, rgba(33, 114, 229, 0.2) 100%), #FFFFFF;'};\n`;\n_c3 = ConfirmOrLoadingWrapper;\nconst ConfirmedIcon = styled(ColumnCenter)`\n  padding: 60px 0;\n`;\n_c4 = ConfirmedIcon;\nexport default function AddressClaimModal({\n  isOpen,\n  onDismiss\n}) {\n  _s();\n\n  var _groupSeparator, _groupSeparator2;\n\n  const {\n    chainId\n  } = useActiveWeb3React(); // state for smart contract input\n\n  const [typed, setTyped] = useState('');\n\n  function handleRecipientType(val) {\n    setTyped(val);\n  } // monitor for third party recipient of claim\n\n\n  const {\n    address: parsedAddress\n  } = useENS(typed); // used for UI loading states\n\n  const [attempting, setAttempting] = useState(false); // monitor the status of the claim from contracts and txns\n\n  const {\n    claimCallback\n  } = useClaimCallback(parsedAddress);\n  const unclaimedAmount = useUserUnclaimedAmount(parsedAddress); // check if the user has something available\n\n  const hasAvailableClaim = useUserHasAvailableClaim(parsedAddress);\n  const [hash, setHash] = useState(); // monitor the status of the claim from contracts and txns\n\n  const claimPending = useIsTransactionPending(hash !== null && hash !== void 0 ? hash : '');\n  const claimConfirmed = hash && !claimPending; // use the hash to monitor this txn\n\n  function onClaim() {\n    setAttempting(true);\n    claimCallback().then(hash => {\n      setHash(hash);\n    }) // reset modal and log error\n    .catch(error => {\n      setAttempting(false);\n      console.log(error);\n    });\n  }\n\n  function wrappedOnDismiss() {\n    setAttempting(false);\n    setHash(undefined);\n    setTyped('');\n    onDismiss();\n  }\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    isOpen: isOpen,\n    onDismiss: wrappedOnDismiss,\n    maxHeight: 90,\n    children: [/*#__PURE__*/_jsxDEV(Confetti, {\n      start: Boolean(isOpen && claimConfirmed && attempting)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), !attempting && /*#__PURE__*/_jsxDEV(ContentWrapper, {\n      gap: \"lg\",\n      children: [/*#__PURE__*/_jsxDEV(ModalUpper, {\n        children: [/*#__PURE__*/_jsxDEV(CardBGImage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CardNoise, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CardSection, {\n          gap: \"md\",\n          children: [/*#__PURE__*/_jsxDEV(RowBetween, {\n            children: [/*#__PURE__*/_jsxDEV(TYPE.white, {\n              fontWeight: 500,\n              children: \"Claim POGO Token\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(CloseIcon, {\n              onClick: wrappedOnDismiss,\n              style: {\n                zIndex: 99\n              },\n              stroke: \"white\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TYPE.white, {\n            fontWeight: 700,\n            fontSize: 36,\n            children: [unclaimedAmount === null || unclaimedAmount === void 0 ? void 0 : unclaimedAmount.toFixed(0, (_groupSeparator = {\n              groupSeparator: ','\n            }) !== null && _groupSeparator !== void 0 ? _groupSeparator : '-'), \" POGO\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Break, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AutoColumn, {\n        gap: \"md\",\n        style: {\n          padding: '1rem',\n          paddingTop: '0'\n        },\n        justify: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(TYPE.subHeader, {\n          fontWeight: 500,\n          children: \"Enter an address to trigger a POGO claim. If the address has any claimable POGO it will be sent to them on submission.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(AddressInputPanel, {\n          value: typed,\n          onChange: handleRecipientType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this), parsedAddress && !hasAvailableClaim && /*#__PURE__*/_jsxDEV(TYPE.error, {\n          error: true,\n          children: \"Address has no available claim\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(ButtonPrimary, {\n          disabled: !isAddress(parsedAddress !== null && parsedAddress !== void 0 ? parsedAddress : '') || !hasAvailableClaim,\n          padding: \"16px 16px\",\n          width: \"100%\",\n          borderRadius: \"12px\",\n          mt: \"1rem\",\n          onClick: onClaim,\n          children: \"Claim POGO\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this), (attempting || claimConfirmed) && /*#__PURE__*/_jsxDEV(ConfirmOrLoadingWrapper, {\n      activeBG: true,\n      children: [/*#__PURE__*/_jsxDEV(CardNoise, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CardBGImageSmaller, {\n        desaturate: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(RowBetween, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CloseIcon, {\n          onClick: wrappedOnDismiss,\n          style: {\n            zIndex: 99\n          },\n          stroke: \"black\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ConfirmedIcon, {\n        children: !claimConfirmed ? /*#__PURE__*/_jsxDEV(CustomLightSpinner, {\n          src: Circle,\n          alt: \"loader\",\n          size: '90px'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(UniTokenAnimated, {\n          width: \"72px\",\n          src: tokenLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AutoColumn, {\n        gap: \"100px\",\n        justify: 'center',\n        children: [/*#__PURE__*/_jsxDEV(AutoColumn, {\n          gap: \"12px\",\n          justify: 'center',\n          children: [/*#__PURE__*/_jsxDEV(TYPE.largeHeader, {\n            fontWeight: 600,\n            color: \"black\",\n            children: claimConfirmed ? 'Claimed' : 'Claiming'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 15\n          }, this), !claimConfirmed && /*#__PURE__*/_jsxDEV(Text, {\n            fontSize: 36,\n            color: '#ff007a',\n            fontWeight: 800,\n            children: [unclaimedAmount === null || unclaimedAmount === void 0 ? void 0 : unclaimedAmount.toFixed(0, (_groupSeparator2 = {\n              groupSeparator: ','\n            }) !== null && _groupSeparator2 !== void 0 ? _groupSeparator2 : '-'), \" UNI\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 17\n          }, this), parsedAddress && /*#__PURE__*/_jsxDEV(TYPE.largeHeader, {\n            fontWeight: 600,\n            color: \"black\",\n            children: [\"for \", shortenAddress(parsedAddress)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this), claimConfirmed && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(TYPE.subHeader, {\n            fontWeight: 500,\n            color: \"black\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              role: \"img\",\n              \"aria-label\": \"party-hat\",\n              children: [\"\\uD83C\\uDF89\", ' ']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 19\n            }, this), \"Welcome to team Unicorn :)\", ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n              role: \"img\",\n              \"aria-label\": \"party-hat\",\n              children: \"\\uD83C\\uDF89\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 17\n          }, this)\n        }, void 0, false), attempting && !hash && /*#__PURE__*/_jsxDEV(TYPE.subHeader, {\n          color: \"black\",\n          children: \"Confirm this transaction in your wallet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 15\n        }, this), attempting && hash && !claimConfirmed && chainId && hash && /*#__PURE__*/_jsxDEV(ExternalLink, {\n          href: getEtherscanLink(chainId, hash, 'transaction'),\n          style: {\n            zIndex: 99\n          },\n          children: \"View transaction on Etherscan\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddressClaimModal, \"KCgKLn7m5EvY79lAGKOF2SUT1k0=\", false, function () {\n  return [useActiveWeb3React, useENS, useClaimCallback, useUserUnclaimedAmount, useUserHasAvailableClaim, useIsTransactionPending];\n});\n\n_c5 = AddressClaimModal;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"ContentWrapper\");\n$RefreshReg$(_c2, \"ModalUpper\");\n$RefreshReg$(_c3, \"ConfirmOrLoadingWrapper\");\n$RefreshReg$(_c4, \"ConfirmedIcon\");\n$RefreshReg$(_c5, \"AddressClaimModal\");","map":{"version":3,"sources":["/Users/chichke/Documents/Work/Freelance/swap-project/src/components/claim/AddressClaimModal.tsx"],"names":["React","useState","Modal","AutoColumn","ColumnCenter","styled","DataCard","CardSection","Break","RowBetween","TYPE","ExternalLink","CloseIcon","CustomLightSpinner","UniTokenAnimated","ButtonPrimary","useClaimCallback","useUserUnclaimedAmount","useUserHasAvailableClaim","tokenLogo","Text","AddressInputPanel","useENS","useActiveWeb3React","isAddress","Confetti","CardNoise","CardBGImage","CardBGImageSmaller","useIsTransactionPending","getEtherscanLink","shortenAddress","ContentWrapper","ModalUpper","ConfirmOrLoadingWrapper","div","activeBG","ConfirmedIcon","AddressClaimModal","isOpen","onDismiss","chainId","typed","setTyped","handleRecipientType","val","address","parsedAddress","attempting","setAttempting","claimCallback","unclaimedAmount","hasAvailableClaim","hash","setHash","claimPending","claimConfirmed","onClaim","then","catch","error","console","log","wrappedOnDismiss","undefined","Boolean","zIndex","toFixed","groupSeparator","padding","paddingTop","Circle"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport Modal from '../Modal'\nimport { AutoColumn, ColumnCenter } from '../Column'\nimport styled from 'styled-components'\nimport { DataCard, CardSection, Break } from '../earn/styled'\nimport { RowBetween } from '../Row'\nimport { TYPE, ExternalLink, CloseIcon, CustomLightSpinner, UniTokenAnimated } from '../../theme'\nimport { ButtonPrimary } from '../Button'\nimport { useClaimCallback, useUserUnclaimedAmount, useUserHasAvailableClaim } from '../../state/claim/hooks'\nimport tokenLogo from '../../assets/images/token-logo.png'\nimport Circle from '../../assets/images/blue-loader.svg'\nimport { Text } from 'rebass'\nimport AddressInputPanel from '../AddressInputPanel'\nimport useENS from '../../hooks/useENS'\nimport { useActiveWeb3React } from '../../hooks'\nimport { isAddress } from 'ethers/lib/utils'\nimport Confetti from '../Confetti'\nimport { CardNoise, CardBGImage, CardBGImageSmaller } from '../earn/styled'\nimport { useIsTransactionPending } from '../../state/transactions/hooks'\nimport { TokenAmount } from '@uniswap/sdk'\nimport { getEtherscanLink, shortenAddress } from '../../utils'\n\nconst ContentWrapper = styled(AutoColumn)`\n  width: 100%;\n`\n\nconst ModalUpper = styled(DataCard)`\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\n  background: radial-gradient(76.02% 75.41% at 1.84% 0%, #ff007a 0%, #021d43 100%);\n`\n\nconst ConfirmOrLoadingWrapper = styled.div<{ activeBG: boolean }>`\n  width: 100%;\n  padding: 24px;\n  position: relative;\n  background: ${({ activeBG }) =>\n    activeBG &&\n    'radial-gradient(76.02% 75.41% at 1.84% 0%, rgba(255, 0, 122, 0.2) 0%, rgba(33, 114, 229, 0.2) 100%), #FFFFFF;'};\n`\n\nconst ConfirmedIcon = styled(ColumnCenter)`\n  padding: 60px 0;\n`\n\nexport default function AddressClaimModal({ isOpen, onDismiss }: { isOpen: boolean; onDismiss: () => void }) {\n  const { chainId } = useActiveWeb3React()\n\n  // state for smart contract input\n  const [typed, setTyped] = useState('')\n  function handleRecipientType(val: string) {\n    setTyped(val)\n  }\n\n  // monitor for third party recipient of claim\n  const { address: parsedAddress } = useENS(typed)\n\n  // used for UI loading states\n  const [attempting, setAttempting] = useState<boolean>(false)\n\n  // monitor the status of the claim from contracts and txns\n  const { claimCallback } = useClaimCallback(parsedAddress)\n  const unclaimedAmount: TokenAmount | undefined = useUserUnclaimedAmount(parsedAddress)\n\n  // check if the user has something available\n  const hasAvailableClaim = useUserHasAvailableClaim(parsedAddress)\n\n  const [hash, setHash] = useState<string | undefined>()\n\n  // monitor the status of the claim from contracts and txns\n  const claimPending = useIsTransactionPending(hash ?? '')\n  const claimConfirmed = hash && !claimPending\n\n  // use the hash to monitor this txn\n\n  function onClaim() {\n    setAttempting(true)\n    claimCallback()\n      .then(hash => {\n        setHash(hash)\n      })\n      // reset modal and log error\n      .catch(error => {\n        setAttempting(false)\n        console.log(error)\n      })\n  }\n\n  function wrappedOnDismiss() {\n    setAttempting(false)\n    setHash(undefined)\n    setTyped('')\n    onDismiss()\n  }\n\n  return (\n    <Modal isOpen={isOpen} onDismiss={wrappedOnDismiss} maxHeight={90}>\n      <Confetti start={Boolean(isOpen && claimConfirmed && attempting)} />\n      {!attempting && (\n        <ContentWrapper gap=\"lg\">\n          <ModalUpper>\n            <CardBGImage />\n            <CardNoise />\n            <CardSection gap=\"md\">\n              <RowBetween>\n                <TYPE.white fontWeight={500}>Claim POGO Token</TYPE.white>\n                <CloseIcon onClick={wrappedOnDismiss} style={{ zIndex: 99 }} stroke=\"white\" />\n              </RowBetween>\n              <TYPE.white fontWeight={700} fontSize={36}>\n                {unclaimedAmount?.toFixed(0, { groupSeparator: ',' } ?? '-')} POGO\n              </TYPE.white>\n            </CardSection>\n            <Break />\n          </ModalUpper>\n          <AutoColumn gap=\"md\" style={{ padding: '1rem', paddingTop: '0' }} justify=\"center\">\n            <TYPE.subHeader fontWeight={500}>\n              Enter an address to trigger a POGO claim. If the address has any claimable POGO it will be sent to them on\n              submission.\n            </TYPE.subHeader>\n            <AddressInputPanel value={typed} onChange={handleRecipientType} />\n            {parsedAddress && !hasAvailableClaim && (\n              <TYPE.error error={true}>Address has no available claim</TYPE.error>\n            )}\n            <ButtonPrimary\n              disabled={!isAddress(parsedAddress ?? '') || !hasAvailableClaim}\n              padding=\"16px 16px\"\n              width=\"100%\"\n              borderRadius=\"12px\"\n              mt=\"1rem\"\n              onClick={onClaim}\n            >\n              Claim POGO\n            </ButtonPrimary>\n          </AutoColumn>\n        </ContentWrapper>\n      )}\n      {(attempting || claimConfirmed) && (\n        <ConfirmOrLoadingWrapper activeBG={true}>\n          <CardNoise />\n          <CardBGImageSmaller desaturate />\n          <RowBetween>\n            <div />\n            <CloseIcon onClick={wrappedOnDismiss} style={{ zIndex: 99 }} stroke=\"black\" />\n          </RowBetween>\n          <ConfirmedIcon>\n            {!claimConfirmed ? (\n              <CustomLightSpinner src={Circle} alt=\"loader\" size={'90px'} />\n            ) : (\n              <UniTokenAnimated width=\"72px\" src={tokenLogo} />\n            )}\n          </ConfirmedIcon>\n          <AutoColumn gap=\"100px\" justify={'center'}>\n            <AutoColumn gap=\"12px\" justify={'center'}>\n              <TYPE.largeHeader fontWeight={600} color=\"black\">\n                {claimConfirmed ? 'Claimed' : 'Claiming'}\n              </TYPE.largeHeader>\n              {!claimConfirmed && (\n                <Text fontSize={36} color={'#ff007a'} fontWeight={800}>\n                  {unclaimedAmount?.toFixed(0, { groupSeparator: ',' } ?? '-')} UNI\n                </Text>\n              )}\n              {parsedAddress && (\n                <TYPE.largeHeader fontWeight={600} color=\"black\">\n                  for {shortenAddress(parsedAddress)}\n                </TYPE.largeHeader>\n              )}\n            </AutoColumn>\n            {claimConfirmed && (\n              <>\n                <TYPE.subHeader fontWeight={500} color=\"black\">\n                  <span role=\"img\" aria-label=\"party-hat\">\n                    🎉{' '}\n                  </span>\n                  Welcome to team Unicorn :){' '}\n                  <span role=\"img\" aria-label=\"party-hat\">\n                    🎉\n                  </span>\n                </TYPE.subHeader>\n              </>\n            )}\n            {attempting && !hash && (\n              <TYPE.subHeader color=\"black\">Confirm this transaction in your wallet</TYPE.subHeader>\n            )}\n            {attempting && hash && !claimConfirmed && chainId && hash && (\n              <ExternalLink href={getEtherscanLink(chainId, hash, 'transaction')} style={{ zIndex: 99 }}>\n                View transaction on Etherscan\n              </ExternalLink>\n            )}\n          </AutoColumn>\n        </ConfirmOrLoadingWrapper>\n      )}\n    </Modal>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}