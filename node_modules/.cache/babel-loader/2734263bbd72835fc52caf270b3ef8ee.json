{"ast":null,"code":"// import React, { useCallback, useState } from 'react'\n// import { AutoColumn } from '../../components/Column'\n// import styled from 'styled-components'\n// import { Link } from 'react-router-dom'\n// import { JSBI, TokenAmount, ETHER } from '@uniswap/sdk'\n// import { RouteComponentProps } from 'react-router-dom'\n// import DoubleCurrencyLogo from '../../components/DoubleLogo'\n// import { useCurrency } from '../../hooks/Tokens'\n// import { useWalletModalToggle } from '../../state/application/hooks'\n// import { TYPE } from '../../theme'\n// import { RowBetween } from '../../components/Row'\n// import { CardSection, DataCard, CardNoise, CardBGImage } from '../../components/earn/styled'\n// import { ButtonPrimary, ButtonEmpty } from '../../components/Button'\n// // import StakingModal from '../../components/earn/StakingModal'\n// import { useStakingInfo } from '../../state/stake/hooks'\n// import UnstakingModal from '../../components/earn/UnstakingModal'\n// import ClaimRewardModal from '../../components/earn/ClaimRewardModal'\n// import { useTokenBalance } from '../../state/wallet/hooks'\n// import { useActiveWeb3React } from '../../hooks'\n// import { useColor } from '../../hooks/useColor'\n// import { CountUp } from 'use-count-up'\n// // import { wrappedCurrency } from '../../utils/wrappedCurrency'\n// import { currencyId } from '../../utils/currencyId'\n// import { useTotalSupply } from '../../data/TotalSupply'\n// import { usePair } from '../../data/Reserves'\n// import usePrevious from '../../hooks/usePrevious'\n// import useUSDCPrice from '../../utils/useUSDCPrice'\n// import { BIG_INT_ZERO, BIG_INT_SECONDS_IN_WEEK } from '../../constants'\n// const PageWrapper = styled(AutoColumn)`\n//   max-width: 640px;\n//   width: 100%;\n// `\n// const PositionInfo = styled(AutoColumn)<{ dim: any }>`\n//   position: relative;\n//   max-width: 640px;\n//   width: 100%;\n//   opacity: ${({ dim }) => (dim ? 0.6 : 1)};\n// `\n// const BottomSection = styled(AutoColumn)`\n//   border-radius: 12px;\n//   width: 100%;\n//   position: relative;\n// `\n// const StyledDataCard = styled(DataCard)<{ bgColor?: any; showBackground?: any }>`\n//   background: radial-gradient(76.02% 75.41% at 1.84% 0%, #1e1a31 0%, #3d51a5 100%);\n//   z-index: 2;\n//   box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\n//   background: ${({ theme, bgColor, showBackground }) =>\n//     `radial-gradient(91.85% 100% at 1.84% 0%, ${bgColor} 0%,  ${showBackground ? theme.black : theme.bg5} 100%) `};\n// `\n// const StyledBottomCard = styled(DataCard)<{ dim: any }>`\n//   background: ${({ theme }) => theme.bg3};\n//   opacity: ${({ dim }) => (dim ? 0.4 : 1)};\n//   margin-top: -40px;\n//   padding: 0 1.25rem 1rem 1.25rem;\n//   padding-top: 32px;\n//   z-index: 1;\n// `\n// const PoolData = styled(DataCard)`\n//   background: none;\n//   border: 1px solid ${({ theme }) => theme.bg4};\n//   padding: 1rem;\n//   z-index: 1;\n// `\n// const VoteCard = styled(DataCard)`\n//   background: radial-gradient(76.02% 75.41% at 1.84% 0%, #27ae60 0%, #000000 100%);\n//   overflow: hidden;\n// `\n// const DataRow = styled(RowBetween)`\n//   justify-content: center;\n//   gap: 12px;\n//   ${({ theme }) => theme.mediaWidth.upToSmall`\n//     flex-direction: column;\n//     gap: 12px;\n//   `};\n// `\n// export default function Manage({\n//   match: {\n//     params: { currencyIdA, currencyIdB }\n//   }\n// }: RouteComponentProps<{ currencyIdA: string; currencyIdB: string }>) {\n//   const { account, chainId } = useActiveWeb3React()\n//   // get currencies and pair\n//   const [currencyA, currencyB] = [useCurrency(currencyIdA), useCurrency(currencyIdB)]\n//   // const tokenA = wrappedCurrency(currencyA ?? undefined, chainId)\n//   // const tokenB = wrappedCurrency(currencyB ?? undefined, chainId)\n//   // const [, stakingTokenPair] = usePair(tokenA, tokenB)\n//   // const stakingInfo = useStakingInfo(stakingTokenPair)?.[0]\n//   // detect existing unstaked LP position to show add button if none found\n//   // const userLiquidityUnstaked = useTokenBalance(account ?? undefined, stakingInfo?.stakedAmount?.token)\n//   // const showAddLiquidityButton = Boolean(stakingInfo?.stakedAmount?.equalTo('0') && userLiquidityUnstaked?.equalTo('0'))\n//   // toggle for staking modal and unstaking modal\n//   const [showStakingModal, setShowStakingModal] = useState(false)\n//   const [showUnstakingModal, setShowUnstakingModal] = useState(false)\n//   const [showClaimRewardModal, setShowClaimRewardModal] = useState(false)\n//   // fade cards if nothing staked or nothing earned yet\n//   const disableTop = !stakingInfo?.stakedAmount || stakingInfo.stakedAmount.equalTo(JSBI.BigInt(0))\n//   const token = currencyA === ETHER ? tokenB : tokenA\n//   const WETH = currencyA === ETHER ? tokenA : tokenB\n//   const backgroundColor = useColor(token)\n//   // get WETH value of staked LP tokens\n//   const totalSupplyOfStakingToken = useTotalSupply(stakingInfo?.stakedAmount?.token)\n//   let valueOfTotalStakedAmountInWETH: TokenAmount | undefined\n//   if (totalSupplyOfStakingToken && stakingTokenPair && stakingInfo && WETH) {\n//     // take the total amount of LP tokens staked, multiply by ETH value of all LP tokens, divide by all LP tokens\n//     valueOfTotalStakedAmountInWETH = new TokenAmount(\n//       WETH,\n//       JSBI.divide(\n//         JSBI.multiply(\n//           JSBI.multiply(stakingInfo.totalStakedAmount.raw, stakingTokenPair.reserveOf(WETH).raw),\n//           JSBI.BigInt(2) // this is b/c the value of LP shares are ~double the value of the WETH they entitle owner to\n//         ),\n//         totalSupplyOfStakingToken.raw\n//       )\n//     )\n//   }\n//   const countUpAmount = stakingInfo?.earnedAmount?.toFixed(6) ?? '0'\n//   const countUpAmountPrevious = usePrevious(countUpAmount) ?? '0'\n//   // get the USD value of staked WETH\n//   const USDPrice = useUSDCPrice(WETH)\n//   const valueOfTotalStakedAmountInUSDC =\n//     valueOfTotalStakedAmountInWETH && USDPrice?.quote(valueOfTotalStakedAmountInWETH)\n//   const toggleWalletModal = useWalletModalToggle()\n//   const handleDepositClick = useCallback(() => {\n//     if (account) {\n//       setShowStakingModal(true)\n//     } else {\n//       toggleWalletModal()\n//     }\n//   }, [account, toggleWalletModal])\n//   return (\n//     <PageWrapper gap=\"lg\" justify=\"center\">\n//       <RowBetween style={{ gap: '24px' }}>\n//         <TYPE.mediumHeader style={{ margin: 0 }}>\n//           {currencyA?.symbol}-{currencyB?.symbol} Liquidity Mining\n//         </TYPE.mediumHeader>\n//         <DoubleCurrencyLogo currency0={currencyA ?? undefined} currency1={currencyB ?? undefined} size={24} />\n//       </RowBetween>\n//       <DataRow style={{ gap: '24px' }}>\n//         <PoolData>\n//           <AutoColumn gap=\"sm\">\n//             <TYPE.body style={{ margin: 0 }}>Total deposits</TYPE.body>\n//             <TYPE.body fontSize={24} fontWeight={500}>\n//               {valueOfTotalStakedAmountInUSDC\n//                 ? `$${valueOfTotalStakedAmountInUSDC.toFixed(0, { groupSeparator: ',' })}`\n//                 : `${valueOfTotalStakedAmountInWETH?.toSignificant(4, { groupSeparator: ',' }) ?? '-'} ETH`}\n//             </TYPE.body>\n//           </AutoColumn>\n//         </PoolData>\n//         <PoolData>\n//           <AutoColumn gap=\"sm\">\n//             <TYPE.body style={{ margin: 0 }}>Pool Rate</TYPE.body>\n//             <TYPE.body fontSize={24} fontWeight={500}>\n//               {stakingInfo?.active\n//                 ? stakingInfo?.totalRewardRate\n//                     ?.multiply(BIG_INT_SECONDS_IN_WEEK)\n//                     ?.toFixed(0, { groupSeparator: ',' }) ?? '-'\n//                 : '0'}\n//               {' UNI / week'}\n//             </TYPE.body>\n//           </AutoColumn>\n//         </PoolData>\n//       </DataRow>\n//       {showAddLiquidityButton && (\n//         <VoteCard>\n//           <CardBGImage />\n//           <CardNoise />\n//           <CardSection>\n//             <AutoColumn gap=\"md\">\n//               <RowBetween>\n//                 <TYPE.white fontWeight={600}>Step 1. Get UNI-V2 Liquidity tokens</TYPE.white>\n//               </RowBetween>\n//               <RowBetween style={{ marginBottom: '1rem' }}>\n//                 <TYPE.white fontSize={14}>\n//                   {`UNI-V2 LP tokens are required. Once you've added liquidity to the ${currencyA?.symbol}-${currencyB?.symbol} pool you can stake your liquidity tokens on this page.`}\n//                 </TYPE.white>\n//               </RowBetween>\n//               <ButtonPrimary\n//                 padding=\"8px\"\n//                 borderRadius=\"8px\"\n//                 width={'fit-content'}\n//                 as={Link}\n//                 to={`/add/${currencyA && currencyId(currencyA)}/${currencyB && currencyId(currencyB)}`}\n//               >\n//                 {`Add ${currencyA?.symbol}-${currencyB?.symbol} liquidity`}\n//               </ButtonPrimary>\n//             </AutoColumn>\n//           </CardSection>\n//           <CardBGImage />\n//           <CardNoise />\n//         </VoteCard>\n//       )}\n//       {stakingInfo && (\n//         <>\n//           {/* <StakingModal\n//             isOpen={showStakingModal}\n//             onDismiss={() => setShowStakingModal(false)}\n//             stakingInfo={stakingInfo}\n//             userLiquidityUnstaked={userLiquidityUnstaked}\n//           /> */}\n//           <UnstakingModal\n//             isOpen={showUnstakingModal}\n//             onDismiss={() => setShowUnstakingModal(false)}\n//             stakingInfo={stakingInfo}\n//           />\n//           <ClaimRewardModal\n//             isOpen={showClaimRewardModal}\n//             onDismiss={() => setShowClaimRewardModal(false)}\n//             stakingInfo={stakingInfo}\n//           />\n//         </>\n//       )}\n//       <PositionInfo gap=\"lg\" justify=\"center\" dim={showAddLiquidityButton}>\n//         <BottomSection gap=\"lg\" justify=\"center\">\n//           <StyledDataCard disabled={disableTop} bgColor={backgroundColor} showBackground={!showAddLiquidityButton}>\n//             <CardSection>\n//               <CardBGImage desaturate />\n//               <CardNoise />\n//               <AutoColumn gap=\"md\">\n//                 <RowBetween>\n//                   <TYPE.white fontWeight={600}>Your liquidity deposits</TYPE.white>\n//                 </RowBetween>\n//                 <RowBetween style={{ alignItems: 'baseline' }}>\n//                   <TYPE.white fontSize={36} fontWeight={600}>\n//                     {stakingInfo?.stakedAmount?.toSignificant(6) ?? '-'}\n//                   </TYPE.white>\n//                   <TYPE.white>\n//                     UNI-V2 {currencyA?.symbol}-{currencyB?.symbol}\n//                   </TYPE.white>\n//                 </RowBetween>\n//               </AutoColumn>\n//             </CardSection>\n//           </StyledDataCard>\n//           <StyledBottomCard dim={stakingInfo?.stakedAmount?.equalTo(JSBI.BigInt(0))}>\n//             <CardBGImage desaturate />\n//             <CardNoise />\n//             <AutoColumn gap=\"sm\">\n//               <RowBetween>\n//                 <div>\n//                   <TYPE.black>Your unclaimed UNI</TYPE.black>\n//                 </div>\n//                 {stakingInfo?.earnedAmount && JSBI.notEqual(BIG_INT_ZERO, stakingInfo?.earnedAmount?.raw) && (\n//                   <ButtonEmpty\n//                     padding=\"8px\"\n//                     borderRadius=\"8px\"\n//                     width=\"fit-content\"\n//                     onClick={() => setShowClaimRewardModal(true)}\n//                   >\n//                     Claim\n//                   </ButtonEmpty>\n//                 )}\n//               </RowBetween>\n//               <RowBetween style={{ alignItems: 'baseline' }}>\n//                 <TYPE.largeHeader fontSize={36} fontWeight={600}>\n//                   <CountUp\n//                     key={countUpAmount}\n//                     isCounting\n//                     decimalPlaces={4}\n//                     start={parseFloat(countUpAmountPrevious)}\n//                     end={parseFloat(countUpAmount)}\n//                     thousandsSeparator={','}\n//                     duration={1}\n//                   />\n//                 </TYPE.largeHeader>\n//                 <TYPE.black fontSize={16} fontWeight={500}>\n//                   <span role=\"img\" aria-label=\"wizard-icon\" style={{ marginRight: '8px ' }}>\n//                     ⚡\n//                   </span>\n//                   {stakingInfo?.active\n//                     ? stakingInfo?.rewardRate\n//                         ?.multiply(BIG_INT_SECONDS_IN_WEEK)\n//                         ?.toSignificant(4, { groupSeparator: ',' }) ?? '-'\n//                     : '0'}\n//                   {' UNI / week'}\n//                 </TYPE.black>\n//               </RowBetween>\n//             </AutoColumn>\n//           </StyledBottomCard>\n//         </BottomSection>\n//         <TYPE.main style={{ textAlign: 'center' }} fontSize={14}>\n//           <span role=\"img\" aria-label=\"wizard-icon\" style={{ marginRight: '8px' }}>\n//             ⭐️\n//           </span>\n//           When you withdraw, the contract will automagically claim UNI on your behalf!\n//         </TYPE.main>\n//         {!showAddLiquidityButton && (\n//           <DataRow style={{ marginBottom: '1rem' }}>\n//             {stakingInfo && stakingInfo.active && (\n//               <ButtonPrimary padding=\"8px\" borderRadius=\"8px\" width=\"160px\" onClick={handleDepositClick}>\n//                 {stakingInfo?.stakedAmount?.greaterThan(JSBI.BigInt(0)) ? 'Deposit' : 'Deposit UNI-V2 LP Tokens'}\n//               </ButtonPrimary>\n//             )}\n//             {stakingInfo?.stakedAmount?.greaterThan(JSBI.BigInt(0)) && (\n//               <>\n//                 <ButtonPrimary\n//                   padding=\"8px\"\n//                   borderRadius=\"8px\"\n//                   width=\"160px\"\n//                   onClick={() => setShowUnstakingModal(true)}\n//                 >\n//                   Withdraw\n//                 </ButtonPrimary>\n//               </>\n//             )}\n//           </DataRow>\n//         )}\n//         {!userLiquidityUnstaked ? null : userLiquidityUnstaked.equalTo('0') ? null : !stakingInfo?.active ? null : (\n//           <TYPE.main>{userLiquidityUnstaked.toSignificant(6)} UNI-V2 LP tokens available</TYPE.main>\n//         )}\n//       </PositionInfo>\n//     </PageWrapper>\n//   )\n// }\nexport {};","map":{"version":3,"sources":["/Users/chichke/Documents/Work/Freelance/swap-project/src/pages/Earn/Manage.tsx"],"names":[],"mappingssourcesContent":["// import React, { useCallback, useState } from 'react'\n// import { AutoColumn } from '../../components/Column'\n// import styled from 'styled-components'\n// import { Link } from 'react-router-dom'\n\n// import { JSBI, TokenAmount, ETHER } from '@uniswap/sdk'\n// import { RouteComponentProps } from 'react-router-dom'\n// import DoubleCurrencyLogo from '../../components/DoubleLogo'\n// import { useCurrency } from '../../hooks/Tokens'\n// import { useWalletModalToggle } from '../../state/application/hooks'\n// import { TYPE } from '../../theme'\n\n// import { RowBetween } from '../../components/Row'\n// import { CardSection, DataCard, CardNoise, CardBGImage } from '../../components/earn/styled'\n// import { ButtonPrimary, ButtonEmpty } from '../../components/Button'\n// // import StakingModal from '../../components/earn/StakingModal'\n// import { useStakingInfo } from '../../state/stake/hooks'\n// import UnstakingModal from '../../components/earn/UnstakingModal'\n// import ClaimRewardModal from '../../components/earn/ClaimRewardModal'\n// import { useTokenBalance } from '../../state/wallet/hooks'\n// import { useActiveWeb3React } from '../../hooks'\n// import { useColor } from '../../hooks/useColor'\n// import { CountUp } from 'use-count-up'\n\n// // import { wrappedCurrency } from '../../utils/wrappedCurrency'\n// import { currencyId } from '../../utils/currencyId'\n// import { useTotalSupply } from '../../data/TotalSupply'\n// import { usePair } from '../../data/Reserves'\n// import usePrevious from '../../hooks/usePrevious'\n// import useUSDCPrice from '../../utils/useUSDCPrice'\n// import { BIG_INT_ZERO, BIG_INT_SECONDS_IN_WEEK } from '../../constants'\n\n// const PageWrapper = styled(AutoColumn)`\n//   max-width: 640px;\n//   width: 100%;\n// `\n\n// const PositionInfo = styled(AutoColumn)<{ dim: any }>`\n//   position: relative;\n//   max-width: 640px;\n//   width: 100%;\n//   opacity: ${({ dim }) => (dim ? 0.6 : 1)};\n// `\n\n// const BottomSection = styled(AutoColumn)`\n//   border-radius: 12px;\n//   width: 100%;\n//   position: relative;\n// `\n\n// const StyledDataCard = styled(DataCard)<{ bgColor?: any; showBackground?: any }>`\n//   background: radial-gradient(76.02% 75.41% at 1.84% 0%, #1e1a31 0%, #3d51a5 100%);\n//   z-index: 2;\n//   box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\n//   background: ${({ theme, bgColor, showBackground }) =>\n//     `radial-gradient(91.85% 100% at 1.84% 0%, ${bgColor} 0%,  ${showBackground ? theme.black : theme.bg5} 100%) `};\n// `\n\n// const StyledBottomCard = styled(DataCard)<{ dim: any }>`\n//   background: ${({ theme }) => theme.bg3};\n//   opacity: ${({ dim }) => (dim ? 0.4 : 1)};\n//   margin-top: -40px;\n//   padding: 0 1.25rem 1rem 1.25rem;\n//   padding-top: 32px;\n//   z-index: 1;\n// `\n\n// const PoolData = styled(DataCard)`\n//   background: none;\n//   border: 1px solid ${({ theme }) => theme.bg4};\n//   padding: 1rem;\n//   z-index: 1;\n// `\n\n// const VoteCard = styled(DataCard)`\n//   background: radial-gradient(76.02% 75.41% at 1.84% 0%, #27ae60 0%, #000000 100%);\n//   overflow: hidden;\n// `\n\n// const DataRow = styled(RowBetween)`\n//   justify-content: center;\n//   gap: 12px;\n\n//   ${({ theme }) => theme.mediaWidth.upToSmall`\n//     flex-direction: column;\n//     gap: 12px;\n//   `};\n// `\n\n// export default function Manage({\n//   match: {\n//     params: { currencyIdA, currencyIdB }\n//   }\n// }: RouteComponentProps<{ currencyIdA: string; currencyIdB: string }>) {\n//   const { account, chainId } = useActiveWeb3React()\n\n//   // get currencies and pair\n//   const [currencyA, currencyB] = [useCurrency(currencyIdA), useCurrency(currencyIdB)]\n//   // const tokenA = wrappedCurrency(currencyA ?? undefined, chainId)\n//   // const tokenB = wrappedCurrency(currencyB ?? undefined, chainId)\n\n//   // const [, stakingTokenPair] = usePair(tokenA, tokenB)\n//   // const stakingInfo = useStakingInfo(stakingTokenPair)?.[0]\n\n//   // detect existing unstaked LP position to show add button if none found\n//   // const userLiquidityUnstaked = useTokenBalance(account ?? undefined, stakingInfo?.stakedAmount?.token)\n//   // const showAddLiquidityButton = Boolean(stakingInfo?.stakedAmount?.equalTo('0') && userLiquidityUnstaked?.equalTo('0'))\n\n//   // toggle for staking modal and unstaking modal\n//   const [showStakingModal, setShowStakingModal] = useState(false)\n//   const [showUnstakingModal, setShowUnstakingModal] = useState(false)\n//   const [showClaimRewardModal, setShowClaimRewardModal] = useState(false)\n\n//   // fade cards if nothing staked or nothing earned yet\n//   const disableTop = !stakingInfo?.stakedAmount || stakingInfo.stakedAmount.equalTo(JSBI.BigInt(0))\n\n//   const token = currencyA === ETHER ? tokenB : tokenA\n//   const WETH = currencyA === ETHER ? tokenA : tokenB\n//   const backgroundColor = useColor(token)\n\n//   // get WETH value of staked LP tokens\n//   const totalSupplyOfStakingToken = useTotalSupply(stakingInfo?.stakedAmount?.token)\n//   let valueOfTotalStakedAmountInWETH: TokenAmount | undefined\n//   if (totalSupplyOfStakingToken && stakingTokenPair && stakingInfo && WETH) {\n//     // take the total amount of LP tokens staked, multiply by ETH value of all LP tokens, divide by all LP tokens\n//     valueOfTotalStakedAmountInWETH = new TokenAmount(\n//       WETH,\n//       JSBI.divide(\n//         JSBI.multiply(\n//           JSBI.multiply(stakingInfo.totalStakedAmount.raw, stakingTokenPair.reserveOf(WETH).raw),\n//           JSBI.BigInt(2) // this is b/c the value of LP shares are ~double the value of the WETH they entitle owner to\n//         ),\n//         totalSupplyOfStakingToken.raw\n//       )\n//     )\n//   }\n\n//   const countUpAmount = stakingInfo?.earnedAmount?.toFixed(6) ?? '0'\n//   const countUpAmountPrevious = usePrevious(countUpAmount) ?? '0'\n\n//   // get the USD value of staked WETH\n//   const USDPrice = useUSDCPrice(WETH)\n//   const valueOfTotalStakedAmountInUSDC =\n//     valueOfTotalStakedAmountInWETH && USDPrice?.quote(valueOfTotalStakedAmountInWETH)\n\n//   const toggleWalletModal = useWalletModalToggle()\n\n//   const handleDepositClick = useCallback(() => {\n//     if (account) {\n//       setShowStakingModal(true)\n//     } else {\n//       toggleWalletModal()\n//     }\n//   }, [account, toggleWalletModal])\n\n//   return (\n//     <PageWrapper gap=\"lg\" justify=\"center\">\n//       <RowBetween style={{ gap: '24px' }}>\n//         <TYPE.mediumHeader style={{ margin: 0 }}>\n//           {currencyA?.symbol}-{currencyB?.symbol} Liquidity Mining\n//         </TYPE.mediumHeader>\n//         <DoubleCurrencyLogo currency0={currencyA ?? undefined} currency1={currencyB ?? undefined} size={24} />\n//       </RowBetween>\n\n//       <DataRow style={{ gap: '24px' }}>\n//         <PoolData>\n//           <AutoColumn gap=\"sm\">\n//             <TYPE.body style={{ margin: 0 }}>Total deposits</TYPE.body>\n//             <TYPE.body fontSize={24} fontWeight={500}>\n//               {valueOfTotalStakedAmountInUSDC\n//                 ? `$${valueOfTotalStakedAmountInUSDC.toFixed(0, { groupSeparator: ',' })}`\n//                 : `${valueOfTotalStakedAmountInWETH?.toSignificant(4, { groupSeparator: ',' }) ?? '-'} ETH`}\n//             </TYPE.body>\n//           </AutoColumn>\n//         </PoolData>\n//         <PoolData>\n//           <AutoColumn gap=\"sm\">\n//             <TYPE.body style={{ margin: 0 }}>Pool Rate</TYPE.body>\n//             <TYPE.body fontSize={24} fontWeight={500}>\n//               {stakingInfo?.active\n//                 ? stakingInfo?.totalRewardRate\n//                     ?.multiply(BIG_INT_SECONDS_IN_WEEK)\n//                     ?.toFixed(0, { groupSeparator: ',' }) ?? '-'\n//                 : '0'}\n//               {' UNI / week'}\n//             </TYPE.body>\n//           </AutoColumn>\n//         </PoolData>\n//       </DataRow>\n\n//       {showAddLiquidityButton && (\n//         <VoteCard>\n//           <CardBGImage />\n//           <CardNoise />\n//           <CardSection>\n//             <AutoColumn gap=\"md\">\n//               <RowBetween>\n//                 <TYPE.white fontWeight={600}>Step 1. Get UNI-V2 Liquidity tokens</TYPE.white>\n//               </RowBetween>\n//               <RowBetween style={{ marginBottom: '1rem' }}>\n//                 <TYPE.white fontSize={14}>\n//                   {`UNI-V2 LP tokens are required. Once you've added liquidity to the ${currencyA?.symbol}-${currencyB?.symbol} pool you can stake your liquidity tokens on this page.`}\n//                 </TYPE.white>\n//               </RowBetween>\n//               <ButtonPrimary\n//                 padding=\"8px\"\n//                 borderRadius=\"8px\"\n//                 width={'fit-content'}\n//                 as={Link}\n//                 to={`/add/${currencyA && currencyId(currencyA)}/${currencyB && currencyId(currencyB)}`}\n//               >\n//                 {`Add ${currencyA?.symbol}-${currencyB?.symbol} liquidity`}\n//               </ButtonPrimary>\n//             </AutoColumn>\n//           </CardSection>\n//           <CardBGImage />\n//           <CardNoise />\n//         </VoteCard>\n//       )}\n\n//       {stakingInfo && (\n//         <>\n//           {/* <StakingModal\n//             isOpen={showStakingModal}\n//             onDismiss={() => setShowStakingModal(false)}\n//             stakingInfo={stakingInfo}\n//             userLiquidityUnstaked={userLiquidityUnstaked}\n//           /> */}\n//           <UnstakingModal\n//             isOpen={showUnstakingModal}\n//             onDismiss={() => setShowUnstakingModal(false)}\n//             stakingInfo={stakingInfo}\n//           />\n//           <ClaimRewardModal\n//             isOpen={showClaimRewardModal}\n//             onDismiss={() => setShowClaimRewardModal(false)}\n//             stakingInfo={stakingInfo}\n//           />\n//         </>\n//       )}\n\n//       <PositionInfo gap=\"lg\" justify=\"center\" dim={showAddLiquidityButton}>\n//         <BottomSection gap=\"lg\" justify=\"center\">\n//           <StyledDataCard disabled={disableTop} bgColor={backgroundColor} showBackground={!showAddLiquidityButton}>\n//             <CardSection>\n//               <CardBGImage desaturate />\n//               <CardNoise />\n//               <AutoColumn gap=\"md\">\n//                 <RowBetween>\n//                   <TYPE.white fontWeight={600}>Your liquidity deposits</TYPE.white>\n//                 </RowBetween>\n//                 <RowBetween style={{ alignItems: 'baseline' }}>\n//                   <TYPE.white fontSize={36} fontWeight={600}>\n//                     {stakingInfo?.stakedAmount?.toSignificant(6) ?? '-'}\n//                   </TYPE.white>\n//                   <TYPE.white>\n//                     UNI-V2 {currencyA?.symbol}-{currencyB?.symbol}\n//                   </TYPE.white>\n//                 </RowBetween>\n//               </AutoColumn>\n//             </CardSection>\n//           </StyledDataCard>\n//           <StyledBottomCard dim={stakingInfo?.stakedAmount?.equalTo(JSBI.BigInt(0))}>\n//             <CardBGImage desaturate />\n//             <CardNoise />\n//             <AutoColumn gap=\"sm\">\n//               <RowBetween>\n//                 <div>\n//                   <TYPE.black>Your unclaimed UNI</TYPE.black>\n//                 </div>\n//                 {stakingInfo?.earnedAmount && JSBI.notEqual(BIG_INT_ZERO, stakingInfo?.earnedAmount?.raw) && (\n//                   <ButtonEmpty\n//                     padding=\"8px\"\n//                     borderRadius=\"8px\"\n//                     width=\"fit-content\"\n//                     onClick={() => setShowClaimRewardModal(true)}\n//                   >\n//                     Claim\n//                   </ButtonEmpty>\n//                 )}\n//               </RowBetween>\n//               <RowBetween style={{ alignItems: 'baseline' }}>\n//                 <TYPE.largeHeader fontSize={36} fontWeight={600}>\n//                   <CountUp\n//                     key={countUpAmount}\n//                     isCounting\n//                     decimalPlaces={4}\n//                     start={parseFloat(countUpAmountPrevious)}\n//                     end={parseFloat(countUpAmount)}\n//                     thousandsSeparator={','}\n//                     duration={1}\n//                   />\n//                 </TYPE.largeHeader>\n//                 <TYPE.black fontSize={16} fontWeight={500}>\n//                   <span role=\"img\" aria-label=\"wizard-icon\" style={{ marginRight: '8px ' }}>\n//                     ⚡\n//                   </span>\n//                   {stakingInfo?.active\n//                     ? stakingInfo?.rewardRate\n//                         ?.multiply(BIG_INT_SECONDS_IN_WEEK)\n//                         ?.toSignificant(4, { groupSeparator: ',' }) ?? '-'\n//                     : '0'}\n//                   {' UNI / week'}\n//                 </TYPE.black>\n//               </RowBetween>\n//             </AutoColumn>\n//           </StyledBottomCard>\n//         </BottomSection>\n//         <TYPE.main style={{ textAlign: 'center' }} fontSize={14}>\n//           <span role=\"img\" aria-label=\"wizard-icon\" style={{ marginRight: '8px' }}>\n//             ⭐️\n//           </span>\n//           When you withdraw, the contract will automagically claim UNI on your behalf!\n//         </TYPE.main>\n\n//         {!showAddLiquidityButton && (\n//           <DataRow style={{ marginBottom: '1rem' }}>\n//             {stakingInfo && stakingInfo.active && (\n//               <ButtonPrimary padding=\"8px\" borderRadius=\"8px\" width=\"160px\" onClick={handleDepositClick}>\n//                 {stakingInfo?.stakedAmount?.greaterThan(JSBI.BigInt(0)) ? 'Deposit' : 'Deposit UNI-V2 LP Tokens'}\n//               </ButtonPrimary>\n//             )}\n\n//             {stakingInfo?.stakedAmount?.greaterThan(JSBI.BigInt(0)) && (\n//               <>\n//                 <ButtonPrimary\n//                   padding=\"8px\"\n//                   borderRadius=\"8px\"\n//                   width=\"160px\"\n//                   onClick={() => setShowUnstakingModal(true)}\n//                 >\n//                   Withdraw\n//                 </ButtonPrimary>\n//               </>\n//             )}\n//           </DataRow>\n//         )}\n//         {!userLiquidityUnstaked ? null : userLiquidityUnstaked.equalTo('0') ? null : !stakingInfo?.active ? null : (\n//           <TYPE.main>{userLiquidityUnstaked.toSignificant(6)} UNI-V2 LP tokens available</TYPE.main>\n//         )}\n//       </PositionInfo>\n//     </PageWrapper>\n//   )\n// }\n\nexport {};\n"]},"metadata":{},"sourceType":"module"}