{"ast":null,"code":"import schema from \"@uniswap/token-lists/src/tokenlist.schema.json\";\nimport Ajv from \"ajv\";\nimport axios from \"axios\";\nconst tokenListValidator = new Ajv({\n  allErrors: true\n}).compile(schema);\nconst oneInch = \"https://api.1inch.exchange/v3.0/56/tokens\";\n/**\n * Contains the logic for resolving a list URL to a validated token list\n * @param listUrl list url\n * @param resolveENSContentHash resolves an ens name to a contenthash\n */\n\nexport default async function getTokenList() {\n  const response = await axios.get(oneInch);\n\n  if (response.status < 205 && !tokenListValidator(response.data)) {\n    var _tokenListValidator$e, _tokenListValidator$e2;\n\n    const validationErrors = (_tokenListValidator$e = (_tokenListValidator$e2 = tokenListValidator.errors) === null || _tokenListValidator$e2 === void 0 ? void 0 : _tokenListValidator$e2.reduce((memo, error) => {\n      var _error$message;\n\n      const add = `${error.dataPath} ${(_error$message = error.message) !== null && _error$message !== void 0 ? _error$message : \"\"}`;\n      return memo.length > 0 ? `${memo}; ${add}` : `${add}`;\n    }, \"\")) !== null && _tokenListValidator$e !== void 0 ? _tokenListValidator$e : \"unknown error\";\n    throw new Error(`Token list failed validation: ${validationErrors}`);\n  }\n\n  return response.data;\n}","map":{"version":3,"sources":["/Users/chichke/Documents/Work/Freelance/swap-project/src/utils/getTokenList.ts"],"names":["schema","Ajv","axios","tokenListValidator","allErrors","compile","oneInch","getTokenList","response","get","status","data","validationErrors","errors","reduce","memo","error","add","dataPath","message","length","Error"],"mappings":"AACA,OAAOA,MAAP,MAAmB,gDAAnB;AACA,OAAOC,GAAP,MAAgB,KAAhB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,kBAAkB,GAAG,IAAIF,GAAJ,CAAQ;AAAEG,EAAAA,SAAS,EAAE;AAAb,CAAR,EAA6BC,OAA7B,CAAqCL,MAArC,CAA3B;AAEA,MAAMM,OAAO,GAAG,2CAAhB;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,eAAeC,YAAf,GAAkD;AAC/D,QAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAN,CAAUH,OAAV,CAAvB;;AACA,MAAIE,QAAQ,CAACE,MAAT,GAAkB,GAAlB,IAAyB,CAACP,kBAAkB,CAACK,QAAQ,CAACG,IAAV,CAAhD,EAAiE;AAAA;;AAC/D,UAAMC,gBAAwB,sDAC5BT,kBAAkB,CAACU,MADS,2DAC5B,uBAA2BC,MAA3B,CAA0C,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAAA;;AACzD,YAAMC,GAAG,GAAI,GAAED,KAAK,CAACE,QAAS,IAAlB,kBAAqBF,KAAK,CAACG,OAA3B,2DAAsC,EAAG,EAArD;AACA,aAAOJ,IAAI,CAACK,MAAL,GAAc,CAAd,GAAmB,GAAEL,IAAK,KAAIE,GAAI,EAAlC,GAAuC,GAAEA,GAAI,EAApD;AACD,KAHD,EAGG,EAHH,CAD4B,yEAIlB,eAJZ;AAKA,UAAM,IAAII,KAAJ,CAAW,iCAAgCT,gBAAiB,EAA5D,CAAN;AACD;;AACD,SAAOJ,QAAQ,CAACG,IAAhB;AACD","sourcesContent":["import { TokenList } from \"@uniswap/token-lists\";\nimport schema from \"@uniswap/token-lists/src/tokenlist.schema.json\";\nimport Ajv from \"ajv\";\nimport axios from \"axios\";\n\nconst tokenListValidator = new Ajv({ allErrors: true }).compile(schema);\n\nconst oneInch = \"https://api.1inch.exchange/v3.0/56/tokens\";\n\n/**\n * Contains the logic for resolving a list URL to a validated token list\n * @param listUrl list url\n * @param resolveENSContentHash resolves an ens name to a contenthash\n */\nexport default async function getTokenList(): Promise<TokenList> {\n  const response = await axios.get(oneInch);\n  if (response.status < 205 && !tokenListValidator(response.data)) {\n    const validationErrors: string =\n      tokenListValidator.errors?.reduce<string>((memo, error) => {\n        const add = `${error.dataPath} ${error.message ?? \"\"}`;\n        return memo.length > 0 ? `${memo}; ${add}` : `${add}`;\n      }, \"\") ?? \"unknown error\";\n    throw new Error(`Token list failed validation: ${validationErrors}`);\n  }\n  return response.data;\n}\n"]},"metadata":{},"sourceType":"module"}