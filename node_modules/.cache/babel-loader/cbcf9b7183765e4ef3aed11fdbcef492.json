{"ast":null,"code":"// import { getTokenLogoURL } from \"./../components/CurrencyLogo/index\";\n// // import { wrappedCurrency } from 'utils/wrappedCurrency'\n// import { Currency, Token } from \"@uniswap/sdk\";\n// import { useCallback, useState } from \"react\";\n// import { useActiveWeb3React } from \"hooks\";\n// export default function useAddTokenToMetamask(\n//   currencyToAdd: Currency | undefined\n// ): { addToken: () => void; success: boolean | undefined } {\n//   const { library, chainId } = useActiveWeb3React();\n//   // const token: Token | undefined = wrappedCurrency(currencyToAdd, chainId);\n//   const [success, setSuccess] = useState<boolean | undefined>();\n//   const addToken = useCallback(() => {\n//     if (\n//       library &&\n//       library.provider.isMetaMask &&\n//       library.provider.request &&\n//       token\n//     ) {\n//       library.provider\n//         .request({\n//           method: \"wallet_watchAsset\",\n//           params: {\n//             //@ts-ignore // need this for incorrect ethers provider type\n//             type: \"ERC20\",\n//             options: {\n//               address: token.address,\n//               symbol: token.symbol,\n//               decimals: token.decimals,\n//               image: getTokenLogoURL(token.address),\n//             },\n//           },\n//         })\n//         .then((success) => {\n//           setSuccess(success);\n//         })\n//         .catch(() => setSuccess(false));\n//     } else {\n//       setSuccess(false);\n//     }\n//   }, [library, token]);\n//   return { addToken, success };\n// }\nexport {};","map":{"version":3,"sources":["/Users/chichke/Documents/Work/Freelance/swap-project/src/hooks/useAddTokenToMetamask.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["// import { getTokenLogoURL } from \"./../components/CurrencyLogo/index\";\n// // import { wrappedCurrency } from 'utils/wrappedCurrency'\n// import { Currency, Token } from \"@uniswap/sdk\";\n// import { useCallback, useState } from \"react\";\n// import { useActiveWeb3React } from \"hooks\";\n\n// export default function useAddTokenToMetamask(\n//   currencyToAdd: Currency | undefined\n// ): { addToken: () => void; success: boolean | undefined } {\n//   const { library, chainId } = useActiveWeb3React();\n\n//   // const token: Token | undefined = wrappedCurrency(currencyToAdd, chainId);\n\n//   const [success, setSuccess] = useState<boolean | undefined>();\n\n//   const addToken = useCallback(() => {\n//     if (\n//       library &&\n//       library.provider.isMetaMask &&\n//       library.provider.request &&\n//       token\n//     ) {\n//       library.provider\n//         .request({\n//           method: \"wallet_watchAsset\",\n//           params: {\n//             //@ts-ignore // need this for incorrect ethers provider type\n//             type: \"ERC20\",\n//             options: {\n//               address: token.address,\n//               symbol: token.symbol,\n//               decimals: token.decimals,\n//               image: getTokenLogoURL(token.address),\n//             },\n//           },\n//         })\n//         .then((success) => {\n//           setSuccess(success);\n//         })\n//         .catch(() => setSuccess(false));\n//     } else {\n//       setSuccess(false);\n//     }\n//   }, [library, token]);\n\n//   return { addToken, success };\n// }\nexport {};\n"]},"metadata":{},"sourceType":"module"}