{"ast":null,"code":"// import { TokenAmount, JSBI } from \"@uniswap/sdk\";\n// import { TransactionResponse } from \"@ethersproject/providers\";\n// import { useEffect, useState } from \"react\";\n// import { useActiveWeb3React } from \"../../hooks\";\n// import { useMerkleDistributorContract } from \"../../hooks/useContract\";\n// import { useSingleCallResult } from \"../multicall/hooks\";\n// import { calculateGasMargin, isAddress } from \"../../utils\";\n// import { useTransactionAdder } from \"../transactions/hooks\";\n// import { ChainId } from \"../../types\";\n// interface UserClaimData {\n//   index: number;\n//   amount: string;\n//   proof: string[];\n//   flags?: {\n//     isSOCKS: boolean;\n//     isLP: boolean;\n//     isUser: boolean;\n//   };\n// }\n// const CLAIM_PROMISES: { [key: string]: Promise<UserClaimData | null> } = {};\n// // returns the claim for the given address, or null if not valid\n// function fetchClaim(\n//   account: string,\n//   chainId: ChainId\n// ): Promise<UserClaimData | null> {\n//   const formatted = isAddress(account);\n//   if (!formatted) return Promise.reject(new Error(\"Invalid address\"));\n//   const key = `${chainId}:${account}`;\n//   return (CLAIM_PROMISES[key] =\n//     CLAIM_PROMISES[key] ??\n//     fetch(\n//       `https://gentle-frost-9e74.uniswap.workers.dev/${chainId}/${formatted}`\n//     )\n//       .then((res) => {\n//         if (res.status === 200) {\n//           return res.json();\n//         } else {\n//           console.debug(\n//             `No claim for account ${formatted} on chain ID ${chainId}`\n//           );\n//           return null;\n//         }\n//       })\n//       .catch((error) => {\n//         console.error(\"Failed to get claim data\", error);\n//       }));\n// }\n// // parse distributorContract blob and detect if user has claim data\n// // null means we know it does not\n// export function useUserClaimData(\n//   account: string | null | undefined\n// ): UserClaimData | null | undefined {\n//   const { chainId } = useActiveWeb3React();\n//   const key = `${chainId}:${account}`;\n//   const [claimInfo, setClaimInfo] = useState<{\n//     [key: string]: UserClaimData | null;\n//   }>({});\n//   useEffect(() => {\n//     if (!account || !chainId) return;\n//     fetchClaim(account, chainId).then((accountClaimInfo) =>\n//       setClaimInfo((claimInfo) => {\n//         return {\n//           ...claimInfo,\n//           [key]: accountClaimInfo,\n//         };\n//       })\n//     );\n//   }, [account, chainId, key]);\n//   return account && chainId ? claimInfo[key] : undefined;\n// }\n// // check if user is in blob and has not yet claimed UNI\n// export function useUserHasAvailableClaim(\n//   account: string | null | undefined\n// ): boolean {\n//   const userClaimData = useUserClaimData(account);\n//   const distributorContract = useMerkleDistributorContract();\n//   const isClaimedResult = useSingleCallResult(\n//     distributorContract,\n//     \"isClaimed\",\n//     [userClaimData?.index]\n//   );\n//   // user is in blob and contract marks as unclaimed\n//   return Boolean(\n//     userClaimData &&\n//       !isClaimedResult.loading &&\n//       isClaimedResult.result?.[0] === false\n//   );\n// }\n// export function useUserUnclaimedAmount(\n//   account: string | null | undefined\n// ): TokenAmount | undefined {\n//   const { chainId } = useActiveWeb3React();\n//   const userClaimData = useUserClaimData(account);\n//   const canClaim = useUserHasAvailableClaim(account);\n//   const uni = chainId ? UNI[chainId] : undefined;\n//   if (!uni) return undefined;\n//   if (!canClaim || !userClaimData) {\n//     return new TokenAmount(uni, JSBI.BigInt(0));\n//   }\n//   return new TokenAmount(uni, JSBI.BigInt(userClaimData.amount));\n// }\n// export function useClaimCallback(account: string | null | undefined): {\n//   claimCallback: () => Promise<string>;\n// } {\n//   // get claim data for this account\n//   const { library, chainId } = useActiveWeb3React();\n//   const claimData = useUserClaimData(account);\n//   // used for popup summary\n//   const unClaimedAmount: TokenAmount | undefined =\n//     useUserUnclaimedAmount(account);\n//   const addTransaction = useTransactionAdder();\n//   const distributorContract = useMerkleDistributorContract();\n//   const claimCallback = async function () {\n//     if (!claimData || !account || !library || !chainId || !distributorContract)\n//       return;\n//     const args = [claimData.index, account, claimData.amount, claimData.proof];\n//     return distributorContract.estimateGas[\"claim\"](...args, {}).then(\n//       (estimatedGasLimit) => {\n//         return distributorContract\n//           .claim(...args, {\n//             value: null,\n//             gasLimit: calculateGasMargin(estimatedGasLimit),\n//           })\n//           .then((response: TransactionResponse) => {\n//             addTransaction(response, {\n//               summary: `Claimed ${unClaimedAmount?.toSignificant(4)} UNI`,\n//               claim: { recipient: account },\n//             });\n//             return response.hash;\n//           });\n//       }\n//     );\n//   };\n//   return { claimCallback };\n// }","map":{"version":3,"sources":["/Users/chichke/Documents/Work/Freelance/swap-project/src/state/claim/hooks.ts"],"names":[],"mappingssourcesContent":["// import { TokenAmount, JSBI } from \"@uniswap/sdk\";\n// import { TransactionResponse } from \"@ethersproject/providers\";\n// import { useEffect, useState } from \"react\";\n// import { useActiveWeb3React } from \"../../hooks\";\n// import { useMerkleDistributorContract } from \"../../hooks/useContract\";\n// import { useSingleCallResult } from \"../multicall/hooks\";\n// import { calculateGasMargin, isAddress } from \"../../utils\";\n// import { useTransactionAdder } from \"../transactions/hooks\";\n// import { ChainId } from \"../../types\";\n// interface UserClaimData {\n//   index: number;\n//   amount: string;\n//   proof: string[];\n//   flags?: {\n//     isSOCKS: boolean;\n//     isLP: boolean;\n//     isUser: boolean;\n//   };\n// }\n\n// const CLAIM_PROMISES: { [key: string]: Promise<UserClaimData | null> } = {};\n\n// // returns the claim for the given address, or null if not valid\n// function fetchClaim(\n//   account: string,\n//   chainId: ChainId\n// ): Promise<UserClaimData | null> {\n//   const formatted = isAddress(account);\n//   if (!formatted) return Promise.reject(new Error(\"Invalid address\"));\n//   const key = `${chainId}:${account}`;\n\n//   return (CLAIM_PROMISES[key] =\n//     CLAIM_PROMISES[key] ??\n//     fetch(\n//       `https://gentle-frost-9e74.uniswap.workers.dev/${chainId}/${formatted}`\n//     )\n//       .then((res) => {\n//         if (res.status === 200) {\n//           return res.json();\n//         } else {\n//           console.debug(\n//             `No claim for account ${formatted} on chain ID ${chainId}`\n//           );\n//           return null;\n//         }\n//       })\n//       .catch((error) => {\n//         console.error(\"Failed to get claim data\", error);\n//       }));\n// }\n\n// // parse distributorContract blob and detect if user has claim data\n// // null means we know it does not\n// export function useUserClaimData(\n//   account: string | null | undefined\n// ): UserClaimData | null | undefined {\n//   const { chainId } = useActiveWeb3React();\n\n//   const key = `${chainId}:${account}`;\n//   const [claimInfo, setClaimInfo] = useState<{\n//     [key: string]: UserClaimData | null;\n//   }>({});\n\n//   useEffect(() => {\n//     if (!account || !chainId) return;\n//     fetchClaim(account, chainId).then((accountClaimInfo) =>\n//       setClaimInfo((claimInfo) => {\n//         return {\n//           ...claimInfo,\n//           [key]: accountClaimInfo,\n//         };\n//       })\n//     );\n//   }, [account, chainId, key]);\n\n//   return account && chainId ? claimInfo[key] : undefined;\n// }\n\n// // check if user is in blob and has not yet claimed UNI\n// export function useUserHasAvailableClaim(\n//   account: string | null | undefined\n// ): boolean {\n//   const userClaimData = useUserClaimData(account);\n//   const distributorContract = useMerkleDistributorContract();\n//   const isClaimedResult = useSingleCallResult(\n//     distributorContract,\n//     \"isClaimed\",\n//     [userClaimData?.index]\n//   );\n//   // user is in blob and contract marks as unclaimed\n//   return Boolean(\n//     userClaimData &&\n//       !isClaimedResult.loading &&\n//       isClaimedResult.result?.[0] === false\n//   );\n// }\n\n// export function useUserUnclaimedAmount(\n//   account: string | null | undefined\n// ): TokenAmount | undefined {\n//   const { chainId } = useActiveWeb3React();\n//   const userClaimData = useUserClaimData(account);\n//   const canClaim = useUserHasAvailableClaim(account);\n\n//   const uni = chainId ? UNI[chainId] : undefined;\n//   if (!uni) return undefined;\n//   if (!canClaim || !userClaimData) {\n//     return new TokenAmount(uni, JSBI.BigInt(0));\n//   }\n//   return new TokenAmount(uni, JSBI.BigInt(userClaimData.amount));\n// }\n\n// export function useClaimCallback(account: string | null | undefined): {\n//   claimCallback: () => Promise<string>;\n// } {\n//   // get claim data for this account\n//   const { library, chainId } = useActiveWeb3React();\n//   const claimData = useUserClaimData(account);\n\n//   // used for popup summary\n//   const unClaimedAmount: TokenAmount | undefined =\n//     useUserUnclaimedAmount(account);\n//   const addTransaction = useTransactionAdder();\n//   const distributorContract = useMerkleDistributorContract();\n\n//   const claimCallback = async function () {\n//     if (!claimData || !account || !library || !chainId || !distributorContract)\n//       return;\n\n//     const args = [claimData.index, account, claimData.amount, claimData.proof];\n\n//     return distributorContract.estimateGas[\"claim\"](...args, {}).then(\n//       (estimatedGasLimit) => {\n//         return distributorContract\n//           .claim(...args, {\n//             value: null,\n//             gasLimit: calculateGasMargin(estimatedGasLimit),\n//           })\n//           .then((response: TransactionResponse) => {\n//             addTransaction(response, {\n//               summary: `Claimed ${unClaimedAmount?.toSignificant(4)} UNI`,\n//               claim: { recipient: account },\n//             });\n//             return response.hash;\n//           });\n//       }\n//     );\n//   };\n\n//   return { claimCallback };\n// }\n"]},"metadata":{},"sourceType":"module"}