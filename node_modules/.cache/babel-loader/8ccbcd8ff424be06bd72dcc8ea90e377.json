{"ast":null,"code":"// import React, { useState, useCallback } from 'react'\n// import useIsArgentWallet from '../../hooks/useIsArgentWallet'\n// import useTransactionDeadline from '../../hooks/useTransactionDeadline'\n// import Modal from '../Modal'\n// import { AutoColumn } from '../Column'\n// import styled from 'styled-components'\n// import { RowBetween } from '../Row'\n// import { TYPE, CloseIcon } from '../../theme'\n// import { ButtonConfirmed, ButtonError } from '../Button'\n// import ProgressCircles from '../ProgressSteps'\n// import CurrencyInputPanel from '../CurrencyInputPanel'\n// import { TokenAmount, Pair } from '@uniswap/sdk'\n// import { useActiveWeb3React } from '../../hooks'\n// import { maxAmountSpend } from '../../utils/maxAmountSpend'\n// import { usePairContract, useStakingContract } from '../../hooks/useContract'\n// import { useApproveCallback, ApprovalState } from '../../hooks/useApproveCallback'\n// import { splitSignature } from 'ethers/lib/utils'\n// import { StakingInfo, useDerivedStakeInfo } from '../../state/stake/hooks'\n// import { wrappedCurrencyAmount } from '../../utils/wrappedCurrency'\n// import { TransactionResponse } from '@ethersproject/providers'\n// import { useTransactionAdder } from '../../state/transactions/hooks'\n// import { LoadingView, SubmittedView } from '../ModalViews'\n// const HypotheticalRewardRate = styled.div<{ dim: boolean }>`\n//   display: flex;\n//   justify-content: space-between;\n//   padding-right: 20px;\n//   padding-left: 20px;\n//   opacity: ${({ dim }) => (dim ? 0.5 : 1)};\n// `\n// const ContentWrapper = styled(AutoColumn)`\n//   width: 100%;\n//   padding: 1rem;\n// `\n// interface StakingModalProps {\n//   isOpen: boolean\n//   onDismiss: () => void\n//   stakingInfo: StakingInfo\n//   userLiquidityUnstaked: TokenAmount | undefined\n// }\n// export default function StakingModal({ isOpen, onDismiss, stakingInfo, userLiquidityUnstaked }: StakingModalProps) {\n//   const { account, chainId, library } = useActiveWeb3React()\n//   // track and parse user input\n//   const [typedValue, setTypedValue] = useState('')\n//   const { parsedAmount, error } = useDerivedStakeInfo(typedValue, stakingInfo.stakedAmount.token, userLiquidityUnstaked)\n//   const parsedAmountWrapped = wrappedCurrencyAmount(parsedAmount, chainId)\n//   let hypotheticalRewardRate: TokenAmount = new TokenAmount(stakingInfo.rewardRate.token, '0')\n//   if (parsedAmountWrapped?.greaterThan('0')) {\n//     hypotheticalRewardRate = stakingInfo.getHypotheticalRewardRate(\n//       stakingInfo.stakedAmount.add(parsedAmountWrapped),\n//       stakingInfo.totalStakedAmount.add(parsedAmountWrapped),\n//       stakingInfo.totalRewardRate\n//     )\n//   }\n//   // state for pending and submitted txn views\n//   const addTransaction = useTransactionAdder()\n//   const [attempting, setAttempting] = useState<boolean>(false)\n//   const [hash, setHash] = useState<string | undefined>()\n//   const wrappedOnDismiss = useCallback(() => {\n//     setHash(undefined)\n//     setAttempting(false)\n//     onDismiss()\n//   }, [onDismiss])\n//   // pair contract for this token to be staked\n//   const dummyPair = new Pair(new TokenAmount(stakingInfo.tokens[0], '0'), new TokenAmount(stakingInfo.tokens[1], '0'))\n//   const pairContract = usePairContract(dummyPair.liquidityToken.address)\n//   // approval data for stake\n//   const deadline = useTransactionDeadline()\n//   const [signatureData, setSignatureData] = useState<{ v: number; r: string; s: string; deadline: number } | null>(null)\n//   const [approval, approveCallback] = useApproveCallback(parsedAmount, stakingInfo.stakingRewardAddress)\n//   const isArgentWallet = useIsArgentWallet()\n//   const stakingContract = useStakingContract(stakingInfo.stakingRewardAddress)\n//   async function onStake() {\n//     setAttempting(true)\n//     if (stakingContract && parsedAmount && deadline) {\n//       if (approval === ApprovalState.APPROVED) {\n//         await stakingContract.stake(`0x${parsedAmount.raw.toString(16)}`, { gasLimit: 350000 })\n//       } else if (signatureData) {\n//         stakingContract\n//           .stakeWithPermit(\n//             `0x${parsedAmount.raw.toString(16)}`,\n//             signatureData.deadline,\n//             signatureData.v,\n//             signatureData.r,\n//             signatureData.s,\n//             { gasLimit: 350000 }\n//           )\n//           .then((response: TransactionResponse) => {\n//             addTransaction(response, {\n//               summary: `Deposit liquidity`\n//             })\n//             setHash(response.hash)\n//           })\n//           .catch((error: any) => {\n//             setAttempting(false)\n//             console.log(error)\n//           })\n//       } else {\n//         setAttempting(false)\n//         throw new Error('Attempting to stake without approval or a signature. Please contact support.')\n//       }\n//     }\n//   }\n//   // wrapped onUserInput to clear signatures\n//   const onUserInput = useCallback((typedValue: string) => {\n//     setSignatureData(null)\n//     setTypedValue(typedValue)\n//   }, [])\n//   // used for max input button\n//   const maxAmountInput = maxAmountSpend(userLiquidityUnstaked)\n//   const atMaxAmount = Boolean(maxAmountInput && parsedAmount?.equalTo(maxAmountInput))\n//   const handleMax = useCallback(() => {\n//     maxAmountInput && onUserInput(maxAmountInput.toExact())\n//   }, [maxAmountInput, onUserInput])\n//   async function onAttemptToApprove() {\n//     if (!pairContract || !library || !deadline) throw new Error('missing dependencies')\n//     const liquidityAmount = parsedAmount\n//     if (!liquidityAmount) throw new Error('missing liquidity amount')\n//     if (isArgentWallet) {\n//       return approveCallback()\n//     }\n//     // try to gather a signature for permission\n//     const nonce = await pairContract.nonces(account)\n//     const EIP712Domain = [\n//       { name: 'name', type: 'string' },\n//       { name: 'version', type: 'string' },\n//       { name: 'chainId', type: 'uint256' },\n//       { name: 'verifyingContract', type: 'address' }\n//     ]\n//     const domain = {\n//       name: 'Uniswap V2',\n//       version: '1',\n//       chainId: chainId,\n//       verifyingContract: pairContract.address\n//     }\n//     const Permit = [\n//       { name: 'owner', type: 'address' },\n//       { name: 'spender', type: 'address' },\n//       { name: 'value', type: 'uint256' },\n//       { name: 'nonce', type: 'uint256' },\n//       { name: 'deadline', type: 'uint256' }\n//     ]\n//     const message = {\n//       owner: account,\n//       spender: stakingInfo.stakingRewardAddress,\n//       value: liquidityAmount.raw.toString(),\n//       nonce: nonce.toHexString(),\n//       deadline: deadline.toNumber()\n//     }\n//     const data = JSON.stringify({\n//       types: {\n//         EIP712Domain,\n//         Permit\n//       },\n//       domain,\n//       primaryType: 'Permit',\n//       message\n//     })\n//     library\n//       .send('eth_signTypedData_v4', [account, data])\n//       .then(splitSignature)\n//       .then(signature => {\n//         setSignatureData({\n//           v: signature.v,\n//           r: signature.r,\n//           s: signature.s,\n//           deadline: deadline.toNumber()\n//         })\n//       })\n//       .catch(error => {\n//         // for all errors other than 4001 (EIP-1193 user rejected request), fall back to manual approve\n//         if (error?.code !== 4001) {\n//           approveCallback()\n//         }\n//       })\n//   }\n//   return (\n//     <Modal isOpen={isOpen} onDismiss={wrappedOnDismiss} maxHeight={90}>\n//       {!attempting && !hash && (\n//         <ContentWrapper gap=\"lg\">\n//           <RowBetween>\n//             <TYPE.mediumHeader>Deposit</TYPE.mediumHeader>\n//             <CloseIcon onClick={wrappedOnDismiss} />\n//           </RowBetween>\n//           <CurrencyInputPanel\n//             value={typedValue}\n//             onUserInput={onUserInput}\n//             onMax={handleMax}\n//             showMaxButton={!atMaxAmount}\n//             currency={stakingInfo.stakedAmount.token}\n//             pair={dummyPair}\n//             label={''}\n//             disableCurrencySelect={true}\n//             customBalanceText={'Available to deposit: '}\n//             id=\"stake-liquidity-token\"\n//           />\n//           <HypotheticalRewardRate dim={!hypotheticalRewardRate.greaterThan('0')}>\n//             <div>\n//               <TYPE.black fontWeight={600}>Weekly Rewards</TYPE.black>\n//             </div>\n//             <TYPE.black>\n//               {hypotheticalRewardRate.multiply((60 * 60 * 24 * 7).toString()).toSignificant(4, { groupSeparator: ',' })}{' '}\n//               POGO / week\n//             </TYPE.black>\n//           </HypotheticalRewardRate>\n//           <RowBetween>\n//             <ButtonConfirmed\n//               mr=\"0.5rem\"\n//               onClick={onAttemptToApprove}\n//               confirmed={approval === ApprovalState.APPROVED || signatureData !== null}\n//               disabled={approval !== ApprovalState.NOT_APPROVED || signatureData !== null}\n//             >\n//               Approve\n//             </ButtonConfirmed>\n//             <ButtonError\n//               disabled={!!error || (signatureData === null && approval !== ApprovalState.APPROVED)}\n//               error={!!error && !!parsedAmount}\n//               onClick={onStake}\n//             >\n//               {error ?? 'Deposit'}\n//             </ButtonError>\n//           </RowBetween>\n//           <ProgressCircles steps={[approval === ApprovalState.APPROVED || signatureData !== null]} disabled={true} />\n//         </ContentWrapper>\n//       )}\n//       {attempting && !hash && (\n//         <LoadingView onDismiss={wrappedOnDismiss}>\n//           <AutoColumn gap=\"12px\" justify={'center'}>\n//             <TYPE.largeHeader>Depositing Liquidity</TYPE.largeHeader>\n//             <TYPE.body fontSize={20}>{parsedAmount?.toSignificant(4)} UNI-V2</TYPE.body>\n//           </AutoColumn>\n//         </LoadingView>\n//       )}\n//       {attempting && hash && (\n//         <SubmittedView onDismiss={wrappedOnDismiss} hash={hash}>\n//           <AutoColumn gap=\"12px\" justify={'center'}>\n//             <TYPE.largeHeader>Transaction Submitted</TYPE.largeHeader>\n//             <TYPE.body fontSize={20}>Deposited {parsedAmount?.toSignificant(4)} UNI-V2</TYPE.body>\n//           </AutoColumn>\n//         </SubmittedView>\n//       )}\n//     </Modal>\n//   )\n// }","map":{"version":3,"sources":["/Users/chichke/Documents/Work/Freelance/swap-project/src/components/earn/StakingModal.tsx"],"names":[],"mappingssourcesContent":["// import React, { useState, useCallback } from 'react'\n// import useIsArgentWallet from '../../hooks/useIsArgentWallet'\n// import useTransactionDeadline from '../../hooks/useTransactionDeadline'\n// import Modal from '../Modal'\n// import { AutoColumn } from '../Column'\n// import styled from 'styled-components'\n// import { RowBetween } from '../Row'\n// import { TYPE, CloseIcon } from '../../theme'\n// import { ButtonConfirmed, ButtonError } from '../Button'\n// import ProgressCircles from '../ProgressSteps'\n// import CurrencyInputPanel from '../CurrencyInputPanel'\n// import { TokenAmount, Pair } from '@uniswap/sdk'\n// import { useActiveWeb3React } from '../../hooks'\n// import { maxAmountSpend } from '../../utils/maxAmountSpend'\n// import { usePairContract, useStakingContract } from '../../hooks/useContract'\n// import { useApproveCallback, ApprovalState } from '../../hooks/useApproveCallback'\n// import { splitSignature } from 'ethers/lib/utils'\n// import { StakingInfo, useDerivedStakeInfo } from '../../state/stake/hooks'\n// import { wrappedCurrencyAmount } from '../../utils/wrappedCurrency'\n// import { TransactionResponse } from '@ethersproject/providers'\n// import { useTransactionAdder } from '../../state/transactions/hooks'\n// import { LoadingView, SubmittedView } from '../ModalViews'\n\n// const HypotheticalRewardRate = styled.div<{ dim: boolean }>`\n//   display: flex;\n//   justify-content: space-between;\n//   padding-right: 20px;\n//   padding-left: 20px;\n\n//   opacity: ${({ dim }) => (dim ? 0.5 : 1)};\n// `\n\n// const ContentWrapper = styled(AutoColumn)`\n//   width: 100%;\n//   padding: 1rem;\n// `\n\n// interface StakingModalProps {\n//   isOpen: boolean\n//   onDismiss: () => void\n//   stakingInfo: StakingInfo\n//   userLiquidityUnstaked: TokenAmount | undefined\n// }\n\n// export default function StakingModal({ isOpen, onDismiss, stakingInfo, userLiquidityUnstaked }: StakingModalProps) {\n//   const { account, chainId, library } = useActiveWeb3React()\n\n//   // track and parse user input\n//   const [typedValue, setTypedValue] = useState('')\n//   const { parsedAmount, error } = useDerivedStakeInfo(typedValue, stakingInfo.stakedAmount.token, userLiquidityUnstaked)\n//   const parsedAmountWrapped = wrappedCurrencyAmount(parsedAmount, chainId)\n\n//   let hypotheticalRewardRate: TokenAmount = new TokenAmount(stakingInfo.rewardRate.token, '0')\n//   if (parsedAmountWrapped?.greaterThan('0')) {\n//     hypotheticalRewardRate = stakingInfo.getHypotheticalRewardRate(\n//       stakingInfo.stakedAmount.add(parsedAmountWrapped),\n//       stakingInfo.totalStakedAmount.add(parsedAmountWrapped),\n//       stakingInfo.totalRewardRate\n//     )\n//   }\n\n//   // state for pending and submitted txn views\n//   const addTransaction = useTransactionAdder()\n//   const [attempting, setAttempting] = useState<boolean>(false)\n//   const [hash, setHash] = useState<string | undefined>()\n//   const wrappedOnDismiss = useCallback(() => {\n//     setHash(undefined)\n//     setAttempting(false)\n//     onDismiss()\n//   }, [onDismiss])\n\n//   // pair contract for this token to be staked\n//   const dummyPair = new Pair(new TokenAmount(stakingInfo.tokens[0], '0'), new TokenAmount(stakingInfo.tokens[1], '0'))\n//   const pairContract = usePairContract(dummyPair.liquidityToken.address)\n\n//   // approval data for stake\n//   const deadline = useTransactionDeadline()\n//   const [signatureData, setSignatureData] = useState<{ v: number; r: string; s: string; deadline: number } | null>(null)\n//   const [approval, approveCallback] = useApproveCallback(parsedAmount, stakingInfo.stakingRewardAddress)\n\n//   const isArgentWallet = useIsArgentWallet()\n//   const stakingContract = useStakingContract(stakingInfo.stakingRewardAddress)\n//   async function onStake() {\n//     setAttempting(true)\n//     if (stakingContract && parsedAmount && deadline) {\n//       if (approval === ApprovalState.APPROVED) {\n//         await stakingContract.stake(`0x${parsedAmount.raw.toString(16)}`, { gasLimit: 350000 })\n//       } else if (signatureData) {\n//         stakingContract\n//           .stakeWithPermit(\n//             `0x${parsedAmount.raw.toString(16)}`,\n//             signatureData.deadline,\n//             signatureData.v,\n//             signatureData.r,\n//             signatureData.s,\n//             { gasLimit: 350000 }\n//           )\n//           .then((response: TransactionResponse) => {\n//             addTransaction(response, {\n//               summary: `Deposit liquidity`\n//             })\n//             setHash(response.hash)\n//           })\n//           .catch((error: any) => {\n//             setAttempting(false)\n//             console.log(error)\n//           })\n//       } else {\n//         setAttempting(false)\n//         throw new Error('Attempting to stake without approval or a signature. Please contact support.')\n//       }\n//     }\n//   }\n\n//   // wrapped onUserInput to clear signatures\n//   const onUserInput = useCallback((typedValue: string) => {\n//     setSignatureData(null)\n//     setTypedValue(typedValue)\n//   }, [])\n\n//   // used for max input button\n//   const maxAmountInput = maxAmountSpend(userLiquidityUnstaked)\n//   const atMaxAmount = Boolean(maxAmountInput && parsedAmount?.equalTo(maxAmountInput))\n//   const handleMax = useCallback(() => {\n//     maxAmountInput && onUserInput(maxAmountInput.toExact())\n//   }, [maxAmountInput, onUserInput])\n\n//   async function onAttemptToApprove() {\n//     if (!pairContract || !library || !deadline) throw new Error('missing dependencies')\n//     const liquidityAmount = parsedAmount\n//     if (!liquidityAmount) throw new Error('missing liquidity amount')\n\n//     if (isArgentWallet) {\n//       return approveCallback()\n//     }\n\n//     // try to gather a signature for permission\n//     const nonce = await pairContract.nonces(account)\n\n//     const EIP712Domain = [\n//       { name: 'name', type: 'string' },\n//       { name: 'version', type: 'string' },\n//       { name: 'chainId', type: 'uint256' },\n//       { name: 'verifyingContract', type: 'address' }\n//     ]\n//     const domain = {\n//       name: 'Uniswap V2',\n//       version: '1',\n//       chainId: chainId,\n//       verifyingContract: pairContract.address\n//     }\n//     const Permit = [\n//       { name: 'owner', type: 'address' },\n//       { name: 'spender', type: 'address' },\n//       { name: 'value', type: 'uint256' },\n//       { name: 'nonce', type: 'uint256' },\n//       { name: 'deadline', type: 'uint256' }\n//     ]\n//     const message = {\n//       owner: account,\n//       spender: stakingInfo.stakingRewardAddress,\n//       value: liquidityAmount.raw.toString(),\n//       nonce: nonce.toHexString(),\n//       deadline: deadline.toNumber()\n//     }\n//     const data = JSON.stringify({\n//       types: {\n//         EIP712Domain,\n//         Permit\n//       },\n//       domain,\n//       primaryType: 'Permit',\n//       message\n//     })\n\n//     library\n//       .send('eth_signTypedData_v4', [account, data])\n//       .then(splitSignature)\n//       .then(signature => {\n//         setSignatureData({\n//           v: signature.v,\n//           r: signature.r,\n//           s: signature.s,\n//           deadline: deadline.toNumber()\n//         })\n//       })\n//       .catch(error => {\n//         // for all errors other than 4001 (EIP-1193 user rejected request), fall back to manual approve\n//         if (error?.code !== 4001) {\n//           approveCallback()\n//         }\n//       })\n//   }\n\n//   return (\n//     <Modal isOpen={isOpen} onDismiss={wrappedOnDismiss} maxHeight={90}>\n//       {!attempting && !hash && (\n//         <ContentWrapper gap=\"lg\">\n//           <RowBetween>\n//             <TYPE.mediumHeader>Deposit</TYPE.mediumHeader>\n//             <CloseIcon onClick={wrappedOnDismiss} />\n//           </RowBetween>\n//           <CurrencyInputPanel\n//             value={typedValue}\n//             onUserInput={onUserInput}\n//             onMax={handleMax}\n//             showMaxButton={!atMaxAmount}\n//             currency={stakingInfo.stakedAmount.token}\n//             pair={dummyPair}\n//             label={''}\n//             disableCurrencySelect={true}\n//             customBalanceText={'Available to deposit: '}\n//             id=\"stake-liquidity-token\"\n//           />\n\n//           <HypotheticalRewardRate dim={!hypotheticalRewardRate.greaterThan('0')}>\n//             <div>\n//               <TYPE.black fontWeight={600}>Weekly Rewards</TYPE.black>\n//             </div>\n\n//             <TYPE.black>\n//               {hypotheticalRewardRate.multiply((60 * 60 * 24 * 7).toString()).toSignificant(4, { groupSeparator: ',' })}{' '}\n//               POGO / week\n//             </TYPE.black>\n//           </HypotheticalRewardRate>\n\n//           <RowBetween>\n//             <ButtonConfirmed\n//               mr=\"0.5rem\"\n//               onClick={onAttemptToApprove}\n//               confirmed={approval === ApprovalState.APPROVED || signatureData !== null}\n//               disabled={approval !== ApprovalState.NOT_APPROVED || signatureData !== null}\n//             >\n//               Approve\n//             </ButtonConfirmed>\n//             <ButtonError\n//               disabled={!!error || (signatureData === null && approval !== ApprovalState.APPROVED)}\n//               error={!!error && !!parsedAmount}\n//               onClick={onStake}\n//             >\n//               {error ?? 'Deposit'}\n//             </ButtonError>\n//           </RowBetween>\n//           <ProgressCircles steps={[approval === ApprovalState.APPROVED || signatureData !== null]} disabled={true} />\n//         </ContentWrapper>\n//       )}\n//       {attempting && !hash && (\n//         <LoadingView onDismiss={wrappedOnDismiss}>\n//           <AutoColumn gap=\"12px\" justify={'center'}>\n//             <TYPE.largeHeader>Depositing Liquidity</TYPE.largeHeader>\n//             <TYPE.body fontSize={20}>{parsedAmount?.toSignificant(4)} UNI-V2</TYPE.body>\n//           </AutoColumn>\n//         </LoadingView>\n//       )}\n//       {attempting && hash && (\n//         <SubmittedView onDismiss={wrappedOnDismiss} hash={hash}>\n//           <AutoColumn gap=\"12px\" justify={'center'}>\n//             <TYPE.largeHeader>Transaction Submitted</TYPE.largeHeader>\n//             <TYPE.body fontSize={20}>Deposited {parsedAmount?.toSignificant(4)} UNI-V2</TYPE.body>\n//           </AutoColumn>\n//         </SubmittedView>\n//       )}\n//     </Modal>\n//   )\n// }\n"]},"metadata":{},"sourceType":"module"}