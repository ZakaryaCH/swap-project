{"ast":null,"code":"var _jsxFileName = \"/Users/chichke/Documents/Work/Freelance/swap-project/src/pages/AddLiquidity/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { ETHER } from \"@uniswap/sdk\";\nimport React, { useCallback, useContext, useState } from \"react\";\nimport { Plus } from \"react-feather\";\nimport ReactGA from \"react-ga\";\nimport { Text } from \"rebass\";\nimport { ThemeContext } from \"styled-components\";\nimport { BlueCard, LightCard } from \"../../components/Card\";\nimport { AutoColumn, ColumnCenter } from \"../../components/Column\";\nimport TransactionConfirmationModal, { ConfirmationModalContent } from \"../../components/TransactionConfirmationModal\";\nimport CurrencyInputPanel from \"../../components/CurrencyInputPanel\";\nimport DoubleCurrencyLogo from \"../../components/DoubleLogo\";\nimport { AddRemoveTabs } from \"../../components/NavigationTabs\";\nimport Row, { RowBetween, RowFlat } from \"../../components/Row\";\nimport { ROUTER_ADDRESS } from \"../../constants\";\nimport { PairState } from \"../../data/Reserves\";\nimport { useActiveWeb3React } from \"../../hooks\";\nimport { useCurrency } from \"../../hooks/Tokens\";\nimport { useApproveCallback } from \"../../hooks/useApproveCallback\";\nimport useTransactionDeadline from \"../../hooks/useTransactionDeadline\";\nimport { useWalletModalToggle } from \"../../state/application/hooks\";\nimport { Field } from \"../../state/mint/actions\";\nimport { useDerivedMintInfo, useMintActionHandlers, useMintState } from \"../../state/mint/hooks\";\nimport { useTransactionAdder } from \"../../state/transactions/hooks\";\nimport { useIsExpertMode, useUserSlippageTolerance } from \"../../state/user/hooks\";\nimport { TYPE } from \"../../theme\";\nimport { calculateGasMargin, calculateSlippageAmount, getRouterContract } from \"../../utils\";\nimport { maxAmountSpend } from \"../../utils/maxAmountSpend\"; // import { wrappedCurrency } from \"../../utils/wrappedCurrency\";\n\nimport AppBody from \"../AppBody\";\nimport { Wrapper } from \"../Pool/styleds\";\nimport { ConfirmAddModalBottom } from \"./ConfirmAddModalBottom\";\nimport { currencyId } from \"../../utils/currencyId\";\nimport { PoolPriceBar } from \"./PoolPriceBar\"; // import { useIsTransactionUnsupported } from \"hooks/Trades\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AddLiquidity({\n  match: {\n    params: {\n      currencyIdA,\n      currencyIdB\n    }\n  },\n  history\n}) {\n  _s();\n\n  var _parsedAmounts$depend, _parsedAmounts$depend2, _parsedAmounts$Field$3, _currencies$Field$CUR9, _parsedAmounts$Field$4, _currencies$Field$CUR10;\n\n  const {\n    account,\n    chainId,\n    library\n  } = useActiveWeb3React();\n  const theme = useContext(ThemeContext);\n  const currencyA = useCurrency(currencyIdA);\n  const currencyB = useCurrency(currencyIdB); // const oneCurrencyIsWETH = Boolean(\n  //   chainId &&\n  //     ((currencyA && currencyEquals(currencyA, WETH[chainId])) ||\n  //       (currencyB && currencyEquals(currencyB, WETH[chainId])))\n  // )\n\n  const toggleWalletModal = useWalletModalToggle(); // toggle wallet when disconnected\n\n  const expertMode = useIsExpertMode(); // mint state\n\n  const {\n    independentField,\n    typedValue,\n    otherTypedValue\n  } = useMintState();\n  const {\n    dependentField,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error\n  } = useDerivedMintInfo(currencyA !== null && currencyA !== void 0 ? currencyA : undefined, currencyB !== null && currencyB !== void 0 ? currencyB : undefined);\n  const {\n    onFieldAInput,\n    onFieldBInput\n  } = useMintActionHandlers(noLiquidity);\n  const isValid = !error; // modal and loading\n\n  const [showConfirm, setShowConfirm] = useState(false);\n  const [attemptingTxn, setAttemptingTxn] = useState(false); // clicked confirm\n  // txn values\n\n  const deadline = useTransactionDeadline(); // custom from users settings\n\n  const [allowedSlippage] = useUserSlippageTolerance(); // custom from users\n\n  const [txHash, setTxHash] = useState(\"\"); // get formatted amounts\n\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: noLiquidity ? otherTypedValue : (_parsedAmounts$depend = (_parsedAmounts$depend2 = parsedAmounts[dependentField]) === null || _parsedAmounts$depend2 === void 0 ? void 0 : _parsedAmounts$depend2.toSignificant(6)) !== null && _parsedAmounts$depend !== void 0 ? _parsedAmounts$depend : \"\"\n  }; // get the max amounts user can add\n\n  const maxAmounts = [Field.CURRENCY_A, Field.CURRENCY_B].reduce((accumulator, field) => {\n    return { ...accumulator,\n      [field]: maxAmountSpend(currencyBalances[field])\n    };\n  }, {});\n  const atMaxAmounts = [Field.CURRENCY_A, Field.CURRENCY_B].reduce((accumulator, field) => {\n    var _maxAmounts$field, _parsedAmounts$field;\n\n    return { ...accumulator,\n      [field]: (_maxAmounts$field = maxAmounts[field]) === null || _maxAmounts$field === void 0 ? void 0 : _maxAmounts$field.equalTo((_parsedAmounts$field = parsedAmounts[field]) !== null && _parsedAmounts$field !== void 0 ? _parsedAmounts$field : \"0\")\n    };\n  }, {}); // check whether the user has approved the router on the tokens\n\n  const [approvalA, approveACallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_A], ROUTER_ADDRESS);\n  const [approvalB, approveBCallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_B], ROUTER_ADDRESS);\n  const addTransaction = useTransactionAdder();\n\n  async function onAdd() {\n    if (!chainId || !library || !account) return;\n    const router = getRouterContract(chainId, library, account);\n    const {\n      [Field.CURRENCY_A]: parsedAmountA,\n      [Field.CURRENCY_B]: parsedAmountB\n    } = parsedAmounts;\n\n    if (!parsedAmountA || !parsedAmountB || !currencyA || !currencyB || !deadline) {\n      return;\n    }\n\n    const amountsMin = {\n      [Field.CURRENCY_A]: calculateSlippageAmount(parsedAmountA, noLiquidity ? 0 : allowedSlippage)[0],\n      [Field.CURRENCY_B]: calculateSlippageAmount(parsedAmountB, noLiquidity ? 0 : allowedSlippage)[0]\n    };\n    let estimate, method, args, value;\n\n    if (currencyA === ETHER || currencyB === ETHER) {\n      var _wrappedCurrency$addr, _wrappedCurrency;\n\n      const tokenBIsETH = currencyB === ETHER;\n      estimate = router.estimateGas.addLiquidityETH;\n      method = router.addLiquidityETH;\n      args = [(_wrappedCurrency$addr = (_wrappedCurrency = wrappedCurrency(tokenBIsETH ? currencyA : currencyB, chainId)) === null || _wrappedCurrency === void 0 ? void 0 : _wrappedCurrency.address) !== null && _wrappedCurrency$addr !== void 0 ? _wrappedCurrency$addr : \"\", // token\n      (tokenBIsETH ? parsedAmountA : parsedAmountB).raw.toString(), // token desired\n      amountsMin[tokenBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(), // token min\n      amountsMin[tokenBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(), // eth min\n      account, deadline.toHexString()];\n      value = BigNumber.from((tokenBIsETH ? parsedAmountB : parsedAmountA).raw.toString());\n    } else {\n      estimate = router.estimateGas.addLiquidity;\n      method = router.addLiquidity;\n      args = [// wrappedCurrency(currencyA, chainId)?.address ?? \"\",\n      // wrappedCurrency(currencyB, chainId)?.address ?? \"\",\n      parsedAmountA.raw.toString(), parsedAmountB.raw.toString(), amountsMin[Field.CURRENCY_A].toString(), amountsMin[Field.CURRENCY_B].toString(), account, deadline.toHexString()];\n      value = null;\n    }\n\n    setAttemptingTxn(true);\n    await estimate(...args, value ? {\n      value\n    } : {}).then(estimatedGasLimit => method(...args, { ...(value ? {\n        value\n      } : {}),\n      gasLimit: calculateGasMargin(estimatedGasLimit)\n    }).then(response => {\n      var _parsedAmounts$Field$, _currencies$Field$CUR, _parsedAmounts$Field$2, _currencies$Field$CUR2, _currencies$Field$CUR3, _currencies$Field$CUR4;\n\n      setAttemptingTxn(false);\n      addTransaction(response, {\n        summary: \"Add \" + ((_parsedAmounts$Field$ = parsedAmounts[Field.CURRENCY_A]) === null || _parsedAmounts$Field$ === void 0 ? void 0 : _parsedAmounts$Field$.toSignificant(3)) + \" \" + ((_currencies$Field$CUR = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR === void 0 ? void 0 : _currencies$Field$CUR.symbol) + \" and \" + ((_parsedAmounts$Field$2 = parsedAmounts[Field.CURRENCY_B]) === null || _parsedAmounts$Field$2 === void 0 ? void 0 : _parsedAmounts$Field$2.toSignificant(3)) + \" \" + ((_currencies$Field$CUR2 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR2 === void 0 ? void 0 : _currencies$Field$CUR2.symbol)\n      });\n      setTxHash(response.hash);\n      ReactGA.event({\n        category: \"Liquidity\",\n        action: \"Add\",\n        label: [(_currencies$Field$CUR3 = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR3 === void 0 ? void 0 : _currencies$Field$CUR3.symbol, (_currencies$Field$CUR4 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR4 === void 0 ? void 0 : _currencies$Field$CUR4.symbol].join(\"/\")\n      });\n    })).catch(error => {\n      setAttemptingTxn(false); // we only care if the error is something _other_ than the user rejected the tx\n\n      if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n        console.error(error);\n      }\n    });\n  }\n\n  const modalHeader = () => {\n    var _currencies$Field$CUR5, _currencies$Field$CUR6, _currencies$Field$CUR7, _currencies$Field$CUR8;\n\n    return noLiquidity ? /*#__PURE__*/_jsxDEV(AutoColumn, {\n      gap: \"20px\",\n      children: /*#__PURE__*/_jsxDEV(LightCard, {\n        mt: \"20px\",\n        borderRadius: \"20px\",\n        children: /*#__PURE__*/_jsxDEV(RowFlat, {\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            fontSize: \"48px\",\n            fontWeight: 500,\n            lineHeight: \"42px\",\n            marginRight: 10,\n            children: ((_currencies$Field$CUR5 = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR5 === void 0 ? void 0 : _currencies$Field$CUR5.symbol) + \"/\" + ((_currencies$Field$CUR6 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR6 === void 0 ? void 0 : _currencies$Field$CUR6.symbol)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DoubleCurrencyLogo, {\n            currency0: currencies[Field.CURRENCY_A],\n            currency1: currencies[Field.CURRENCY_B],\n            size: 30\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(AutoColumn, {\n      gap: \"20px\",\n      children: [/*#__PURE__*/_jsxDEV(RowFlat, {\n        style: {\n          marginTop: \"20px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"48px\",\n          fontWeight: 500,\n          lineHeight: \"42px\",\n          marginRight: 10,\n          children: liquidityMinted === null || liquidityMinted === void 0 ? void 0 : liquidityMinted.toSignificant(6)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DoubleCurrencyLogo, {\n          currency0: currencies[Field.CURRENCY_A],\n          currency1: currencies[Field.CURRENCY_B],\n          size: 30\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"24px\",\n          children: ((_currencies$Field$CUR7 = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR7 === void 0 ? void 0 : _currencies$Field$CUR7.symbol) + \"/\" + ((_currencies$Field$CUR8 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR8 === void 0 ? void 0 : _currencies$Field$CUR8.symbol) + \" Pool Tokens\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TYPE.italic, {\n        fontSize: 12,\n        textAlign: \"left\",\n        padding: \"8px 0 0 0 \",\n        children: `Output is estimated. If the price changes by more than ${allowedSlippage / 100}% your transaction will revert.`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this);\n  };\n\n  const modalBottom = () => {\n    return /*#__PURE__*/_jsxDEV(ConfirmAddModalBottom, {\n      price: price,\n      currencies: currencies,\n      parsedAmounts: parsedAmounts,\n      noLiquidity: noLiquidity,\n      onAdd: onAdd,\n      poolTokenPercentage: poolTokenPercentage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 7\n    }, this);\n  };\n\n  const pendingText = `Supplying ${(_parsedAmounts$Field$3 = parsedAmounts[Field.CURRENCY_A]) === null || _parsedAmounts$Field$3 === void 0 ? void 0 : _parsedAmounts$Field$3.toSignificant(6)} ${(_currencies$Field$CUR9 = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR9 === void 0 ? void 0 : _currencies$Field$CUR9.symbol} and ${(_parsedAmounts$Field$4 = parsedAmounts[Field.CURRENCY_B]) === null || _parsedAmounts$Field$4 === void 0 ? void 0 : _parsedAmounts$Field$4.toSignificant(6)} ${(_currencies$Field$CUR10 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR10 === void 0 ? void 0 : _currencies$Field$CUR10.symbol}`;\n  const handleCurrencyASelect = useCallback(currencyA => {\n    const newCurrencyIdA = currencyId(currencyA);\n\n    if (newCurrencyIdA === currencyIdB) {\n      history.push(`/add/${currencyIdB}/${currencyIdA}`);\n    } else {\n      history.push(`/add/${newCurrencyIdA}/${currencyIdB}`);\n    }\n  }, [currencyIdB, history, currencyIdA]);\n  const handleCurrencyBSelect = useCallback(currencyB => {\n    const newCurrencyIdB = currencyId(currencyB);\n\n    if (currencyIdA === newCurrencyIdB) {\n      if (currencyIdB) {\n        history.push(`/add/${currencyIdB}/${newCurrencyIdB}`);\n      } else {\n        history.push(`/add/${newCurrencyIdB}`);\n      }\n    } else {\n      history.push(`/add/${currencyIdA ? currencyIdA : \"ETH\"}/${newCurrencyIdB}`);\n    }\n  }, [currencyIdA, history, currencyIdB]);\n  const handleDismissConfirmation = useCallback(() => {\n    setShowConfirm(false); // if there was a tx hash, we want to clear the input\n\n    if (txHash) {\n      onFieldAInput(\"\");\n    }\n\n    setTxHash(\"\");\n  }, [onFieldAInput, txHash]);\n  const isCreate = history.location.pathname.includes(\"/create\"); // const addIsUnsupported = useIsTransactionUnsupported(\n  //   currencies?.CURRENCY_A,\n  //   currencies?.CURRENCY_B\n  // );\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(AppBody, {\n      children: [/*#__PURE__*/_jsxDEV(AddRemoveTabs, {\n        creating: isCreate,\n        adding: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Wrapper, {\n        children: [/*#__PURE__*/_jsxDEV(TransactionConfirmationModal, {\n          isOpen: showConfirm,\n          onDismiss: handleDismissConfirmation,\n          attemptingTxn: attemptingTxn,\n          hash: txHash,\n          content: () => /*#__PURE__*/_jsxDEV(ConfirmationModalContent, {\n            title: noLiquidity ? \"You are creating a pool\" : \"You will receive\",\n            onDismiss: handleDismissConfirmation,\n            topContent: modalHeader,\n            bottomContent: modalBottom\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 15\n          }, this),\n          pendingText: pendingText,\n          currencyToAdd: pair === null || pair === void 0 ? void 0 : pair.liquidityToken\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AutoColumn, {\n          gap: \"20px\",\n          children: [noLiquidity || (isCreate ? /*#__PURE__*/_jsxDEV(ColumnCenter, {\n            children: /*#__PURE__*/_jsxDEV(BlueCard, {\n              children: /*#__PURE__*/_jsxDEV(AutoColumn, {\n                gap: \"10px\",\n                children: [/*#__PURE__*/_jsxDEV(TYPE.link, {\n                  fontWeight: 600,\n                  color: \"primaryText1\",\n                  children: \"You are the first liquidity provider.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 425,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TYPE.link, {\n                  fontWeight: 400,\n                  color: \"primaryText1\",\n                  children: \"The ratio of tokens you add will set the price of this pool.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 428,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TYPE.link, {\n                  fontWeight: 400,\n                  color: \"primaryText1\",\n                  children: \"Once you are happy with the rate click supply to review.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 432,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 424,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(ColumnCenter, {\n            children: /*#__PURE__*/_jsxDEV(BlueCard, {\n              children: /*#__PURE__*/_jsxDEV(AutoColumn, {\n                gap: \"10px\",\n                children: /*#__PURE__*/_jsxDEV(TYPE.link, {\n                  fontWeight: 400,\n                  color: \"primaryText1\",\n                  children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                    children: \"Tip:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 443,\n                    columnNumber: 25\n                  }, this), \" When you add liquidity, you will receive pool tokens representing your position. These tokens automatically earn fees proportional to your share of the pool, and can be redeemed at any time.\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 442,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 441,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 440,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(CurrencyInputPanel, {\n            value: formattedAmounts[Field.CURRENCY_A],\n            onUserInput: onFieldAInput,\n            onMax: () => {\n              var _maxAmounts$Field$CUR, _maxAmounts$Field$CUR2;\n\n              onFieldAInput((_maxAmounts$Field$CUR = (_maxAmounts$Field$CUR2 = maxAmounts[Field.CURRENCY_A]) === null || _maxAmounts$Field$CUR2 === void 0 ? void 0 : _maxAmounts$Field$CUR2.toExact()) !== null && _maxAmounts$Field$CUR !== void 0 ? _maxAmounts$Field$CUR : \"\");\n            },\n            onCurrencySelect: handleCurrencyASelect,\n            showMaxButton: !atMaxAmounts[Field.CURRENCY_A],\n            currency: currencies[Field.CURRENCY_A],\n            id: \"add-liquidity-input-tokena\",\n            showCommonBases: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ColumnCenter, {\n            children: /*#__PURE__*/_jsxDEV(Plus, {\n              size: \"16\",\n              color: theme.text2\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 465,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CurrencyInputPanel, {\n            value: formattedAmounts[Field.CURRENCY_B],\n            onUserInput: onFieldBInput,\n            onCurrencySelect: handleCurrencyBSelect // onMax={() => {\n            //   onFieldBInput(maxAmounts[Field.CURRENCY_B]?.toExact() ?? \"\");\n            // }}\n            ,\n            showMaxButton: !atMaxAmounts[Field.CURRENCY_B],\n            currency: currencies[Field.CURRENCY_B],\n            id: \"add-liquidity-input-tokenb\",\n            showCommonBases: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 13\n          }, this), currencies[Field.CURRENCY_A] && currencies[Field.CURRENCY_B] && pairState !== PairState.INVALID && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(LightCard, {\n              padding: \"0px\",\n              borderRadius: \"20px\",\n              children: [/*#__PURE__*/_jsxDEV(RowBetween, {\n                padding: \"1rem\",\n                children: /*#__PURE__*/_jsxDEV(TYPE.subHeader, {\n                  fontWeight: 500,\n                  fontSize: 14,\n                  children: [noLiquidity ? \"Initial prices\" : \"Prices\", \" and pool share\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 485,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 484,\n                columnNumber: 21\n              }, this), \" \", /*#__PURE__*/_jsxDEV(LightCard, {\n                padding: \"1rem\",\n                borderRadius: \"20px\",\n                children: /*#__PURE__*/_jsxDEV(PoolPriceBar, {\n                  currencies: currencies,\n                  poolTokenPercentage: poolTokenPercentage,\n                  noLiquidity: noLiquidity,\n                  price: price\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 491,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 490,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 483,\n              columnNumber: 19\n            }, this)\n          }, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(AddLiquidity, \"Bl2lOS3uf/AJWUOcU+ZPDnJY+m4=\", false, function () {\n  return [useActiveWeb3React, useCurrency, useCurrency, useWalletModalToggle, useIsExpertMode, useMintState, useDerivedMintInfo, useMintActionHandlers, useTransactionDeadline, useUserSlippageTolerance, useApproveCallback, useApproveCallback, useTransactionAdder];\n});\n\n_c = AddLiquidity;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddLiquidity\");","map":{"version":3,"sources":["/Users/chichke/Documents/Work/Freelance/swap-project/src/pages/AddLiquidity/index.tsx"],"names":["BigNumber","ETHER","React","useCallback","useContext","useState","Plus","ReactGA","Text","ThemeContext","BlueCard","LightCard","AutoColumn","ColumnCenter","TransactionConfirmationModal","ConfirmationModalContent","CurrencyInputPanel","DoubleCurrencyLogo","AddRemoveTabs","Row","RowBetween","RowFlat","ROUTER_ADDRESS","PairState","useActiveWeb3React","useCurrency","useApproveCallback","useTransactionDeadline","useWalletModalToggle","Field","useDerivedMintInfo","useMintActionHandlers","useMintState","useTransactionAdder","useIsExpertMode","useUserSlippageTolerance","TYPE","calculateGasMargin","calculateSlippageAmount","getRouterContract","maxAmountSpend","AppBody","Wrapper","ConfirmAddModalBottom","currencyId","PoolPriceBar","AddLiquidity","match","params","currencyIdA","currencyIdB","history","account","chainId","library","theme","currencyA","currencyB","toggleWalletModal","expertMode","independentField","typedValue","otherTypedValue","dependentField","currencies","pair","pairState","currencyBalances","parsedAmounts","price","noLiquidity","liquidityMinted","poolTokenPercentage","error","undefined","onFieldAInput","onFieldBInput","isValid","showConfirm","setShowConfirm","attemptingTxn","setAttemptingTxn","deadline","allowedSlippage","txHash","setTxHash","formattedAmounts","toSignificant","maxAmounts","CURRENCY_A","CURRENCY_B","reduce","accumulator","field","atMaxAmounts","equalTo","approvalA","approveACallback","approvalB","approveBCallback","addTransaction","onAdd","router","parsedAmountA","parsedAmountB","amountsMin","estimate","method","args","value","tokenBIsETH","estimateGas","addLiquidityETH","wrappedCurrency","address","raw","toString","toHexString","from","addLiquidity","then","estimatedGasLimit","gasLimit","response","summary","symbol","hash","event","category","action","label","join","catch","code","console","modalHeader","marginTop","modalBottom","pendingText","handleCurrencyASelect","newCurrencyIdA","push","handleCurrencyBSelect","newCurrencyIdB","handleDismissConfirmation","isCreate","location","pathname","includes","liquidityToken","toExact","text2","INVALID"],"mappings":"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","sourcesContent":["import { BigNumber } from \"@ethersproject/bignumber\";\nimport { TransactionResponse } from \"@ethersproject/providers\";\nimport {\n  Currency,\n  currencyEquals,\n  ETHER,\n  TokenAmount,\n  WETH,\n} from \"@uniswap/sdk\";\nimport React, { useCallback, useContext, useState } from \"react\";\nimport { Plus } from \"react-feather\";\nimport ReactGA from \"react-ga\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Text } from \"rebass\";\nimport { ThemeContext } from \"styled-components\";\nimport {\n  ButtonError,\n  ButtonLight,\n  ButtonPrimary,\n} from \"../../components/Button\";\nimport { BlueCard, LightCard } from \"../../components/Card\";\nimport { AutoColumn, ColumnCenter } from \"../../components/Column\";\nimport TransactionConfirmationModal, {\n  ConfirmationModalContent,\n} from \"../../components/TransactionConfirmationModal\";\nimport CurrencyInputPanel from \"../../components/CurrencyInputPanel\";\nimport DoubleCurrencyLogo from \"../../components/DoubleLogo\";\nimport { AddRemoveTabs } from \"../../components/NavigationTabs\";\nimport { MinimalPositionCard } from \"../../components/PositionCard\";\nimport Row, { RowBetween, RowFlat } from \"../../components/Row\";\n\nimport { ROUTER_ADDRESS } from \"../../constants\";\nimport { PairState } from \"../../data/Reserves\";\nimport { useActiveWeb3React } from \"../../hooks\";\nimport { useCurrency } from \"../../hooks/Tokens\";\nimport {\n  ApprovalState,\n  useApproveCallback,\n} from \"../../hooks/useApproveCallback\";\nimport useTransactionDeadline from \"../../hooks/useTransactionDeadline\";\nimport { useWalletModalToggle } from \"../../state/application/hooks\";\nimport { Field } from \"../../state/mint/actions\";\nimport {\n  useDerivedMintInfo,\n  useMintActionHandlers,\n  useMintState,\n} from \"../../state/mint/hooks\";\n\nimport { useTransactionAdder } from \"../../state/transactions/hooks\";\nimport {\n  useIsExpertMode,\n  useUserSlippageTolerance,\n} from \"../../state/user/hooks\";\nimport { TYPE } from \"../../theme\";\nimport {\n  calculateGasMargin,\n  calculateSlippageAmount,\n  getRouterContract,\n} from \"../../utils\";\nimport { maxAmountSpend } from \"../../utils/maxAmountSpend\";\n// import { wrappedCurrency } from \"../../utils/wrappedCurrency\";\nimport AppBody from \"../AppBody\";\nimport { Dots, Wrapper } from \"../Pool/styleds\";\nimport { ConfirmAddModalBottom } from \"./ConfirmAddModalBottom\";\nimport { currencyId } from \"../../utils/currencyId\";\nimport { PoolPriceBar } from \"./PoolPriceBar\";\n// import { useIsTransactionUnsupported } from \"hooks/Trades\";\nimport UnsupportedCurrencyFooter from \"components/swap/UnsupportedCurrencyFooter\";\n\nexport default function AddLiquidity({\n  match: {\n    params: { currencyIdA, currencyIdB },\n  },\n  history,\n}: RouteComponentProps<{ currencyIdA?: string; currencyIdB?: string }>) {\n  const { account, chainId, library } = useActiveWeb3React();\n  const theme = useContext(ThemeContext);\n\n  const currencyA = useCurrency(currencyIdA);\n  const currencyB = useCurrency(currencyIdB);\n\n  // const oneCurrencyIsWETH = Boolean(\n  //   chainId &&\n  //     ((currencyA && currencyEquals(currencyA, WETH[chainId])) ||\n  //       (currencyB && currencyEquals(currencyB, WETH[chainId])))\n  // )\n\n  const toggleWalletModal = useWalletModalToggle(); // toggle wallet when disconnected\n\n  const expertMode = useIsExpertMode();\n\n  // mint state\n  const { independentField, typedValue, otherTypedValue } = useMintState();\n  const {\n    dependentField,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error,\n  } = useDerivedMintInfo(currencyA ?? undefined, currencyB ?? undefined);\n\n  const { onFieldAInput, onFieldBInput } = useMintActionHandlers(noLiquidity);\n\n  const isValid = !error;\n\n  // modal and loading\n  const [showConfirm, setShowConfirm] = useState<boolean>(false);\n  const [attemptingTxn, setAttemptingTxn] = useState<boolean>(false); // clicked confirm\n\n  // txn values\n  const deadline = useTransactionDeadline(); // custom from users settings\n  const [allowedSlippage] = useUserSlippageTolerance(); // custom from users\n  const [txHash, setTxHash] = useState<string>(\"\");\n\n  // get formatted amounts\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: noLiquidity\n      ? otherTypedValue\n      : parsedAmounts[dependentField]?.toSignificant(6) ?? \"\",\n  };\n\n  // get the max amounts user can add\n  const maxAmounts: { [field in Field]?: TokenAmount } = [\n    Field.CURRENCY_A,\n    Field.CURRENCY_B,\n  ].reduce((accumulator, field) => {\n    return {\n      ...accumulator,\n      [field]: maxAmountSpend(currencyBalances[field]),\n    };\n  }, {});\n\n  const atMaxAmounts: { [field in Field]?: TokenAmount } = [\n    Field.CURRENCY_A,\n    Field.CURRENCY_B,\n  ].reduce((accumulator, field) => {\n    return {\n      ...accumulator,\n      [field]: maxAmounts[field]?.equalTo(parsedAmounts[field] ?? \"0\"),\n    };\n  }, {});\n\n  // check whether the user has approved the router on the tokens\n  const [approvalA, approveACallback] = useApproveCallback(\n    parsedAmounts[Field.CURRENCY_A],\n    ROUTER_ADDRESS\n  );\n  const [approvalB, approveBCallback] = useApproveCallback(\n    parsedAmounts[Field.CURRENCY_B],\n    ROUTER_ADDRESS\n  );\n\n  const addTransaction = useTransactionAdder();\n\n  async function onAdd() {\n    if (!chainId || !library || !account) return;\n    const router = getRouterContract(chainId, library, account);\n\n    const {\n      [Field.CURRENCY_A]: parsedAmountA,\n      [Field.CURRENCY_B]: parsedAmountB,\n    } = parsedAmounts;\n    if (\n      !parsedAmountA ||\n      !parsedAmountB ||\n      !currencyA ||\n      !currencyB ||\n      !deadline\n    ) {\n      return;\n    }\n\n    const amountsMin = {\n      [Field.CURRENCY_A]: calculateSlippageAmount(\n        parsedAmountA,\n        noLiquidity ? 0 : allowedSlippage\n      )[0],\n      [Field.CURRENCY_B]: calculateSlippageAmount(\n        parsedAmountB,\n        noLiquidity ? 0 : allowedSlippage\n      )[0],\n    };\n\n    let estimate,\n      method: (...args: any) => Promise<TransactionResponse>,\n      args: Array<string | string[] | number>,\n      value: BigNumber | null;\n    if (currencyA === ETHER || currencyB === ETHER) {\n      const tokenBIsETH = currencyB === ETHER;\n      estimate = router.estimateGas.addLiquidityETH;\n      method = router.addLiquidityETH;\n      args = [\n        wrappedCurrency(tokenBIsETH ? currencyA : currencyB, chainId)\n          ?.address ?? \"\", // token\n        (tokenBIsETH ? parsedAmountA : parsedAmountB).raw.toString(), // token desired\n        amountsMin[\n          tokenBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B\n        ].toString(), // token min\n        amountsMin[\n          tokenBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A\n        ].toString(), // eth min\n        account,\n        deadline.toHexString(),\n      ];\n      value = BigNumber.from(\n        (tokenBIsETH ? parsedAmountB : parsedAmountA).raw.toString()\n      );\n    } else {\n      estimate = router.estimateGas.addLiquidity;\n      method = router.addLiquidity;\n      args = [\n        // wrappedCurrency(currencyA, chainId)?.address ?? \"\",\n        // wrappedCurrency(currencyB, chainId)?.address ?? \"\",\n        parsedAmountA.raw.toString(),\n        parsedAmountB.raw.toString(),\n        amountsMin[Field.CURRENCY_A].toString(),\n        amountsMin[Field.CURRENCY_B].toString(),\n        account,\n        deadline.toHexString(),\n      ];\n      value = null;\n    }\n\n    setAttemptingTxn(true);\n    await estimate(...args, value ? { value } : {})\n      .then((estimatedGasLimit) =>\n        method(...args, {\n          ...(value ? { value } : {}),\n          gasLimit: calculateGasMargin(estimatedGasLimit),\n        }).then((response) => {\n          setAttemptingTxn(false);\n\n          addTransaction(response, {\n            summary:\n              \"Add \" +\n              parsedAmounts[Field.CURRENCY_A]?.toSignificant(3) +\n              \" \" +\n              currencies[Field.CURRENCY_A]?.symbol +\n              \" and \" +\n              parsedAmounts[Field.CURRENCY_B]?.toSignificant(3) +\n              \" \" +\n              currencies[Field.CURRENCY_B]?.symbol,\n          });\n\n          setTxHash(response.hash);\n\n          ReactGA.event({\n            category: \"Liquidity\",\n            action: \"Add\",\n            label: [\n              currencies[Field.CURRENCY_A]?.symbol,\n              currencies[Field.CURRENCY_B]?.symbol,\n            ].join(\"/\"),\n          });\n        })\n      )\n      .catch((error) => {\n        setAttemptingTxn(false);\n        // we only care if the error is something _other_ than the user rejected the tx\n        if (error?.code !== 4001) {\n          console.error(error);\n        }\n      });\n  }\n\n  const modalHeader = () => {\n    return noLiquidity ? (\n      <AutoColumn gap=\"20px\">\n        <LightCard mt=\"20px\" borderRadius=\"20px\">\n          <RowFlat>\n            <Text\n              fontSize=\"48px\"\n              fontWeight={500}\n              lineHeight=\"42px\"\n              marginRight={10}\n            >\n              {currencies[Field.CURRENCY_A]?.symbol +\n                \"/\" +\n                currencies[Field.CURRENCY_B]?.symbol}\n            </Text>\n            <DoubleCurrencyLogo\n              currency0={currencies[Field.CURRENCY_A]}\n              currency1={currencies[Field.CURRENCY_B]}\n              size={30}\n            />\n          </RowFlat>\n        </LightCard>\n      </AutoColumn>\n    ) : (\n      <AutoColumn gap=\"20px\">\n        <RowFlat style={{ marginTop: \"20px\" }}>\n          <Text\n            fontSize=\"48px\"\n            fontWeight={500}\n            lineHeight=\"42px\"\n            marginRight={10}\n          >\n            {liquidityMinted?.toSignificant(6)}\n          </Text>\n          <DoubleCurrencyLogo\n            currency0={currencies[Field.CURRENCY_A]}\n            currency1={currencies[Field.CURRENCY_B]}\n            size={30}\n          />\n        </RowFlat>\n        <Row>\n          <Text fontSize=\"24px\">\n            {currencies[Field.CURRENCY_A]?.symbol +\n              \"/\" +\n              currencies[Field.CURRENCY_B]?.symbol +\n              \" Pool Tokens\"}\n          </Text>\n        </Row>\n        <TYPE.italic fontSize={12} textAlign=\"left\" padding={\"8px 0 0 0 \"}>\n          {`Output is estimated. If the price changes by more than ${\n            allowedSlippage / 100\n          }% your transaction will revert.`}\n        </TYPE.italic>\n      </AutoColumn>\n    );\n  };\n\n  const modalBottom = () => {\n    return (\n      <ConfirmAddModalBottom\n        price={price}\n        currencies={currencies}\n        parsedAmounts={parsedAmounts}\n        noLiquidity={noLiquidity}\n        onAdd={onAdd}\n        poolTokenPercentage={poolTokenPercentage}\n      />\n    );\n  };\n\n  const pendingText = `Supplying ${parsedAmounts[\n    Field.CURRENCY_A\n  ]?.toSignificant(6)} ${\n    currencies[Field.CURRENCY_A]?.symbol\n  } and ${parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)} ${\n    currencies[Field.CURRENCY_B]?.symbol\n  }`;\n\n  const handleCurrencyASelect = useCallback(\n    (currencyA: Currency) => {\n      const newCurrencyIdA = currencyId(currencyA);\n      if (newCurrencyIdA === currencyIdB) {\n        history.push(`/add/${currencyIdB}/${currencyIdA}`);\n      } else {\n        history.push(`/add/${newCurrencyIdA}/${currencyIdB}`);\n      }\n    },\n    [currencyIdB, history, currencyIdA]\n  );\n  const handleCurrencyBSelect = useCallback(\n    (currencyB: Currency) => {\n      const newCurrencyIdB = currencyId(currencyB);\n      if (currencyIdA === newCurrencyIdB) {\n        if (currencyIdB) {\n          history.push(`/add/${currencyIdB}/${newCurrencyIdB}`);\n        } else {\n          history.push(`/add/${newCurrencyIdB}`);\n        }\n      } else {\n        history.push(\n          `/add/${currencyIdA ? currencyIdA : \"ETH\"}/${newCurrencyIdB}`\n        );\n      }\n    },\n    [currencyIdA, history, currencyIdB]\n  );\n\n  const handleDismissConfirmation = useCallback(() => {\n    setShowConfirm(false);\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onFieldAInput(\"\");\n    }\n    setTxHash(\"\");\n  }, [onFieldAInput, txHash]);\n\n  const isCreate = history.location.pathname.includes(\"/create\");\n\n  // const addIsUnsupported = useIsTransactionUnsupported(\n  //   currencies?.CURRENCY_A,\n  //   currencies?.CURRENCY_B\n  // );\n\n  return (\n    <>\n      <AppBody>\n        <AddRemoveTabs creating={isCreate} adding={true} />\n        <Wrapper>\n          <TransactionConfirmationModal\n            isOpen={showConfirm}\n            onDismiss={handleDismissConfirmation}\n            attemptingTxn={attemptingTxn}\n            hash={txHash}\n            content={() => (\n              <ConfirmationModalContent\n                title={\n                  noLiquidity ? \"You are creating a pool\" : \"You will receive\"\n                }\n                onDismiss={handleDismissConfirmation}\n                topContent={modalHeader}\n                bottomContent={modalBottom}\n              />\n            )}\n            pendingText={pendingText}\n            currencyToAdd={pair?.liquidityToken}\n          />\n          <AutoColumn gap=\"20px\">\n            {noLiquidity ||\n              (isCreate ? (\n                <ColumnCenter>\n                  <BlueCard>\n                    <AutoColumn gap=\"10px\">\n                      <TYPE.link fontWeight={600} color={\"primaryText1\"}>\n                        You are the first liquidity provider.\n                      </TYPE.link>\n                      <TYPE.link fontWeight={400} color={\"primaryText1\"}>\n                        The ratio of tokens you add will set the price of this\n                        pool.\n                      </TYPE.link>\n                      <TYPE.link fontWeight={400} color={\"primaryText1\"}>\n                        Once you are happy with the rate click supply to review.\n                      </TYPE.link>\n                    </AutoColumn>\n                  </BlueCard>\n                </ColumnCenter>\n              ) : (\n                <ColumnCenter>\n                  <BlueCard>\n                    <AutoColumn gap=\"10px\">\n                      <TYPE.link fontWeight={400} color={\"primaryText1\"}>\n                        <b>Tip:</b> When you add liquidity, you will receive\n                        pool tokens representing your position. These tokens\n                        automatically earn fees proportional to your share of\n                        the pool, and can be redeemed at any time.\n                      </TYPE.link>\n                    </AutoColumn>\n                  </BlueCard>\n                </ColumnCenter>\n              ))}\n            <CurrencyInputPanel\n              value={formattedAmounts[Field.CURRENCY_A]}\n              onUserInput={onFieldAInput}\n              onMax={() => {\n                onFieldAInput(maxAmounts[Field.CURRENCY_A]?.toExact() ?? \"\");\n              }}\n              onCurrencySelect={handleCurrencyASelect}\n              showMaxButton={!atMaxAmounts[Field.CURRENCY_A]}\n              currency={currencies[Field.CURRENCY_A]}\n              id=\"add-liquidity-input-tokena\"\n              showCommonBases\n            />\n            <ColumnCenter>\n              <Plus size=\"16\" color={theme.text2} />\n            </ColumnCenter>\n            <CurrencyInputPanel\n              value={formattedAmounts[Field.CURRENCY_B]}\n              onUserInput={onFieldBInput}\n              onCurrencySelect={handleCurrencyBSelect}\n              // onMax={() => {\n              //   onFieldBInput(maxAmounts[Field.CURRENCY_B]?.toExact() ?? \"\");\n              // }}\n              showMaxButton={!atMaxAmounts[Field.CURRENCY_B]}\n              currency={currencies[Field.CURRENCY_B]}\n              id=\"add-liquidity-input-tokenb\"\n              showCommonBases\n            />\n            {currencies[Field.CURRENCY_A] &&\n              currencies[Field.CURRENCY_B] &&\n              pairState !== PairState.INVALID && (\n                <>\n                  <LightCard padding=\"0px\" borderRadius={\"20px\"}>\n                    <RowBetween padding=\"1rem\">\n                      <TYPE.subHeader fontWeight={500} fontSize={14}>\n                        {noLiquidity ? \"Initial prices\" : \"Prices\"} and pool\n                        share\n                      </TYPE.subHeader>\n                    </RowBetween>{\" \"}\n                    <LightCard padding=\"1rem\" borderRadius={\"20px\"}>\n                      <PoolPriceBar\n                        currencies={currencies}\n                        poolTokenPercentage={poolTokenPercentage}\n                        noLiquidity={noLiquidity}\n                        price={price}\n                      />\n                    </LightCard>\n                  </LightCard>\n                </>\n              )}\n\n            {/* {addIsUnsupported ? (\n              <ButtonPrimary disabled={true}>\n                <TYPE.main mb=\"4px\">Unsupported Asset</TYPE.main>\n              </ButtonPrimary>\n            ) : !account ? (\n              <ButtonLight onClick={toggleWalletModal}>\n                Connect Wallet\n              </ButtonLight>\n            ) : (\n              <AutoColumn gap={\"md\"}>\n                {(approvalA === ApprovalState.NOT_APPROVED ||\n                  approvalA === ApprovalState.PENDING ||\n                  approvalB === ApprovalState.NOT_APPROVED ||\n                  approvalB === ApprovalState.PENDING) &&\n                  isValid && (\n                    <RowBetween>\n                      {approvalA !== ApprovalState.APPROVED && (\n                        <ButtonPrimary\n                          onClick={approveACallback}\n                          disabled={approvalA === ApprovalState.PENDING}\n                          width={\n                            approvalB !== ApprovalState.APPROVED\n                              ? \"48%\"\n                              : \"100%\"\n                          }\n                        >\n                          {approvalA === ApprovalState.PENDING ? (\n                            <Dots>\n                              Approving {currencies[Field.CURRENCY_A]?.symbol}\n                            </Dots>\n                          ) : (\n                            \"Approve \" + currencies[Field.CURRENCY_A]?.symbol\n                          )}\n                        </ButtonPrimary>\n                      )}\n                      {approvalB !== ApprovalState.APPROVED && (\n                        <ButtonPrimary\n                          onClick={approveBCallback}\n                          disabled={approvalB === ApprovalState.PENDING}\n                          width={\n                            approvalA !== ApprovalState.APPROVED\n                              ? \"48%\"\n                              : \"100%\"\n                          }\n                        >\n                          {approvalB === ApprovalState.PENDING ? (\n                            <Dots>\n                              Approving {currencies[Field.CURRENCY_B]?.symbol}\n                            </Dots>\n                          ) : (\n                            \"Approve \" + currencies[Field.CURRENCY_B]?.symbol\n                          )}\n                        </ButtonPrimary>\n                      )}\n                    </RowBetween>\n                  )}\n                <ButtonError\n                  onClick={() => {\n                    expertMode ? onAdd() : setShowConfirm(true);\n                  }}\n                  disabled={\n                    !isValid ||\n                    approvalA !== ApprovalState.APPROVED ||\n                    approvalB !== ApprovalState.APPROVED\n                  }\n                  error={\n                    !isValid &&\n                    !!parsedAmounts[Field.CURRENCY_A] &&\n                    !!parsedAmounts[Field.CURRENCY_B]\n                  }\n                >\n                  <Text fontSize={20} fontWeight={500}>\n                    {error ?? \"Supply\"}\n                  </Text>\n                </ButtonError>\n              </AutoColumn>\n            )} */}\n          </AutoColumn>\n        </Wrapper>\n      </AppBody>\n      {/* {!addIsUnsupported ? (\n        pair && !noLiquidity && pairState !== PairState.INVALID ? (\n          <AutoColumn\n            style={{\n              minWidth: \"20rem\",\n              width: \"100%\",\n              maxWidth: \"400px\",\n              marginTop: \"1rem\",\n            }}\n          >\n            <MinimalPositionCard showUnwrapped={oneCurrencyIsWETH} pair={pair} />\n          </AutoColumn>\n        ) : null\n      ) : (\n        <UnsupportedCurrencyFooter\n          show={addIsUnsupported}\n          currencies={[currencies.CURRENCY_A, currencies.CURRENCY_B]}\n        />\n      )} */}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}