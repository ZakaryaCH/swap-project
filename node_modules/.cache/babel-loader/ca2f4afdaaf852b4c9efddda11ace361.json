{"ast":null,"code":"import { FortmaticConnector as FortmaticConnectorCore } from \"@web3-react/fortmatic-connector\";\nimport Fortmatic from \"fortmatic\";\nimport { ChainId, RpcUrl } from \"types\";\nexport const OVERLAY_READY = \"OVERLAY_READY\";\nconst MAINNET = {\n  /* Smart Chain mainnet RPC URL */\n  rpcUrl: RpcUrl.MAINNET,\n  chainId: ChainId.MAINNET // Smart Chain mainnet chain id\n\n};\nconst TESTNET = {\n  /* Smart Chain mainnet RPC URL */\n  rpcUrl: RpcUrl.TESTNET,\n  chainId: ChainId.TESTNET // Smart Chain mainnet chain id\n\n};\nexport class FortmaticConnector extends FortmaticConnectorCore {\n  async activate() {\n    if (!this.fortmatic) {\n      const {\n        apiKey\n      } = this;\n      this.fortmatic = new Fortmatic(apiKey, MAINNET);\n    }\n\n    const provider = this.fortmatic.getProvider();\n    const pollForOverlayReady = new Promise(resolve => {\n      const interval = setInterval(() => {\n        if (provider.overlayReady) {\n          clearInterval(interval);\n          this.emit(OVERLAY_READY);\n          resolve();\n        }\n      }, 200);\n    });\n    const [account] = await Promise.all([provider.enable().then(accounts => accounts[0]), pollForOverlayReady]);\n    return {\n      provider: this.fortmatic.getProvider(),\n      chainId: this.chainId,\n      account\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/chichke/Documents/Work/Freelance/swap-project/src/connectors/Fortmatic.ts"],"names":["FortmaticConnector","FortmaticConnectorCore","Fortmatic","ChainId","RpcUrl","OVERLAY_READY","MAINNET","rpcUrl","chainId","TESTNET","activate","fortmatic","apiKey","provider","getProvider","pollForOverlayReady","Promise","resolve","interval","setInterval","overlayReady","clearInterval","emit","account","all","enable","then","accounts"],"mappings":"AAAA,SAASA,kBAAkB,IAAIC,sBAA/B,QAA6D,iCAA7D;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,SAASC,OAAT,EAAkBC,MAAlB,QAAgC,OAAhC;AACA,OAAO,MAAMC,aAAa,GAAG,eAAtB;AAOP,MAAMC,OAAO,GAAG;AACd;AACAC,EAAAA,MAAM,EAAEH,MAAM,CAACE,OAFD;AAGdE,EAAAA,OAAO,EAAEL,OAAO,CAACG,OAHH,CAGY;;AAHZ,CAAhB;AAMA,MAAMG,OAAO,GAAG;AACd;AACAF,EAAAA,MAAM,EAAEH,MAAM,CAACK,OAFD;AAGdD,EAAAA,OAAO,EAAEL,OAAO,CAACM,OAHH,CAGY;;AAHZ,CAAhB;AAMA,OAAO,MAAMT,kBAAN,SAAiCC,sBAAjC,CAAwD;AAC/C,QAARS,QAAQ,GAAG;AACf,QAAI,CAAC,KAAKC,SAAV,EAAqB;AACnB,YAAM;AAAEC,QAAAA;AAAF,UAAa,IAAnB;AACA,WAAKD,SAAL,GAAiB,IAAIT,SAAJ,CAAcU,MAAd,EAAsBN,OAAtB,CAAjB;AACD;;AAED,UAAMO,QAAQ,GAAG,KAAKF,SAAL,CAAeG,WAAf,EAAjB;AAEA,UAAMC,mBAAmB,GAAG,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACnD,YAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjC,YAAIN,QAAQ,CAACO,YAAb,EAA2B;AACzBC,UAAAA,aAAa,CAACH,QAAD,CAAb;AACA,eAAKI,IAAL,CAAUjB,aAAV;AACAY,UAAAA,OAAO;AACR;AACF,OAN2B,EAMzB,GANyB,CAA5B;AAOD,KAR2B,CAA5B;AAUA,UAAM,CAACM,OAAD,IAAY,MAAMP,OAAO,CAACQ,GAAR,CAAY,CAClCX,QAAQ,CAACY,MAAT,GAAkBC,IAAlB,CAAwBC,QAAD,IAAwBA,QAAQ,CAAC,CAAD,CAAvD,CADkC,EAElCZ,mBAFkC,CAAZ,CAAxB;AAKA,WAAO;AACLF,MAAAA,QAAQ,EAAE,KAAKF,SAAL,CAAeG,WAAf,EADL;AAELN,MAAAA,OAAO,EAAG,IAAD,CAAcA,OAFlB;AAGLe,MAAAA;AAHK,KAAP;AAKD;;AA7B4D","sourcesContent":["import { FortmaticConnector as FortmaticConnectorCore } from \"@web3-react/fortmatic-connector\";\nimport Fortmatic from \"fortmatic\";\nimport { ChainId, RpcUrl } from \"types\";\nexport const OVERLAY_READY = \"OVERLAY_READY\";\n\ntype FormaticSupportedChains = Extract<\n  ChainId,\n  ChainId.MAINNET | ChainId.TESTNET\n>;\n\nconst MAINNET = {\n  /* Smart Chain mainnet RPC URL */\n  rpcUrl: RpcUrl.MAINNET,\n  chainId: ChainId.MAINNET, // Smart Chain mainnet chain id\n};\n\nconst TESTNET = {\n  /* Smart Chain mainnet RPC URL */\n  rpcUrl: RpcUrl.TESTNET,\n  chainId: ChainId.TESTNET, // Smart Chain mainnet chain id\n};\n\nexport class FortmaticConnector extends FortmaticConnectorCore {\n  async activate() {\n    if (!this.fortmatic) {\n      const { apiKey } = this as any;\n      this.fortmatic = new Fortmatic(apiKey, MAINNET);\n    }\n\n    const provider = this.fortmatic.getProvider();\n\n    const pollForOverlayReady = new Promise((resolve) => {\n      const interval = setInterval(() => {\n        if (provider.overlayReady) {\n          clearInterval(interval);\n          this.emit(OVERLAY_READY);\n          resolve();\n        }\n      }, 200);\n    });\n\n    const [account] = await Promise.all([\n      provider.enable().then((accounts: string[]) => accounts[0]),\n      pollForOverlayReady,\n    ]);\n\n    return {\n      provider: this.fortmatic.getProvider(),\n      chainId: (this as any).chainId,\n      account,\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}