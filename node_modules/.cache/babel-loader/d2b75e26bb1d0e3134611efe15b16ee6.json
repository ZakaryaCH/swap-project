{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { fetchTokenList } from \"../state/lists/actions\";\nimport getTokenList from \"../utils/getTokenList\";\nexport const useFetchListCallback = () => {\n  _s();\n\n  const dispatch = useDispatch(); // note: prevent dispatch if using for list search or unsupported list\n\n  return useCallback(async (sendDispatch = true) => {\n    const requestId = nanoid();\n    sendDispatch && dispatch(fetchTokenList.pending({\n      requestId\n    }));\n    return getTokenList().then(({\n      data\n    }) => {\n      sendDispatch && dispatch(fetchTokenList.fulfilled({\n        tokenList,\n        requestId\n      }));\n      return tokenList;\n    }).catch(error => {\n      console.debug(`Failed to get 1inch token list`, error);\n      sendDispatch && dispatch(fetchTokenList.rejected({\n        requestId,\n        errorMessage: error.message\n      }));\n      throw error;\n    });\n  }, [dispatch]);\n};\n\n_s(useFetchListCallback, \"nhyv+fhSuBJ7yx/uYuCmtG3KTzU=\", false, function () {\n  return [useDispatch];\n});","map":{"version":3,"sources":["/Users/chichke/Documents/Work/Freelance/swap-project/src/hooks/useFetchListCallback.ts"],"names":["nanoid","useCallback","useDispatch","fetchTokenList","getTokenList","useFetchListCallback","dispatch","sendDispatch","requestId","pending","then","data","fulfilled","tokenList","catch","error","console","debug","rejected","errorMessage","message"],"mappings":";;AAAA,SAASA,MAAT,QAAuB,kBAAvB;AAGA,SAASC,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,aAA5B;AAGA,SAASC,cAAT,QAA+B,wBAA/B;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AAIA,OAAO,MAAMC,oBAAoB,GAAG,MAAM;AAAA;;AACxC,QAAMC,QAAQ,GAAGJ,WAAW,EAA5B,CADwC,CAGxC;;AACA,SAAOD,WAAW,CAChB,OAAOM,YAAY,GAAG,IAAtB,KAA+B;AAC7B,UAAMC,SAAS,GAAGR,MAAM,EAAxB;AACAO,IAAAA,YAAY,IAAID,QAAQ,CAACH,cAAc,CAACM,OAAf,CAAuB;AAAED,MAAAA;AAAF,KAAvB,CAAD,CAAxB;AACA,WAAOJ,YAAY,GAChBM,IADI,CACC,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAyB;AAC7BJ,MAAAA,YAAY,IACVD,QAAQ,CAACH,cAAc,CAACS,SAAf,CAAyB;AAAEC,QAAAA,SAAF;AAAaL,QAAAA;AAAb,OAAzB,CAAD,CADV;AAEA,aAAOK,SAAP;AACD,KALI,EAMJC,KANI,CAMGC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACC,KAAR,CAAe,gCAAf,EAAgDF,KAAhD;AACAR,MAAAA,YAAY,IACVD,QAAQ,CACNH,cAAc,CAACe,QAAf,CAAwB;AACtBV,QAAAA,SADsB;AAEtBW,QAAAA,YAAY,EAAEJ,KAAK,CAACK;AAFE,OAAxB,CADM,CADV;AAOA,YAAML,KAAN;AACD,KAhBI,CAAP;AAiBD,GArBe,EAsBhB,CAACT,QAAD,CAtBgB,CAAlB;AAwBD,CA5BM;;GAAMD,oB;UACMH,W","sourcesContent":["import { nanoid } from \"@reduxjs/toolkit\";\nimport { ChainId } from \"@uniswap/sdk\";\nimport { TokenList } from \"../types\";\nimport { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getNetworkLibrary } from \"../connectors\";\nimport { AppDispatch } from \"../state\";\nimport { fetchTokenList } from \"../state/lists/actions\";\nimport getTokenList from \"../utils/getTokenList\";\nimport resolveENSContentHash from \"../utils/resolveENSContentHash\";\nimport { useActiveWeb3React } from \"./index\";\n\nexport const useFetchListCallback = () => {\n  const dispatch = useDispatch<AppDispatch>();\n\n  // note: prevent dispatch if using for list search or unsupported list\n  return useCallback(\n    async (sendDispatch = true) => {\n      const requestId = nanoid();\n      sendDispatch && dispatch(fetchTokenList.pending({ requestId }));\n      return getTokenList()\n        .then(({ data }: TokenList) => {\n          sendDispatch &&\n            dispatch(fetchTokenList.fulfilled({ tokenList, requestId }));\n          return tokenList;\n        })\n        .catch((error) => {\n          console.debug(`Failed to get 1inch token list`, error);\n          sendDispatch &&\n            dispatch(\n              fetchTokenList.rejected({\n                requestId,\n                errorMessage: error.message,\n              })\n            );\n          throw error;\n        });\n    },\n    [dispatch]\n  );\n};\n"]},"metadata":{},"sourceType":"module"}