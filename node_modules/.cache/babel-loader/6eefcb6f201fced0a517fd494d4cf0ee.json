{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport { TokenAmount, JSBI } from \"@uniswap/sdk\";\nimport { useEffect, useState } from \"react\";\nimport { useActiveWeb3React } from \"../../hooks\";\nimport { useMerkleDistributorContract } from \"../../hooks/useContract\";\nimport { useSingleCallResult } from \"../multicall/hooks\";\nimport { calculateGasMargin, isAddress } from \"../../utils\";\nimport { useTransactionAdder } from \"../transactions/hooks\";\nconst CLAIM_PROMISES = {}; // returns the claim for the given address, or null if not valid\n\nfunction fetchClaim(account, chainId) {\n  var _CLAIM_PROMISES$key;\n\n  const formatted = isAddress(account);\n  if (!formatted) return Promise.reject(new Error(\"Invalid address\"));\n  const key = `${chainId}:${account}`;\n  return CLAIM_PROMISES[key] = (_CLAIM_PROMISES$key = CLAIM_PROMISES[key]) !== null && _CLAIM_PROMISES$key !== void 0 ? _CLAIM_PROMISES$key : fetch(`https://gentle-frost-9e74.uniswap.workers.dev/${chainId}/${formatted}`).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    } else {\n      console.debug(`No claim for account ${formatted} on chain ID ${chainId}`);\n      return null;\n    }\n  }).catch(error => {\n    console.error(\"Failed to get claim data\", error);\n  });\n} // parse distributorContract blob and detect if user has claim data\n// null means we know it does not\n\n\nexport function useUserClaimData(account) {\n  _s();\n\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const key = `${chainId}:${account}`;\n  const [claimInfo, setClaimInfo] = useState({});\n  useEffect(() => {\n    if (!account || !chainId) return;\n    fetchClaim(account, chainId).then(accountClaimInfo => setClaimInfo(claimInfo => {\n      return { ...claimInfo,\n        [key]: accountClaimInfo\n      };\n    }));\n  }, [account, chainId, key]);\n  return account && chainId ? claimInfo[key] : undefined;\n} // check if user is in blob and has not yet claimed UNI\n\n_s(useUserClaimData, \"ZX4eTAhUHUi04tqS27JWqTvc7R4=\", false, function () {\n  return [useActiveWeb3React];\n});\n\nexport function useUserHasAvailableClaim(account) {\n  _s2();\n\n  var _isClaimedResult$resu;\n\n  const userClaimData = useUserClaimData(account);\n  const distributorContract = useMerkleDistributorContract();\n  const isClaimedResult = useSingleCallResult(distributorContract, \"isClaimed\", [userClaimData === null || userClaimData === void 0 ? void 0 : userClaimData.index]); // user is in blob and contract marks as unclaimed\n\n  return Boolean(userClaimData && !isClaimedResult.loading && ((_isClaimedResult$resu = isClaimedResult.result) === null || _isClaimedResult$resu === void 0 ? void 0 : _isClaimedResult$resu[0]) === false);\n}\n\n_s2(useUserHasAvailableClaim, \"S6ll+G1SAwuSUg0umNHnklxJjYY=\", false, function () {\n  return [useUserClaimData, useMerkleDistributorContract, useSingleCallResult];\n});\n\nexport function useUserUnclaimedAmount(account) {\n  _s3();\n\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const userClaimData = useUserClaimData(account);\n  const canClaim = useUserHasAvailableClaim(account);\n  const uni = chainId ? UNI[chainId] : undefined;\n  if (!uni) return undefined;\n\n  if (!canClaim || !userClaimData) {\n    return new TokenAmount(uni, JSBI.BigInt(0));\n  }\n\n  return new TokenAmount(uni, JSBI.BigInt(userClaimData.amount));\n}\n\n_s3(useUserUnclaimedAmount, \"8sqZlBntnabsh5dclQgWJpMmIBY=\", false, function () {\n  return [useActiveWeb3React, useUserClaimData, useUserHasAvailableClaim];\n});\n\nexport function useClaimCallback(account) {\n  _s4();\n\n  // get claim data for this account\n  const {\n    library,\n    chainId\n  } = useActiveWeb3React();\n  const claimData = useUserClaimData(account); // used for popup summary\n\n  const unClaimedAmount = useUserUnclaimedAmount(account);\n  const addTransaction = useTransactionAdder();\n  const distributorContract = useMerkleDistributorContract();\n\n  const claimCallback = async function () {\n    if (!claimData || !account || !library || !chainId || !distributorContract) return;\n    const args = [claimData.index, account, claimData.amount, claimData.proof];\n    return distributorContract.estimateGas[\"claim\"](...args, {}).then(estimatedGasLimit => {\n      return distributorContract.claim(...args, {\n        value: null,\n        gasLimit: calculateGasMargin(estimatedGasLimit)\n      }).then(response => {\n        addTransaction(response, {\n          summary: `Claimed ${unClaimedAmount === null || unClaimedAmount === void 0 ? void 0 : unClaimedAmount.toSignificant(4)} UNI`,\n          claim: {\n            recipient: account\n          }\n        });\n        return response.hash;\n      });\n    });\n  };\n\n  return {\n    claimCallback\n  };\n}\n\n_s4(useClaimCallback, \"tvhHHfl5kSzWtsFxwST2ACsWYL4=\", false, function () {\n  return [useActiveWeb3React, useUserClaimData, useUserUnclaimedAmount, useTransactionAdder, useMerkleDistributorContract];\n});","map":{"version":3,"sources":["/Users/chichke/Documents/Work/Freelance/swap-project/src/state/claim/hooks.ts"],"names":["TokenAmount","JSBI","useEffect","useState","useActiveWeb3React","useMerkleDistributorContract","useSingleCallResult","calculateGasMargin","isAddress","useTransactionAdder","CLAIM_PROMISES","fetchClaim","account","chainId","formatted","Promise","reject","Error","key","fetch","then","res","status","json","console","debug","catch","error","useUserClaimData","claimInfo","setClaimInfo","accountClaimInfo","undefined","useUserHasAvailableClaim","userClaimData","distributorContract","isClaimedResult","index","Boolean","loading","result","useUserUnclaimedAmount","canClaim","uni","UNI","BigInt","amount","useClaimCallback","library","claimData","unClaimedAmount","addTransaction","claimCallback","args","proof","estimateGas","estimatedGasLimit","claim","value","gasLimit","response","summary","toSignificant","recipient","hash"],"mappings":"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","sourcesContent":["import { TokenAmount, JSBI, ChainId } from \"@uniswap/sdk\";\nimport { TransactionResponse } from \"@ethersproject/providers\";\nimport { useEffect, useState } from \"react\";\nimport { useActiveWeb3React } from \"../../hooks\";\nimport { useMerkleDistributorContract } from \"../../hooks/useContract\";\nimport { useSingleCallResult } from \"../multicall/hooks\";\nimport { calculateGasMargin, isAddress } from \"../../utils\";\nimport { useTransactionAdder } from \"../transactions/hooks\";\n\ninterface UserClaimData {\n  index: number;\n  amount: string;\n  proof: string[];\n  flags?: {\n    isSOCKS: boolean;\n    isLP: boolean;\n    isUser: boolean;\n  };\n}\n\nconst CLAIM_PROMISES: { [key: string]: Promise<UserClaimData | null> } = {};\n\n// returns the claim for the given address, or null if not valid\nfunction fetchClaim(\n  account: string,\n  chainId: ChainId\n): Promise<UserClaimData | null> {\n  const formatted = isAddress(account);\n  if (!formatted) return Promise.reject(new Error(\"Invalid address\"));\n  const key = `${chainId}:${account}`;\n\n  return (CLAIM_PROMISES[key] =\n    CLAIM_PROMISES[key] ??\n    fetch(\n      `https://gentle-frost-9e74.uniswap.workers.dev/${chainId}/${formatted}`\n    )\n      .then((res) => {\n        if (res.status === 200) {\n          return res.json();\n        } else {\n          console.debug(\n            `No claim for account ${formatted} on chain ID ${chainId}`\n          );\n          return null;\n        }\n      })\n      .catch((error) => {\n        console.error(\"Failed to get claim data\", error);\n      }));\n}\n\n// parse distributorContract blob and detect if user has claim data\n// null means we know it does not\nexport function useUserClaimData(\n  account: string | null | undefined\n): UserClaimData | null | undefined {\n  const { chainId } = useActiveWeb3React();\n\n  const key = `${chainId}:${account}`;\n  const [claimInfo, setClaimInfo] = useState<{\n    [key: string]: UserClaimData | null;\n  }>({});\n\n  useEffect(() => {\n    if (!account || !chainId) return;\n    fetchClaim(account, chainId).then((accountClaimInfo) =>\n      setClaimInfo((claimInfo) => {\n        return {\n          ...claimInfo,\n          [key]: accountClaimInfo,\n        };\n      })\n    );\n  }, [account, chainId, key]);\n\n  return account && chainId ? claimInfo[key] : undefined;\n}\n\n// check if user is in blob and has not yet claimed UNI\nexport function useUserHasAvailableClaim(\n  account: string | null | undefined\n): boolean {\n  const userClaimData = useUserClaimData(account);\n  const distributorContract = useMerkleDistributorContract();\n  const isClaimedResult = useSingleCallResult(\n    distributorContract,\n    \"isClaimed\",\n    [userClaimData?.index]\n  );\n  // user is in blob and contract marks as unclaimed\n  return Boolean(\n    userClaimData &&\n      !isClaimedResult.loading &&\n      isClaimedResult.result?.[0] === false\n  );\n}\n\nexport function useUserUnclaimedAmount(\n  account: string | null | undefined\n): TokenAmount | undefined {\n  const { chainId } = useActiveWeb3React();\n  const userClaimData = useUserClaimData(account);\n  const canClaim = useUserHasAvailableClaim(account);\n\n  const uni = chainId ? UNI[chainId] : undefined;\n  if (!uni) return undefined;\n  if (!canClaim || !userClaimData) {\n    return new TokenAmount(uni, JSBI.BigInt(0));\n  }\n  return new TokenAmount(uni, JSBI.BigInt(userClaimData.amount));\n}\n\nexport function useClaimCallback(account: string | null | undefined): {\n  claimCallback: () => Promise<string>;\n} {\n  // get claim data for this account\n  const { library, chainId } = useActiveWeb3React();\n  const claimData = useUserClaimData(account);\n\n  // used for popup summary\n  const unClaimedAmount: TokenAmount | undefined =\n    useUserUnclaimedAmount(account);\n  const addTransaction = useTransactionAdder();\n  const distributorContract = useMerkleDistributorContract();\n\n  const claimCallback = async function () {\n    if (!claimData || !account || !library || !chainId || !distributorContract)\n      return;\n\n    const args = [claimData.index, account, claimData.amount, claimData.proof];\n\n    return distributorContract.estimateGas[\"claim\"](...args, {}).then(\n      (estimatedGasLimit) => {\n        return distributorContract\n          .claim(...args, {\n            value: null,\n            gasLimit: calculateGasMargin(estimatedGasLimit),\n          })\n          .then((response: TransactionResponse) => {\n            addTransaction(response, {\n              summary: `Claimed ${unClaimedAmount?.toSignificant(4)} UNI`,\n              claim: { recipient: account },\n            });\n            return response.hash;\n          });\n      }\n    );\n  };\n\n  return { claimCallback };\n}\n"]},"metadata":{},"sourceType":"module"}