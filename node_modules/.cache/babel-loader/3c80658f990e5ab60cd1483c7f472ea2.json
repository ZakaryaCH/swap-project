{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { fetchTokenList } from \"../state/lists/actions\";\nimport getTokenList from \"../utils/getTokenList\";\nexport function useFetchListCallback() {\n  _s();\n\n  const dispatch = useDispatch(); // note: prevent dispatch if using for list search or unsupported list\n\n  return useCallback(async (listUrl, sendDispatch = true) => {\n    const requestId = nanoid();\n    sendDispatch && dispatch(fetchTokenList.pending({\n      requestId,\n      url: listUrl\n    }));\n    return getTokenList().then(tokenList => {\n      sendDispatch && dispatch(fetchTokenList.fulfilled({\n        url: listUrl,\n        tokenList,\n        requestId\n      }));\n      return tokenList;\n    }).catch(error => {\n      console.debug(`Failed to get list at url ${listUrl}`, error);\n      sendDispatch && dispatch(fetchTokenList.rejected({\n        url: listUrl,\n        requestId,\n        errorMessage: error.message\n      }));\n      throw error;\n    });\n  }, [dispatch]);\n}\n\n_s(useFetchListCallback, \"nhyv+fhSuBJ7yx/uYuCmtG3KTzU=\", false, function () {\n  return [useDispatch];\n});","map":{"version":3,"sources":["/Users/chichke/Documents/Work/Freelance/swap-project/src/hooks/useFetchListCallback.ts"],"names":["nanoid","useCallback","useDispatch","fetchTokenList","getTokenList","useFetchListCallback","dispatch","listUrl","sendDispatch","requestId","pending","url","then","tokenList","fulfilled","catch","error","console","debug","rejected","errorMessage","message"],"mappings":";;AAAA,SAASA,MAAT,QAAuB,kBAAvB;AAGA,SAASC,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,aAA5B;AAGA,SAASC,cAAT,QAA+B,wBAA/B;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AAIA,OAAO,SAASC,oBAAT,GAGiB;AAAA;;AACtB,QAAMC,QAAQ,GAAGJ,WAAW,EAA5B,CADsB,CAGtB;;AACA,SAAOD,WAAW,CAChB,OAAOM,OAAP,EAAwBC,YAAY,GAAG,IAAvC,KAAgD;AAC9C,UAAMC,SAAS,GAAGT,MAAM,EAAxB;AACAQ,IAAAA,YAAY,IACVF,QAAQ,CAACH,cAAc,CAACO,OAAf,CAAuB;AAAED,MAAAA,SAAF;AAAaE,MAAAA,GAAG,EAAEJ;AAAlB,KAAvB,CAAD,CADV;AAEA,WAAOH,YAAY,GAChBQ,IADI,CACEC,SAAD,IAAe;AACnBL,MAAAA,YAAY,IACVF,QAAQ,CACNH,cAAc,CAACW,SAAf,CAAyB;AAAEH,QAAAA,GAAG,EAAEJ,OAAP;AAAgBM,QAAAA,SAAhB;AAA2BJ,QAAAA;AAA3B,OAAzB,CADM,CADV;AAIA,aAAOI,SAAP;AACD,KAPI,EAQJE,KARI,CAQGC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACC,KAAR,CAAe,6BAA4BX,OAAQ,EAAnD,EAAsDS,KAAtD;AACAR,MAAAA,YAAY,IACVF,QAAQ,CACNH,cAAc,CAACgB,QAAf,CAAwB;AACtBR,QAAAA,GAAG,EAAEJ,OADiB;AAEtBE,QAAAA,SAFsB;AAGtBW,QAAAA,YAAY,EAAEJ,KAAK,CAACK;AAHE,OAAxB,CADM,CADV;AAQA,YAAML,KAAN;AACD,KAnBI,CAAP;AAoBD,GAzBe,EA0BhB,CAACV,QAAD,CA1BgB,CAAlB;AA4BD;;GAnCeD,oB;UAIGH,W","sourcesContent":["import { nanoid } from \"@reduxjs/toolkit\";\nimport { ChainId } from \"@uniswap/sdk\";\nimport { TokenList } from \"@uniswap/token-lists\";\nimport { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getNetworkLibrary } from \"../connectors\";\nimport { AppDispatch } from \"../state\";\nimport { fetchTokenList } from \"../state/lists/actions\";\nimport getTokenList from \"../utils/getTokenList\";\nimport resolveENSContentHash from \"../utils/resolveENSContentHash\";\nimport { useActiveWeb3React } from \"./index\";\n\nexport function useFetchListCallback(): (\n  listUrl: string,\n  sendDispatch?: boolean\n) => Promise<TokenList> {\n  const dispatch = useDispatch<AppDispatch>();\n\n  // note: prevent dispatch if using for list search or unsupported list\n  return useCallback(\n    async (listUrl: string, sendDispatch = true) => {\n      const requestId = nanoid();\n      sendDispatch &&\n        dispatch(fetchTokenList.pending({ requestId, url: listUrl }));\n      return getTokenList()\n        .then((tokenList) => {\n          sendDispatch &&\n            dispatch(\n              fetchTokenList.fulfilled({ url: listUrl, tokenList, requestId })\n            );\n          return tokenList;\n        })\n        .catch((error) => {\n          console.debug(`Failed to get list at url ${listUrl}`, error);\n          sendDispatch &&\n            dispatch(\n              fetchTokenList.rejected({\n                url: listUrl,\n                requestId,\n                errorMessage: error.message,\n              })\n            );\n          throw error;\n        });\n    },\n    [dispatch]\n  );\n}\n"]},"metadata":{},"sourceType":"module"}