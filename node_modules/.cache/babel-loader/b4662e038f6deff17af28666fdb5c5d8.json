{"ast":null,"code":"var _jsxFileName = \"/Users/chichke/Documents/Work/Freelance/swap-project/src/components/ProgressSteps/index.tsx\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { RowBetween } from '../Row';\nimport { AutoColumn } from '../Column';\nimport { transparentize } from 'polished';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled(AutoColumn)``;\n_c = Wrapper;\nconst Grouping = styled(RowBetween)`\n  width: 50%;\n`;\n_c2 = Grouping;\nconst Circle = styled.div`\n  min-width: 20px;\n  min-height: 20px;\n  background-color: ${({\n  theme,\n  confirmed,\n  disabled\n}) => disabled ? theme.bg4 : confirmed ? theme.green1 : theme.primary1};\n  border-radius: 50%;\n  color: ${({\n  theme\n}) => theme.white};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  line-height: 8px;\n  font-size: 12px;\n`;\n_c3 = Circle;\nconst CircleRow = styled.div`\n  width: calc(100% - 20px);\n  display: flex;\n  align-items: center;\n`;\n_c4 = CircleRow;\nconst Connector = styled.div`\n  width: 100%;\n  height: 2px;\n  background-color: ;\n  background: linear-gradient(\n    90deg,\n    ${({\n  theme,\n  prevConfirmed,\n  disabled\n}) => disabled ? theme.bg4 : transparentize(0.5, prevConfirmed ? theme.green1 : theme.primary1)}\n      0%,\n    ${({\n  theme,\n  prevConfirmed,\n  disabled\n}) => disabled ? theme.bg4 : prevConfirmed ? theme.primary1 : theme.bg4} 80%\n  );\n  opacity: 0.6;\n`;\n_c5 = Connector;\n\n/**\n * Based on array of steps, create a step counter of circles.\n * A circle can be enabled, disabled, or confirmed. States are derived\n * from previous step.\n *\n * An extra circle is added to represent the ability to swap, add, or remove.\n * This step will never be marked as complete (because no 'txn done' state in body ui).\n *\n * @param steps  array of booleans where true means step is complete\n */\nexport default function ProgressCircles({\n  steps,\n  disabled = false,\n  ...rest\n}) {\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    justify: 'center',\n    ...rest,\n    children: /*#__PURE__*/_jsxDEV(Grouping, {\n      children: [steps.map((step, i) => {\n        return /*#__PURE__*/_jsxDEV(CircleRow, {\n          children: [/*#__PURE__*/_jsxDEV(Circle, {\n            confirmed: step,\n            disabled: disabled || !steps[i - 1] && i !== 0,\n            children: step ? '✓' : i + 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Connector, {\n            prevConfirmed: step,\n            disabled: disabled\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(Circle, {\n        disabled: disabled || !steps[steps.length - 1],\n        children: steps.length + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_c6 = ProgressCircles;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"Grouping\");\n$RefreshReg$(_c3, \"Circle\");\n$RefreshReg$(_c4, \"CircleRow\");\n$RefreshReg$(_c5, \"Connector\");\n$RefreshReg$(_c6, \"ProgressCircles\");","map":{"version":3,"sources":["/Users/chichke/Documents/Work/Freelance/swap-project/src/components/ProgressSteps/index.tsx"],"names":["React","styled","RowBetween","AutoColumn","transparentize","Wrapper","Grouping","Circle","div","theme","confirmed","disabled","bg4","green1","primary1","white","CircleRow","Connector","prevConfirmed","ProgressCircles","steps","rest","map","step","i","length"],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { RowBetween } from '../Row'\nimport { AutoColumn } from '../Column'\nimport { transparentize } from 'polished'\n\nconst Wrapper = styled(AutoColumn)``\n\nconst Grouping = styled(RowBetween)`\n  width: 50%;\n`\n\nconst Circle = styled.div<{ confirmed?: boolean; disabled?: boolean }>`\n  min-width: 20px;\n  min-height: 20px;\n  background-color: ${({ theme, confirmed, disabled }) =>\n    disabled ? theme.bg4 : confirmed ? theme.green1 : theme.primary1};\n  border-radius: 50%;\n  color: ${({ theme }) => theme.white};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  line-height: 8px;\n  font-size: 12px;\n`\n\nconst CircleRow = styled.div`\n  width: calc(100% - 20px);\n  display: flex;\n  align-items: center;\n`\n\nconst Connector = styled.div<{ prevConfirmed?: boolean; disabled?: boolean }>`\n  width: 100%;\n  height: 2px;\n  background-color: ;\n  background: linear-gradient(\n    90deg,\n    ${({ theme, prevConfirmed, disabled }) =>\n        disabled ? theme.bg4 : transparentize(0.5, prevConfirmed ? theme.green1 : theme.primary1)}\n      0%,\n    ${({ theme, prevConfirmed, disabled }) => (disabled ? theme.bg4 : prevConfirmed ? theme.primary1 : theme.bg4)} 80%\n  );\n  opacity: 0.6;\n`\n\ninterface ProgressCirclesProps {\n  steps: boolean[]\n  disabled?: boolean\n}\n\n/**\n * Based on array of steps, create a step counter of circles.\n * A circle can be enabled, disabled, or confirmed. States are derived\n * from previous step.\n *\n * An extra circle is added to represent the ability to swap, add, or remove.\n * This step will never be marked as complete (because no 'txn done' state in body ui).\n *\n * @param steps  array of booleans where true means step is complete\n */\nexport default function ProgressCircles({ steps, disabled = false, ...rest }: ProgressCirclesProps) {\n  return (\n    <Wrapper justify={'center'} {...rest}>\n      <Grouping>\n        {steps.map((step, i) => {\n          return (\n            <CircleRow key={i}>\n              <Circle confirmed={step} disabled={disabled || (!steps[i - 1] && i !== 0)}>\n                {step ? '✓' : i + 1}\n              </Circle>\n              <Connector prevConfirmed={step} disabled={disabled} />\n            </CircleRow>\n          )\n        })}\n        <Circle disabled={disabled || !steps[steps.length - 1]}>{steps.length + 1}</Circle>\n      </Grouping>\n    </Wrapper>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}