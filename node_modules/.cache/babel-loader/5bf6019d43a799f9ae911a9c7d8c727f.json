{"ast":null,"code":"// import { JSBI, TokenAmount } from '@uniswap/sdk'\n// import { isAddress } from 'ethers/lib/utils'\n// import React, { useEffect, useState } from 'react'\n// import { Text } from 'rebass'\n// import styled from 'styled-components'\n// import Circle from '../../assets/images/blue-loader.svg'\n// import tokenLogo from '../../assets/images/token-logo.png'\n// import { useActiveWeb3React } from '../../hooks'\n// import { ApplicationModal } from '../../state/application/actions'\n// import { useModalOpen, useToggleSelfClaimModal } from '../../state/application/hooks'\n// import { useClaimCallback, useUserClaimData, useUserUnclaimedAmount } from '../../state/claim/hooks'\n// import { useUserHasSubmittedClaim } from '../../state/transactions/hooks'\n// import { CloseIcon, CustomLightSpinner, ExternalLink, TYPE, UniTokenAnimated } from '../../theme'\n// import { getEtherscanLink } from '../../utils'\n// import { ButtonPrimary } from '../Button'\n// import { AutoColumn, ColumnCenter } from '../Column'\n// import Confetti from '../Confetti'\n// import { Break, CardBGImage, CardBGImageSmaller, CardNoise, CardSection, DataCard } from '../earn/styled'\n// import Modal from '../Modal'\n// import { RowBetween } from '../Row'\n// const ContentWrapper = styled(AutoColumn)`\n//   width: 100%;\n// `\n// const ModalUpper = styled(DataCard)`\n//   box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\n//   background: radial-gradient(76.02% 75.41% at 1.84% 0%, #ff007a 0%, #021d43 100%);\n// `\n// const ConfirmOrLoadingWrapper = styled.div<{ activeBG: boolean }>`\n//   width: 100%;\n//   padding: 24px;\n//   position: relative;\n//   background: ${({ activeBG }) =>\n//     activeBG &&\n//     'radial-gradient(76.02% 75.41% at 1.84% 0%, rgba(255, 0, 122, 0.2) 0%, rgba(33, 114, 229, 0.2) 100%), #FFFFFF;'};\n// `\n// const ConfirmedIcon = styled(ColumnCenter)`\n//   padding: 60px 0;\n// `\n// const SOCKS_AMOUNT = 1000\n// const USER_AMOUNT = 400\n// export default function ClaimModal() {\n//   const isOpen = useModalOpen(ApplicationModal.SELF_CLAIM)\n//   const toggleClaimModal = useToggleSelfClaimModal()\n//   const { account, chainId } = useActiveWeb3React()\n//   // used for UI loading states\n//   const [attempting, setAttempting] = useState<boolean>(false)\n//   // get user claim data\n//   const userClaimData = useUserClaimData(account)\n//   // monitor the status of the claim from contracts and txns\n//   const { claimCallback } = useClaimCallback(account)\n//   const unclaimedAmount: TokenAmount | undefined = useUserUnclaimedAmount(account)\n//   const { claimSubmitted, claimTxn } = useUserHasSubmittedClaim(account ?? undefined)\n//   const claimConfirmed = Boolean(claimTxn?.receipt)\n//   function onClaim() {\n//     setAttempting(true)\n//     claimCallback()\n//       // reset modal and log error\n//       .catch(error => {\n//         setAttempting(false)\n//         console.log(error)\n//       })\n//   }\n//   // once confirmed txn is found, if modal is closed open, mark as not attempting regradless\n//   useEffect(() => {\n//     if (claimConfirmed && claimSubmitted && attempting) {\n//       setAttempting(false)\n//       if (!isOpen) {\n//         toggleClaimModal()\n//       }\n//     }\n//   }, [attempting, claimConfirmed, claimSubmitted, isOpen, toggleClaimModal])\n//   const nonLPAmount = JSBI.multiply(\n//     JSBI.BigInt((userClaimData?.flags?.isSOCKS ? SOCKS_AMOUNT : 0) + (userClaimData?.flags?.isUser ? USER_AMOUNT : 0)),\n//     JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(18))\n//   )\n//   return (\n//     <Modal isOpen={isOpen} onDismiss={toggleClaimModal} maxHeight={90}>\n//       <Confetti start={Boolean(isOpen && claimConfirmed)} />\n//       {!attempting && !claimConfirmed && (\n//         <ContentWrapper gap=\"lg\">\n//           <ModalUpper>\n//             <CardBGImage />\n//             <CardNoise />\n//             <CardSection gap=\"md\">\n//               <RowBetween>\n//                 <TYPE.white fontWeight={500}>Claim POGO</TYPE.white>\n//                 <CloseIcon onClick={toggleClaimModal} style={{ zIndex: 99 }} color=\"white\" />\n//               </RowBetween>\n//               <TYPE.white fontWeight={700} fontSize={36}>\n//                 {unclaimedAmount?.toFixed(0, { groupSeparator: ',' } ?? '-')} POGO\n//               </TYPE.white>\n//             </CardSection>\n//             <Break />\n//             <CardSection gap=\"sm\">\n//               {userClaimData?.flags?.isSOCKS && (\n//                 <RowBetween>\n//                   <TYPE.subHeader color=\"white\">SOCKS</TYPE.subHeader>\n//                   <TYPE.subHeader color=\"white\">{SOCKS_AMOUNT} POGO</TYPE.subHeader>\n//                 </RowBetween>\n//               )}\n//               {userClaimData?.flags?.isLP &&\n//                 unclaimedAmount &&\n//                 JSBI.greaterThanOrEqual(unclaimedAmount.raw, nonLPAmount) && (\n//                   <RowBetween>\n//                     <TYPE.subHeader color=\"white\">Liquidity</TYPE.subHeader>\n//                     <TYPE.subHeader color=\"white\">\n//                       {unclaimedAmount\n//                         .subtract(new TokenAmount(unclaimedAmount.token, nonLPAmount))\n//                         .toFixed(0, { groupSeparator: ',' })}{' '}\n//                       POGO\n//                     </TYPE.subHeader>\n//                   </RowBetween>\n//                 )}\n//               {userClaimData?.flags?.isUser && (\n//                 <RowBetween>\n//                   <TYPE.subHeader color=\"white\">User</TYPE.subHeader>\n//                   <TYPE.subHeader color=\"white\">{USER_AMOUNT} POGO</TYPE.subHeader>\n//                 </RowBetween>\n//               )}\n//             </CardSection>\n//           </ModalUpper>\n//           <AutoColumn gap=\"md\" style={{ padding: '1rem', paddingTop: '0' }} justify=\"center\">\n//             <TYPE.subHeader fontWeight={500}>\n//               {/* As a member of the Uniswap community you may claim UNI to be used for voting and governance. <br /> <br />\n//               <ExternalLink href=\"https://uniswap.org/blog/uni\">Read more about UNI</ExternalLink> */}\n//             </TYPE.subHeader>\n//             <ButtonPrimary\n//               disabled={!isAddress(account ?? '')}\n//               padding=\"16px 16px\"\n//               width=\"100%\"\n//               borderRadius=\"12px\"\n//               mt=\"1rem\"\n//               onClick={onClaim}\n//             >\n//               Claim NXB\n//             </ButtonPrimary>\n//           </AutoColumn>\n//         </ContentWrapper>\n//       )}\n//       {(attempting || claimConfirmed) && (\n//         <ConfirmOrLoadingWrapper activeBG={true}>\n//           <CardNoise />\n//           <CardBGImageSmaller desaturate />\n//           <RowBetween>\n//             <div />\n//             <CloseIcon onClick={toggleClaimModal} style={{ zIndex: 99 }} stroke=\"black\" />\n//           </RowBetween>\n//           <ConfirmedIcon>\n//             {!claimConfirmed ? (\n//               <CustomLightSpinner src={Circle} alt=\"loader\" size={'90px'} />\n//             ) : (\n//               <UniTokenAnimated width=\"72px\" src={tokenLogo} />\n//             )}\n//           </ConfirmedIcon>\n//           <AutoColumn gap=\"100px\" justify={'center'}>\n//             <AutoColumn gap=\"12px\" justify={'center'}>\n//               <TYPE.largeHeader fontWeight={600} color=\"black\">\n//                 {claimConfirmed ? 'Claimed!' : 'Claiming'}\n//               </TYPE.largeHeader>\n//               {!claimConfirmed && (\n//                 <Text fontSize={36} color={'#ff007a'} fontWeight={800}>\n//                   {unclaimedAmount?.toFixed(0, { groupSeparator: ',' } ?? '-')} UNI\n//                 </Text>\n//               )}\n//             </AutoColumn>\n//             {claimConfirmed && (\n//               <>\n//                 <TYPE.subHeader fontWeight={500} color=\"black\">\n//                   <span role=\"img\" aria-label=\"party-hat\">\n//                     ðŸŽ‰{' '}\n//                   </span>\n//                   Welcome to team Unicorn :){' '}\n//                   <span role=\"img\" aria-label=\"party-hat\">\n//                     ðŸŽ‰\n//                   </span>\n//                 </TYPE.subHeader>\n//               </>\n//             )}\n//             {attempting && !claimSubmitted && (\n//               <TYPE.subHeader color=\"black\">Confirm this transaction in your wallet</TYPE.subHeader>\n//             )}\n//             {attempting && claimSubmitted && !claimConfirmed && chainId && claimTxn?.hash && (\n//               <ExternalLink href={getEtherscanLink(chainId, claimTxn?.hash, 'transaction')} style={{ zIndex: 99 }}>\n//                 View transaction on Etherscan\n//               </ExternalLink>\n//             )}\n//           </AutoColumn>\n//         </ConfirmOrLoadingWrapper>\n//       )}\n//     </Modal>\n//   )\n// }","map":{"version":3,"sources":["/Users/chichke/Documents/Work/Freelance/swap-project/src/components/claim/ClaimModal.tsx"],"names":[],"mappingssourcesContent":["// import { JSBI, TokenAmount } from '@uniswap/sdk'\n// import { isAddress } from 'ethers/lib/utils'\n// import React, { useEffect, useState } from 'react'\n// import { Text } from 'rebass'\n// import styled from 'styled-components'\n// import Circle from '../../assets/images/blue-loader.svg'\n// import tokenLogo from '../../assets/images/token-logo.png'\n// import { useActiveWeb3React } from '../../hooks'\n// import { ApplicationModal } from '../../state/application/actions'\n// import { useModalOpen, useToggleSelfClaimModal } from '../../state/application/hooks'\n// import { useClaimCallback, useUserClaimData, useUserUnclaimedAmount } from '../../state/claim/hooks'\n// import { useUserHasSubmittedClaim } from '../../state/transactions/hooks'\n// import { CloseIcon, CustomLightSpinner, ExternalLink, TYPE, UniTokenAnimated } from '../../theme'\n// import { getEtherscanLink } from '../../utils'\n// import { ButtonPrimary } from '../Button'\n// import { AutoColumn, ColumnCenter } from '../Column'\n// import Confetti from '../Confetti'\n// import { Break, CardBGImage, CardBGImageSmaller, CardNoise, CardSection, DataCard } from '../earn/styled'\n\n// import Modal from '../Modal'\n// import { RowBetween } from '../Row'\n\n// const ContentWrapper = styled(AutoColumn)`\n//   width: 100%;\n// `\n\n// const ModalUpper = styled(DataCard)`\n//   box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\n//   background: radial-gradient(76.02% 75.41% at 1.84% 0%, #ff007a 0%, #021d43 100%);\n// `\n\n// const ConfirmOrLoadingWrapper = styled.div<{ activeBG: boolean }>`\n//   width: 100%;\n//   padding: 24px;\n//   position: relative;\n//   background: ${({ activeBG }) =>\n//     activeBG &&\n//     'radial-gradient(76.02% 75.41% at 1.84% 0%, rgba(255, 0, 122, 0.2) 0%, rgba(33, 114, 229, 0.2) 100%), #FFFFFF;'};\n// `\n\n// const ConfirmedIcon = styled(ColumnCenter)`\n//   padding: 60px 0;\n// `\n\n// const SOCKS_AMOUNT = 1000\n// const USER_AMOUNT = 400\n\n// export default function ClaimModal() {\n//   const isOpen = useModalOpen(ApplicationModal.SELF_CLAIM)\n//   const toggleClaimModal = useToggleSelfClaimModal()\n\n//   const { account, chainId } = useActiveWeb3React()\n\n//   // used for UI loading states\n//   const [attempting, setAttempting] = useState<boolean>(false)\n\n//   // get user claim data\n//   const userClaimData = useUserClaimData(account)\n\n//   // monitor the status of the claim from contracts and txns\n//   const { claimCallback } = useClaimCallback(account)\n//   const unclaimedAmount: TokenAmount | undefined = useUserUnclaimedAmount(account)\n//   const { claimSubmitted, claimTxn } = useUserHasSubmittedClaim(account ?? undefined)\n//   const claimConfirmed = Boolean(claimTxn?.receipt)\n\n//   function onClaim() {\n//     setAttempting(true)\n//     claimCallback()\n//       // reset modal and log error\n//       .catch(error => {\n//         setAttempting(false)\n//         console.log(error)\n//       })\n//   }\n\n//   // once confirmed txn is found, if modal is closed open, mark as not attempting regradless\n//   useEffect(() => {\n//     if (claimConfirmed && claimSubmitted && attempting) {\n//       setAttempting(false)\n//       if (!isOpen) {\n//         toggleClaimModal()\n//       }\n//     }\n//   }, [attempting, claimConfirmed, claimSubmitted, isOpen, toggleClaimModal])\n\n//   const nonLPAmount = JSBI.multiply(\n//     JSBI.BigInt((userClaimData?.flags?.isSOCKS ? SOCKS_AMOUNT : 0) + (userClaimData?.flags?.isUser ? USER_AMOUNT : 0)),\n//     JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(18))\n//   )\n\n//   return (\n//     <Modal isOpen={isOpen} onDismiss={toggleClaimModal} maxHeight={90}>\n//       <Confetti start={Boolean(isOpen && claimConfirmed)} />\n//       {!attempting && !claimConfirmed && (\n//         <ContentWrapper gap=\"lg\">\n//           <ModalUpper>\n//             <CardBGImage />\n//             <CardNoise />\n//             <CardSection gap=\"md\">\n//               <RowBetween>\n//                 <TYPE.white fontWeight={500}>Claim POGO</TYPE.white>\n//                 <CloseIcon onClick={toggleClaimModal} style={{ zIndex: 99 }} color=\"white\" />\n//               </RowBetween>\n//               <TYPE.white fontWeight={700} fontSize={36}>\n//                 {unclaimedAmount?.toFixed(0, { groupSeparator: ',' } ?? '-')} POGO\n//               </TYPE.white>\n//             </CardSection>\n//             <Break />\n//             <CardSection gap=\"sm\">\n//               {userClaimData?.flags?.isSOCKS && (\n//                 <RowBetween>\n//                   <TYPE.subHeader color=\"white\">SOCKS</TYPE.subHeader>\n//                   <TYPE.subHeader color=\"white\">{SOCKS_AMOUNT} POGO</TYPE.subHeader>\n//                 </RowBetween>\n//               )}\n//               {userClaimData?.flags?.isLP &&\n//                 unclaimedAmount &&\n//                 JSBI.greaterThanOrEqual(unclaimedAmount.raw, nonLPAmount) && (\n//                   <RowBetween>\n//                     <TYPE.subHeader color=\"white\">Liquidity</TYPE.subHeader>\n//                     <TYPE.subHeader color=\"white\">\n//                       {unclaimedAmount\n//                         .subtract(new TokenAmount(unclaimedAmount.token, nonLPAmount))\n//                         .toFixed(0, { groupSeparator: ',' })}{' '}\n//                       POGO\n//                     </TYPE.subHeader>\n//                   </RowBetween>\n//                 )}\n//               {userClaimData?.flags?.isUser && (\n//                 <RowBetween>\n//                   <TYPE.subHeader color=\"white\">User</TYPE.subHeader>\n//                   <TYPE.subHeader color=\"white\">{USER_AMOUNT} POGO</TYPE.subHeader>\n//                 </RowBetween>\n//               )}\n//             </CardSection>\n//           </ModalUpper>\n//           <AutoColumn gap=\"md\" style={{ padding: '1rem', paddingTop: '0' }} justify=\"center\">\n//             <TYPE.subHeader fontWeight={500}>\n//               {/* As a member of the Uniswap community you may claim UNI to be used for voting and governance. <br /> <br />\n//               <ExternalLink href=\"https://uniswap.org/blog/uni\">Read more about UNI</ExternalLink> */}\n//             </TYPE.subHeader>\n//             <ButtonPrimary\n//               disabled={!isAddress(account ?? '')}\n//               padding=\"16px 16px\"\n//               width=\"100%\"\n//               borderRadius=\"12px\"\n//               mt=\"1rem\"\n//               onClick={onClaim}\n//             >\n//               Claim NXB\n//             </ButtonPrimary>\n//           </AutoColumn>\n//         </ContentWrapper>\n//       )}\n//       {(attempting || claimConfirmed) && (\n//         <ConfirmOrLoadingWrapper activeBG={true}>\n//           <CardNoise />\n//           <CardBGImageSmaller desaturate />\n//           <RowBetween>\n//             <div />\n//             <CloseIcon onClick={toggleClaimModal} style={{ zIndex: 99 }} stroke=\"black\" />\n//           </RowBetween>\n//           <ConfirmedIcon>\n//             {!claimConfirmed ? (\n//               <CustomLightSpinner src={Circle} alt=\"loader\" size={'90px'} />\n//             ) : (\n//               <UniTokenAnimated width=\"72px\" src={tokenLogo} />\n//             )}\n//           </ConfirmedIcon>\n//           <AutoColumn gap=\"100px\" justify={'center'}>\n//             <AutoColumn gap=\"12px\" justify={'center'}>\n//               <TYPE.largeHeader fontWeight={600} color=\"black\">\n//                 {claimConfirmed ? 'Claimed!' : 'Claiming'}\n//               </TYPE.largeHeader>\n//               {!claimConfirmed && (\n//                 <Text fontSize={36} color={'#ff007a'} fontWeight={800}>\n//                   {unclaimedAmount?.toFixed(0, { groupSeparator: ',' } ?? '-')} UNI\n//                 </Text>\n//               )}\n//             </AutoColumn>\n//             {claimConfirmed && (\n//               <>\n//                 <TYPE.subHeader fontWeight={500} color=\"black\">\n//                   <span role=\"img\" aria-label=\"party-hat\">\n//                     ðŸŽ‰{' '}\n//                   </span>\n//                   Welcome to team Unicorn :){' '}\n//                   <span role=\"img\" aria-label=\"party-hat\">\n//                     ðŸŽ‰\n//                   </span>\n//                 </TYPE.subHeader>\n//               </>\n//             )}\n//             {attempting && !claimSubmitted && (\n//               <TYPE.subHeader color=\"black\">Confirm this transaction in your wallet</TYPE.subHeader>\n//             )}\n//             {attempting && claimSubmitted && !claimConfirmed && chainId && claimTxn?.hash && (\n//               <ExternalLink href={getEtherscanLink(chainId, claimTxn?.hash, 'transaction')} style={{ zIndex: 99 }}>\n//                 View transaction on Etherscan\n//               </ExternalLink>\n//             )}\n//           </AutoColumn>\n//         </ConfirmOrLoadingWrapper>\n//       )}\n//     </Modal>\n//   )\n// }\n"]},"metadata":{},"sourceType":"module"}