{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { parseBytes32String } from \"@ethersproject/strings\";\nimport { ETHER, Token, currencyEquals } from \"@uniswap/sdk\";\nimport { useMemo } from \"react\";\nimport { NEVER_RELOAD, useSingleCallResult } from \"../state/multicall/hooks\"; // import { useUserAddedTokens } from \"../state/user/hooks\";\n\nimport { isAddress } from \"../utils\";\nimport { useActiveWeb3React } from \"./index\";\nimport { useBytes32TokenContract, useTokenContract } from \"./useContract\";\nimport { arrayify } from \"ethers/lib/utils\"; // reduce token map into standard address <-> Token mapping, optionally include user added tokens\n// function useTokensFromMap(\n//   tokenMap: TokenAddressMap,\n//   includeUserAdded: boolean\n// ): { [address: string]: Token } {\n//   const { chainId } = useActiveWeb3React();\n//   // const userAddedTokens = useUserAddedTokens();\n//   return useMemo(() => {\n//     if (!chainId) return {};\n//     // reduce to just tokens\n//     const mapWithoutUrls = Object.keys(tokenMap[chainId]).reduce<{\n//       [address: string]: Token;\n//     }>((newMap, address) => {\n//       newMap[address] = tokenMap[chainId][address].token;\n//       return newMap;\n//     }, {});\n//     if (includeUserAdded) {\n//       return (\n//         userAddedTokens\n//           // reduce into all ALL_TOKENS filtered by the current chain\n//           .reduce<{ [address: string]: Token }>(\n//             (tokenMap, token) => {\n//               tokenMap[token.address] = token;\n//               return tokenMap;\n//             },\n//             // must make a copy because reduce modifies the map, and we do not\n//             // want to make a copy in every iteration\n//             { ...mapWithoutUrls }\n//           )\n//       );\n//     }\n//     return mapWithoutUrls;\n//   }, [chainId, userAddedTokens, tokenMap, includeUserAdded]);\n// }\n\nexport function useDefaultTokens() {\n  // const defaultList = useDefaultTokenList();\n  // return useTokensFromMap(defaultList, false);\n  return null;\n}\nexport function useAllTokens() {\n  // const allTokens = useCombinedActiveList();\n  // return useTokensFromMap(allTokens, true);\n  return null;\n}\nexport function useAllInactiveTokens() {\n  // get inactive tokens\n  // const inactiveTokensMap = useCombinedInactiveList();\n  // const inactiveTokens = useTokensFromMap(inactiveTokensMap, false);\n  // // filter out any token that are on active list\n  // const activeTokensAddresses = Object.keys(useAllTokens());\n  // const filteredInactive = activeTokensAddresses\n  //   ? Object.keys(inactiveTokens).reduce<{ [address: string]: Token }>(\n  //       (newMap, address) => {\n  //         if (!activeTokensAddresses.includes(address)) {\n  //           newMap[address] = inactiveTokens[address];\n  //         }\n  //         return newMap;\n  //       },\n  //       {}\n  //     )\n  //   : inactiveTokens;\n  // return filteredInactive;\n  return null;\n}\nexport function useUnsupportedTokens() {\n  // const unsupportedTokensMap = useUnsupportedTokenList();\n  // return useTokensFromMap(unsupportedTokensMap, false);\n  return null;\n}\nexport function useIsTokenActive(token) {\n  // const activeTokens = useAllTokens();\n  // if (!activeTokens || !token) {\n  //   return false;\n  // }\n  // return !!activeTokens[token.address];\n  return null;\n} // used to detect extra search results\n\nexport function useFoundOnInactiveList(searchQuery) {\n  // const { chainId } = useActiveWeb3React();\n  // const inactiveTokens = useAllInactiveTokens();\n  // return useMemo(() => {\n  //   if (!chainId || searchQuery === \"\") {\n  //     return undefined;\n  //   } else {\n  //     const tokens = filterTokens(Object.values(inactiveTokens), searchQuery);\n  //     return tokens;\n  //   }\n  // }, [chainId, inactiveTokens, searchQuery]);\n  return null;\n} // Check if currency is included in custom list from user storage\n\nexport function useIsUserAddedToken(currency) {\n  _s();\n\n  const userAddedTokens = useUserAddedTokens();\n\n  if (!currency) {\n    return false;\n  }\n\n  return !!userAddedTokens.find(token => currencyEquals(currency, token));\n} // parse a name or symbol from a token response\n\n_s(useIsUserAddedToken, \"/J12HuilTfT8HPlUWn/aslQP0JY=\", true);\n\nconst BYTES32_REGEX = /^0x[a-fA-F0-9]{64}$/;\n\nfunction parseStringOrBytes32(str, bytes32, defaultValue) {\n  return str && str.length > 0 ? str : // need to check for proper bytes string and valid terminator\n  bytes32 && BYTES32_REGEX.test(bytes32) && arrayify(bytes32)[31] === 0 ? parseBytes32String(bytes32) : defaultValue;\n} // undefined if invalid or does not exist\n// null if loading\n// otherwise returns the token\n\n\nexport function useToken(tokenAddress) {\n  _s2();\n\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const tokens = useAllTokens();\n  const address = isAddress(tokenAddress);\n  const tokenContract = useTokenContract(address ? address : undefined, false);\n  const tokenContractBytes32 = useBytes32TokenContract(address ? address : undefined, false);\n  const token = address ? tokens[address] : undefined;\n  const tokenName = useSingleCallResult(token ? undefined : tokenContract, \"name\", undefined, NEVER_RELOAD);\n  const tokenNameBytes32 = useSingleCallResult(token ? undefined : tokenContractBytes32, \"name\", undefined, NEVER_RELOAD);\n  const symbol = useSingleCallResult(token ? undefined : tokenContract, \"symbol\", undefined, NEVER_RELOAD);\n  const symbolBytes32 = useSingleCallResult(token ? undefined : tokenContractBytes32, \"symbol\", undefined, NEVER_RELOAD);\n  const decimals = useSingleCallResult(token ? undefined : tokenContract, \"decimals\", undefined, NEVER_RELOAD);\n  return useMemo(() => {\n    if (token) return token;\n    if (!chainId || !address) return undefined;\n    if (decimals.loading || symbol.loading || tokenName.loading) return null;\n\n    if (decimals.result) {\n      var _symbol$result, _symbolBytes32$result, _tokenName$result, _tokenNameBytes32$res;\n\n      return new Token(chainId, address, decimals.result[0], parseStringOrBytes32((_symbol$result = symbol.result) === null || _symbol$result === void 0 ? void 0 : _symbol$result[0], (_symbolBytes32$result = symbolBytes32.result) === null || _symbolBytes32$result === void 0 ? void 0 : _symbolBytes32$result[0], \"UNKNOWN\"), parseStringOrBytes32((_tokenName$result = tokenName.result) === null || _tokenName$result === void 0 ? void 0 : _tokenName$result[0], (_tokenNameBytes32$res = tokenNameBytes32.result) === null || _tokenNameBytes32$res === void 0 ? void 0 : _tokenNameBytes32$res[0], \"Unknown Token\"));\n    }\n\n    return undefined;\n  }, [address, chainId, decimals.loading, decimals.result, symbol.loading, symbol.result, symbolBytes32.result, token, tokenName.loading, tokenName.result, tokenNameBytes32.result]);\n}\n\n_s2(useToken, \"eKyRyOw1MkhB0rg/op393nwat5k=\", false, function () {\n  return [useActiveWeb3React, useAllTokens, useTokenContract, useBytes32TokenContract, useSingleCallResult, useSingleCallResult, useSingleCallResult, useSingleCallResult, useSingleCallResult];\n});\n\nexport function useCurrency(currencyId) {\n  _s3();\n\n  const isETH = (currencyId === null || currencyId === void 0 ? void 0 : currencyId.toUpperCase()) === \"ETH\";\n  const token = useToken(isETH ? undefined : currencyId);\n  return isETH ? ETHER : token;\n}\n\n_s3(useCurrency, \"YdEbLWY6/B/ql2/5vHiby7UXKcg=\", false, function () {\n  return [useToken];\n});","map":{"version":3,"sources":["/Users/chichke/Documents/Work/Freelance/swap-project/src/hooks/Tokens.ts"],"names":["parseBytes32String","ETHER","Token","currencyEquals","useMemo","NEVER_RELOAD","useSingleCallResult","isAddress","useActiveWeb3React","useBytes32TokenContract","useTokenContract","arrayify","useDefaultTokens","useAllTokens","useAllInactiveTokens","useUnsupportedTokens","useIsTokenActive","token","useFoundOnInactiveList","searchQuery","useIsUserAddedToken","currency","userAddedTokens","useUserAddedTokens","find","BYTES32_REGEX","parseStringOrBytes32","str","bytes32","defaultValue","length","test","useToken","tokenAddress","chainId","tokens","address","tokenContract","undefined","tokenContractBytes32","tokenName","tokenNameBytes32","symbol","symbolBytes32","decimals","loading","result","useCurrency","currencyId","isETH","toUpperCase"],"mappings":"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","sourcesContent":["import {\n  TokenAddressMap,\n  useDefaultTokenList,\n  useUnsupportedTokenList,\n} from \"./../state/lists/hooks\";\nimport { parseBytes32String } from \"@ethersproject/strings\";\nimport { Currency, ETHER, Token, currencyEquals } from \"@uniswap/sdk\";\nimport { useMemo } from \"react\";\nimport {\n  useCombinedActiveList,\n  useCombinedInactiveList,\n} from \"../state/lists/hooks\";\nimport { NEVER_RELOAD, useSingleCallResult } from \"../state/multicall/hooks\";\n// import { useUserAddedTokens } from \"../state/user/hooks\";\nimport { isAddress } from \"../utils\";\n\nimport { useActiveWeb3React } from \"./index\";\nimport { useBytes32TokenContract, useTokenContract } from \"./useContract\";\nimport { filterTokens } from \"../components/SearchModal/filtering\";\nimport { arrayify } from \"ethers/lib/utils\";\n\n// reduce token map into standard address <-> Token mapping, optionally include user added tokens\n// function useTokensFromMap(\n//   tokenMap: TokenAddressMap,\n//   includeUserAdded: boolean\n// ): { [address: string]: Token } {\n//   const { chainId } = useActiveWeb3React();\n//   // const userAddedTokens = useUserAddedTokens();\n\n//   return useMemo(() => {\n//     if (!chainId) return {};\n\n//     // reduce to just tokens\n//     const mapWithoutUrls = Object.keys(tokenMap[chainId]).reduce<{\n//       [address: string]: Token;\n//     }>((newMap, address) => {\n//       newMap[address] = tokenMap[chainId][address].token;\n//       return newMap;\n//     }, {});\n\n//     if (includeUserAdded) {\n//       return (\n//         userAddedTokens\n//           // reduce into all ALL_TOKENS filtered by the current chain\n//           .reduce<{ [address: string]: Token }>(\n//             (tokenMap, token) => {\n//               tokenMap[token.address] = token;\n//               return tokenMap;\n//             },\n//             // must make a copy because reduce modifies the map, and we do not\n//             // want to make a copy in every iteration\n//             { ...mapWithoutUrls }\n//           )\n//       );\n//     }\n\n//     return mapWithoutUrls;\n//   }, [chainId, userAddedTokens, tokenMap, includeUserAdded]);\n// }\n\nexport function useDefaultTokens(): null {\n  // const defaultList = useDefaultTokenList();\n  // return useTokensFromMap(defaultList, false);\n  return null;\n}\n\nexport function useAllTokens(): null {\n  // const allTokens = useCombinedActiveList();\n  // return useTokensFromMap(allTokens, true);\n  return null;\n}\n\nexport function useAllInactiveTokens(): null {\n  // get inactive tokens\n  // const inactiveTokensMap = useCombinedInactiveList();\n  // const inactiveTokens = useTokensFromMap(inactiveTokensMap, false);\n\n  // // filter out any token that are on active list\n  // const activeTokensAddresses = Object.keys(useAllTokens());\n  // const filteredInactive = activeTokensAddresses\n  //   ? Object.keys(inactiveTokens).reduce<{ [address: string]: Token }>(\n  //       (newMap, address) => {\n  //         if (!activeTokensAddresses.includes(address)) {\n  //           newMap[address] = inactiveTokens[address];\n  //         }\n  //         return newMap;\n  //       },\n  //       {}\n  //     )\n  //   : inactiveTokens;\n\n  // return filteredInactive;\n  return null;\n}\n\nexport function useUnsupportedTokens(): null {\n  // const unsupportedTokensMap = useUnsupportedTokenList();\n  // return useTokensFromMap(unsupportedTokensMap, false);\n  return null;\n}\n\nexport function useIsTokenActive(token: Token | undefined | null): null {\n  // const activeTokens = useAllTokens();\n\n  // if (!activeTokens || !token) {\n  //   return false;\n  // }\n\n  // return !!activeTokens[token.address];\n  return null;\n}\n\n// used to detect extra search results\nexport function useFoundOnInactiveList(searchQuery: string): null {\n  // const { chainId } = useActiveWeb3React();\n  // const inactiveTokens = useAllInactiveTokens();\n\n  // return useMemo(() => {\n  //   if (!chainId || searchQuery === \"\") {\n  //     return undefined;\n  //   } else {\n  //     const tokens = filterTokens(Object.values(inactiveTokens), searchQuery);\n  //     return tokens;\n  //   }\n  // }, [chainId, inactiveTokens, searchQuery]);\n  return null;\n}\n\n// Check if currency is included in custom list from user storage\nexport function useIsUserAddedToken(\n  currency: Currency | undefined | null\n): boolean {\n  const userAddedTokens = useUserAddedTokens();\n\n  if (!currency) {\n    return false;\n  }\n\n  return !!userAddedTokens.find((token) => currencyEquals(currency, token));\n}\n\n// parse a name or symbol from a token response\nconst BYTES32_REGEX = /^0x[a-fA-F0-9]{64}$/;\n\nfunction parseStringOrBytes32(\n  str: string | undefined,\n  bytes32: string | undefined,\n  defaultValue: string\n): string {\n  return str && str.length > 0\n    ? str\n    : // need to check for proper bytes string and valid terminator\n    bytes32 && BYTES32_REGEX.test(bytes32) && arrayify(bytes32)[31] === 0\n    ? parseBytes32String(bytes32)\n    : defaultValue;\n}\n\n// undefined if invalid or does not exist\n// null if loading\n// otherwise returns the token\nexport function useToken(tokenAddress?: string): Token | undefined | null {\n  const { chainId } = useActiveWeb3React();\n  const tokens = useAllTokens();\n\n  const address = isAddress(tokenAddress);\n\n  const tokenContract = useTokenContract(address ? address : undefined, false);\n  const tokenContractBytes32 = useBytes32TokenContract(\n    address ? address : undefined,\n    false\n  );\n  const token: Token | undefined = address ? tokens[address] : undefined;\n\n  const tokenName = useSingleCallResult(\n    token ? undefined : tokenContract,\n    \"name\",\n    undefined,\n    NEVER_RELOAD\n  );\n  const tokenNameBytes32 = useSingleCallResult(\n    token ? undefined : tokenContractBytes32,\n    \"name\",\n    undefined,\n    NEVER_RELOAD\n  );\n  const symbol = useSingleCallResult(\n    token ? undefined : tokenContract,\n    \"symbol\",\n    undefined,\n    NEVER_RELOAD\n  );\n  const symbolBytes32 = useSingleCallResult(\n    token ? undefined : tokenContractBytes32,\n    \"symbol\",\n    undefined,\n    NEVER_RELOAD\n  );\n  const decimals = useSingleCallResult(\n    token ? undefined : tokenContract,\n    \"decimals\",\n    undefined,\n    NEVER_RELOAD\n  );\n\n  return useMemo(() => {\n    if (token) return token;\n    if (!chainId || !address) return undefined;\n    if (decimals.loading || symbol.loading || tokenName.loading) return null;\n    if (decimals.result) {\n      return new Token(\n        chainId,\n        address,\n        decimals.result[0],\n        parseStringOrBytes32(\n          symbol.result?.[0],\n          symbolBytes32.result?.[0],\n          \"UNKNOWN\"\n        ),\n        parseStringOrBytes32(\n          tokenName.result?.[0],\n          tokenNameBytes32.result?.[0],\n          \"Unknown Token\"\n        )\n      );\n    }\n    return undefined;\n  }, [\n    address,\n    chainId,\n    decimals.loading,\n    decimals.result,\n    symbol.loading,\n    symbol.result,\n    symbolBytes32.result,\n    token,\n    tokenName.loading,\n    tokenName.result,\n    tokenNameBytes32.result,\n  ]);\n}\n\nexport function useCurrency(\n  currencyId: string | undefined\n): Currency | null | undefined {\n  const isETH = currencyId?.toUpperCase() === \"ETH\";\n  const token = useToken(isETH ? undefined : currencyId);\n  return isETH ? ETHER : token;\n}\n"]},"metadata":{},"sourceType":"module"}