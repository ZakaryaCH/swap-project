{"ast":null,"code":"// import React, { useContext, useMemo } from \"react\";\n// import styled, { ThemeContext } from \"styled-components\";\n// import { Pair, JSBI } from \"@uniswap/sdk\";\n// import { Link } from \"react-router-dom\";\n// import { SwapPoolTabs } from \"../../components/NavigationTabs\";\n// import FullPositionCard from \"../../components/PositionCard\";\n// // import { useUserHasLiquidityInAllTokens } from '../../data/V1'\n// import { useTokenBalancesWithLoadingIndicator } from \"../../state/wallet/hooks\";\n// // import { StyledInternalLink, ExternalLink, TYPE, HideSmall } from '../../theme'\n// import { StyledInternalLink, TYPE, HideSmall } from \"../../theme\";\n// import { Text } from \"rebass\";\n// import Card from \"../../components/Card\";\n// import { RowBetween, RowFixed } from \"../../components/Row\";\n// import { ButtonPrimary, ButtonSecondary } from \"../../components/Button\";\n// import { AutoColumn } from \"../../components/Column\";\n// import { useActiveWeb3React } from \"../../hooks\";\n// import { usePairs } from \"../../data/Reserves\";\n// import {\n//   toV2LiquidityToken,\n//   useTrackedTokenPairs,\n// } from \"../../state/user/hooks\";\n// import { Dots } from \"../../components/swap/styleds\";\n// // import { CardSection, DataCard, CardNoise, CardBGImage } from '../../components/earn/styled'\n// import { useStakingInfo } from \"../../state/stake/hooks\";\n// import { BIG_INT_ZERO } from \"../../constants\";\n// const PageWrapper = styled(AutoColumn)`\n//   max-width: 640px;\n//   width: 100%;\n// `;\n// // const VoteCard = styled(DataCard)`\n// //   background: radial-gradient(76.02% 75.41% at 1.84% 0%, #27ae60 0%, #000000 100%);\n// //   overflow: hidden;\n// // `\n// const TitleRow = styled(RowBetween)`\n//   ${({ theme }) => theme.mediaWidth.upToSmall`\n//     flex-wrap: wrap;\n//     gap: 12px;\n//     width: 100%;\n//     flex-direction: column-reverse;\n//   `};\n// `;\n// const ButtonRow = styled(RowFixed)`\n//   gap: 8px;\n//   ${({ theme }) => theme.mediaWidth.upToSmall`\n//     width: 100%;\n//     flex-direction: row-reverse;\n//     justify-content: space-between;\n//   `};\n// `;\n// const ResponsiveButtonPrimary = styled(ButtonPrimary)`\n//   width: fit-content;\n//   ${({ theme }) => theme.mediaWidth.upToSmall`\n//     width: 48%;\n//   `};\n// `;\n// const ResponsiveButtonSecondary = styled(ButtonSecondary)`\n//   width: fit-content;\n//   ${({ theme }) => theme.mediaWidth.upToSmall`\n//     width: 48%;\n//   `};\n// `;\n// const EmptyProposals = styled.div`\n//   border: 1px solid ${({ theme }) => theme.text4};\n//   padding: 16px 12px;\n//   border-radius: 12px;\n//   display: flex;\n//   flex-direction: column;\n//   justify-content: center;\n//   align-items: center;\n// `;\n// export default function Pool() {\n//   const theme = useContext(ThemeContext);\n//   const { account } = useActiveWeb3React();\n//   // fetch the user's balances of all tracked V2 LP tokens\n//   const trackedTokenPairs = useTrackedTokenPairs();\n//   const tokenPairsWithLiquidityTokens = useMemo(\n//     () =>\n//       trackedTokenPairs.map((tokens) => ({\n//         liquidityToken: toV2LiquidityToken(tokens),\n//         tokens,\n//       })),\n//     [trackedTokenPairs]\n//   );\n//   const liquidityTokens = useMemo(\n//     () => tokenPairsWithLiquidityTokens.map((tpwlt) => tpwlt.liquidityToken),\n//     [tokenPairsWithLiquidityTokens]\n//   );\n//   const [v2PairsBalances, fetchingV2PairBalances] =\n//     useTokenBalancesWithLoadingIndicator(account ?? undefined, liquidityTokens);\n//   // fetch the reserves for all V2 pools in which the user has a balance\n//   const liquidityTokensWithBalances = useMemo(\n//     () =>\n//       tokenPairsWithLiquidityTokens.filter(({ liquidityToken }) =>\n//         v2PairsBalances[liquidityToken.address]?.greaterThan(\"0\")\n//       ),\n//     [tokenPairsWithLiquidityTokens, v2PairsBalances]\n//   );\n//   const v2Pairs = usePairs(\n//     liquidityTokensWithBalances.map(({ tokens }) => tokens)\n//   );\n//   // const v2IsLoading =\n//   //   fetchingV2PairBalances ||\n//   //   v2Pairs?.length < liquidityTokensWithBalances.length ||\n//   //   v2Pairs?.some((V2Pair) => !V2Pair);\n//   // const allV2PairsWithLiquidity = v2Pairs\n//   //   .map(([, pair]) => pair)\n//   //   .filter((v2Pair): v2Pair is Pair => Boolean(v2Pair));\n//   // const hasV1Liquidity = useUserHasLiquidityInAllTokens()\n//   // show liquidity even if its deposited in rewards contract\n//   const stakingInfo = useStakingInfo();\n//   const stakingInfosWithBalance = stakingInfo?.filter((pool) =>\n//     JSBI.greaterThan(pool.stakedAmount.raw, BIG_INT_ZERO)\n//   );\n//   const stakingPairs = usePairs(\n//     stakingInfosWithBalance?.map((stakingInfo) => stakingInfo.tokens)\n//   );\n//   // remove any pairs that also are included in pairs with stake in mining pool\n//   // const v2PairsWithoutStakedAmount = allV2PairsWithLiquidity.filter(\n//   //   (v2Pair) => {\n//   //     return (\n//   //       stakingPairs\n//   //         ?.map((stakingPair) => stakingPair[1])\n//   //         .filter(\n//   //           (stakingPair) =>\n//   //             stakingPair?.liquidityToken.address ===\n//   //             v2Pair.liquidityToken.address\n//   //         ).length === 0\n//   //     );\n//   //   }\n//   // );\n//   return (\n//     <>\n//       <PageWrapper>\n//         <SwapPoolTabs active={\"pool\"} />\n//         {/* <VoteCard>\n//           <CardBGImage />\n//           <CardNoise />\n//           <CardSection>\n//             <AutoColumn gap=\"md\">\n//               <RowBetween>\n//                 <TYPE.white fontWeight={600}>Liquidity provider rewards</TYPE.white>\n//               </RowBetween>\n//               <RowBetween>\n//                 <TYPE.white fontSize={14}>\n//                   {`Liquidity providers earn a 0.3% fee on all trades proportional to their share of the pool. Fees are added to the pool, accrue in real time and can be claimed by withdrawing your liquidity.`}\n//                 </TYPE.white>\n//               </RowBetween>\n//               <ExternalLink\n//                 style={{ color: 'white', textDecoration: 'underline' }}\n//                 target=\"_blank\"\n//                 href=\"https://uniswap.org/docs/v2/core-concepts/pools/\"\n//               >\n//                 <TYPE.white fontSize={14}>Read more about providing liquidity</TYPE.white>\n//               </ExternalLink>\n//             </AutoColumn>\n//           </CardSection>\n//           <CardBGImage />\n//           <CardNoise />\n//         </VoteCard> */}\n//         <AutoColumn gap=\"lg\" justify=\"center\">\n//           <AutoColumn gap=\"lg\" style={{ width: \"100%\" }}>\n//             <TitleRow style={{ marginTop: \"1rem\" }} padding={\"0\"}>\n//               <HideSmall>\n//                 <TYPE.mediumHeader\n//                   style={{ marginTop: \"0.5rem\", justifySelf: \"flex-start\" }}\n//                 >\n//                   Your liquidity\n//                 </TYPE.mediumHeader>\n//               </HideSmall>\n//               <ButtonRow>\n//                 <ResponsiveButtonSecondary\n//                   as={Link}\n//                   padding=\"6px 8px\"\n//                   to=\"/create/ETH\"\n//                 >\n//                   Create a pair\n//                 </ResponsiveButtonSecondary>\n//                 <ResponsiveButtonPrimary\n//                   id=\"join-pool-button\"\n//                   as={Link}\n//                   padding=\"6px 8px\"\n//                   borderRadius=\"12px\"\n//                   to=\"/add/ETH\"\n//                 >\n//                   <Text fontWeight={500} fontSize={16}>\n//                     Add Liquidity\n//                   </Text>\n//                 </ResponsiveButtonPrimary>\n//               </ButtonRow>\n//             </TitleRow>\n//             {!account ? (\n//               <Card padding=\"40px\">\n//                 <TYPE.body color={theme.text3} textAlign=\"center\">\n//                   Connect to a wallet to view your liquidity.\n//                 </TYPE.body>\n//               </Card>\n//             ) : v2IsLoading ? (\n//               <EmptyProposals>\n//                 <TYPE.body color={theme.text3} textAlign=\"center\">\n//                   <Dots>Loading</Dots>\n//                 </TYPE.body>\n//               </EmptyProposals>\n//             ) : allV2PairsWithLiquidity?.length > 0 ||\n//               stakingPairs?.length > 0 ? (\n//               <>\n//                 {/* <ButtonSecondary>\n//                   <RowBetween>\n//                     <ExternalLink href={'https://uniswap.info/account/' + account}>\n//                       Account analytics and accrued fees\n//                     </ExternalLink>\n//                     <span> â†—</span>\n//                   </RowBetween>\n//                 </ButtonSecondary> */}\n//                 {/* {v2PairsWithoutStakedAmount.map((v2Pair) => (\n//                   <FullPositionCard\n//                     key={v2Pair.liquidityToken.address}\n//                     pair={v2Pair}\n//                   />\n//                 ))} */}\n//                 {/* {stakingPairs.map(\n//                   (stakingPair, i) =>\n//                     stakingPair[1] && ( // skip pairs that arent loaded\n//                       <FullPositionCard\n//                         key={stakingInfosWithBalance[i].stakingRewardAddress}\n//                         pair={stakingPair[1]}\n//                         stakedBalance={stakingInfosWithBalance[i].stakedAmount}\n//                       />\n//                     )\n//                 )} */}\n//               </>\n//             ) : (\n//               <EmptyProposals>\n//                 <TYPE.body color={theme.text3} textAlign=\"center\">\n//                   No liquidity found.\n//                 </TYPE.body>\n//               </EmptyProposals>\n//             )}\n//             <AutoColumn justify={\"center\"} gap=\"md\">\n//               <Text\n//                 textAlign=\"center\"\n//                 fontSize={14}\n//                 style={{ padding: \".5rem 0 .5rem 0\" }}\n//               >\n//                 {/* {hasV1Liquidity ? 'Uniswap V1 liquidity found!' : \"Don't see a pool you joined?\"}{' '}\n//                 <StyledInternalLink id=\"import-pool-link\" to={hasV1Liquidity ? '/migrate/v1' : '/find'}>\n//                   {hasV1Liquidity ? 'Migrate now.' : 'Import it.'}\n//                 </StyledInternalLink> */}\n//               </Text>\n//             </AutoColumn>\n//           </AutoColumn>\n//         </AutoColumn>\n//       </PageWrapper>\n//     </>\n//   );\n// }\nexport default 1;","map":{"version":3,"sources":["/Users/chichke/Documents/Work/Freelance/swap-project/src/pages/Pool/index.tsx"],"names":[],"mappingseAAe,CAAf","sourcesContent":["// import React, { useContext, useMemo } from \"react\";\n// import styled, { ThemeContext } from \"styled-components\";\n// import { Pair, JSBI } from \"@uniswap/sdk\";\n// import { Link } from \"react-router-dom\";\n// import { SwapPoolTabs } from \"../../components/NavigationTabs\";\n\n// import FullPositionCard from \"../../components/PositionCard\";\n// // import { useUserHasLiquidityInAllTokens } from '../../data/V1'\n// import { useTokenBalancesWithLoadingIndicator } from \"../../state/wallet/hooks\";\n// // import { StyledInternalLink, ExternalLink, TYPE, HideSmall } from '../../theme'\n// import { StyledInternalLink, TYPE, HideSmall } from \"../../theme\";\n// import { Text } from \"rebass\";\n// import Card from \"../../components/Card\";\n// import { RowBetween, RowFixed } from \"../../components/Row\";\n// import { ButtonPrimary, ButtonSecondary } from \"../../components/Button\";\n// import { AutoColumn } from \"../../components/Column\";\n\n// import { useActiveWeb3React } from \"../../hooks\";\n// import { usePairs } from \"../../data/Reserves\";\n// import {\n//   toV2LiquidityToken,\n//   useTrackedTokenPairs,\n// } from \"../../state/user/hooks\";\n// import { Dots } from \"../../components/swap/styleds\";\n// // import { CardSection, DataCard, CardNoise, CardBGImage } from '../../components/earn/styled'\n\n// import { useStakingInfo } from \"../../state/stake/hooks\";\n// import { BIG_INT_ZERO } from \"../../constants\";\n\n// const PageWrapper = styled(AutoColumn)`\n//   max-width: 640px;\n//   width: 100%;\n// `;\n\n// // const VoteCard = styled(DataCard)`\n// //   background: radial-gradient(76.02% 75.41% at 1.84% 0%, #27ae60 0%, #000000 100%);\n// //   overflow: hidden;\n// // `\n\n// const TitleRow = styled(RowBetween)`\n//   ${({ theme }) => theme.mediaWidth.upToSmall`\n//     flex-wrap: wrap;\n//     gap: 12px;\n//     width: 100%;\n//     flex-direction: column-reverse;\n//   `};\n// `;\n\n// const ButtonRow = styled(RowFixed)`\n//   gap: 8px;\n//   ${({ theme }) => theme.mediaWidth.upToSmall`\n//     width: 100%;\n//     flex-direction: row-reverse;\n//     justify-content: space-between;\n//   `};\n// `;\n\n// const ResponsiveButtonPrimary = styled(ButtonPrimary)`\n//   width: fit-content;\n//   ${({ theme }) => theme.mediaWidth.upToSmall`\n//     width: 48%;\n//   `};\n// `;\n\n// const ResponsiveButtonSecondary = styled(ButtonSecondary)`\n//   width: fit-content;\n//   ${({ theme }) => theme.mediaWidth.upToSmall`\n//     width: 48%;\n//   `};\n// `;\n\n// const EmptyProposals = styled.div`\n//   border: 1px solid ${({ theme }) => theme.text4};\n//   padding: 16px 12px;\n//   border-radius: 12px;\n//   display: flex;\n//   flex-direction: column;\n//   justify-content: center;\n//   align-items: center;\n// `;\n\n// export default function Pool() {\n//   const theme = useContext(ThemeContext);\n//   const { account } = useActiveWeb3React();\n\n//   // fetch the user's balances of all tracked V2 LP tokens\n//   const trackedTokenPairs = useTrackedTokenPairs();\n//   const tokenPairsWithLiquidityTokens = useMemo(\n//     () =>\n//       trackedTokenPairs.map((tokens) => ({\n//         liquidityToken: toV2LiquidityToken(tokens),\n//         tokens,\n//       })),\n//     [trackedTokenPairs]\n//   );\n//   const liquidityTokens = useMemo(\n//     () => tokenPairsWithLiquidityTokens.map((tpwlt) => tpwlt.liquidityToken),\n//     [tokenPairsWithLiquidityTokens]\n//   );\n//   const [v2PairsBalances, fetchingV2PairBalances] =\n//     useTokenBalancesWithLoadingIndicator(account ?? undefined, liquidityTokens);\n\n//   // fetch the reserves for all V2 pools in which the user has a balance\n//   const liquidityTokensWithBalances = useMemo(\n//     () =>\n//       tokenPairsWithLiquidityTokens.filter(({ liquidityToken }) =>\n//         v2PairsBalances[liquidityToken.address]?.greaterThan(\"0\")\n//       ),\n//     [tokenPairsWithLiquidityTokens, v2PairsBalances]\n//   );\n\n//   const v2Pairs = usePairs(\n//     liquidityTokensWithBalances.map(({ tokens }) => tokens)\n//   );\n//   // const v2IsLoading =\n//   //   fetchingV2PairBalances ||\n//   //   v2Pairs?.length < liquidityTokensWithBalances.length ||\n//   //   v2Pairs?.some((V2Pair) => !V2Pair);\n\n//   // const allV2PairsWithLiquidity = v2Pairs\n//   //   .map(([, pair]) => pair)\n//   //   .filter((v2Pair): v2Pair is Pair => Boolean(v2Pair));\n\n//   // const hasV1Liquidity = useUserHasLiquidityInAllTokens()\n\n//   // show liquidity even if its deposited in rewards contract\n//   const stakingInfo = useStakingInfo();\n//   const stakingInfosWithBalance = stakingInfo?.filter((pool) =>\n//     JSBI.greaterThan(pool.stakedAmount.raw, BIG_INT_ZERO)\n//   );\n//   const stakingPairs = usePairs(\n//     stakingInfosWithBalance?.map((stakingInfo) => stakingInfo.tokens)\n//   );\n\n//   // remove any pairs that also are included in pairs with stake in mining pool\n//   // const v2PairsWithoutStakedAmount = allV2PairsWithLiquidity.filter(\n//   //   (v2Pair) => {\n//   //     return (\n//   //       stakingPairs\n//   //         ?.map((stakingPair) => stakingPair[1])\n//   //         .filter(\n//   //           (stakingPair) =>\n//   //             stakingPair?.liquidityToken.address ===\n//   //             v2Pair.liquidityToken.address\n//   //         ).length === 0\n//   //     );\n//   //   }\n//   // );\n\n//   return (\n//     <>\n//       <PageWrapper>\n//         <SwapPoolTabs active={\"pool\"} />\n//         {/* <VoteCard>\n//           <CardBGImage />\n//           <CardNoise />\n//           <CardSection>\n//             <AutoColumn gap=\"md\">\n//               <RowBetween>\n//                 <TYPE.white fontWeight={600}>Liquidity provider rewards</TYPE.white>\n//               </RowBetween>\n//               <RowBetween>\n//                 <TYPE.white fontSize={14}>\n//                   {`Liquidity providers earn a 0.3% fee on all trades proportional to their share of the pool. Fees are added to the pool, accrue in real time and can be claimed by withdrawing your liquidity.`}\n//                 </TYPE.white>\n//               </RowBetween>\n//               <ExternalLink\n//                 style={{ color: 'white', textDecoration: 'underline' }}\n//                 target=\"_blank\"\n//                 href=\"https://uniswap.org/docs/v2/core-concepts/pools/\"\n//               >\n//                 <TYPE.white fontSize={14}>Read more about providing liquidity</TYPE.white>\n//               </ExternalLink>\n//             </AutoColumn>\n//           </CardSection>\n//           <CardBGImage />\n//           <CardNoise />\n//         </VoteCard> */}\n\n//         <AutoColumn gap=\"lg\" justify=\"center\">\n//           <AutoColumn gap=\"lg\" style={{ width: \"100%\" }}>\n//             <TitleRow style={{ marginTop: \"1rem\" }} padding={\"0\"}>\n//               <HideSmall>\n//                 <TYPE.mediumHeader\n//                   style={{ marginTop: \"0.5rem\", justifySelf: \"flex-start\" }}\n//                 >\n//                   Your liquidity\n//                 </TYPE.mediumHeader>\n//               </HideSmall>\n//               <ButtonRow>\n//                 <ResponsiveButtonSecondary\n//                   as={Link}\n//                   padding=\"6px 8px\"\n//                   to=\"/create/ETH\"\n//                 >\n//                   Create a pair\n//                 </ResponsiveButtonSecondary>\n//                 <ResponsiveButtonPrimary\n//                   id=\"join-pool-button\"\n//                   as={Link}\n//                   padding=\"6px 8px\"\n//                   borderRadius=\"12px\"\n//                   to=\"/add/ETH\"\n//                 >\n//                   <Text fontWeight={500} fontSize={16}>\n//                     Add Liquidity\n//                   </Text>\n//                 </ResponsiveButtonPrimary>\n//               </ButtonRow>\n//             </TitleRow>\n\n//             {!account ? (\n//               <Card padding=\"40px\">\n//                 <TYPE.body color={theme.text3} textAlign=\"center\">\n//                   Connect to a wallet to view your liquidity.\n//                 </TYPE.body>\n//               </Card>\n//             ) : v2IsLoading ? (\n//               <EmptyProposals>\n//                 <TYPE.body color={theme.text3} textAlign=\"center\">\n//                   <Dots>Loading</Dots>\n//                 </TYPE.body>\n//               </EmptyProposals>\n//             ) : allV2PairsWithLiquidity?.length > 0 ||\n//               stakingPairs?.length > 0 ? (\n//               <>\n//                 {/* <ButtonSecondary>\n//                   <RowBetween>\n//                     <ExternalLink href={'https://uniswap.info/account/' + account}>\n//                       Account analytics and accrued fees\n//                     </ExternalLink>\n//                     <span> â†—</span>\n//                   </RowBetween>\n//                 </ButtonSecondary> */}\n//                 {/* {v2PairsWithoutStakedAmount.map((v2Pair) => (\n//                   <FullPositionCard\n//                     key={v2Pair.liquidityToken.address}\n//                     pair={v2Pair}\n//                   />\n//                 ))} */}\n//                 {/* {stakingPairs.map(\n//                   (stakingPair, i) =>\n//                     stakingPair[1] && ( // skip pairs that arent loaded\n//                       <FullPositionCard\n//                         key={stakingInfosWithBalance[i].stakingRewardAddress}\n//                         pair={stakingPair[1]}\n//                         stakedBalance={stakingInfosWithBalance[i].stakedAmount}\n//                       />\n//                     )\n//                 )} */}\n//               </>\n//             ) : (\n//               <EmptyProposals>\n//                 <TYPE.body color={theme.text3} textAlign=\"center\">\n//                   No liquidity found.\n//                 </TYPE.body>\n//               </EmptyProposals>\n//             )}\n\n//             <AutoColumn justify={\"center\"} gap=\"md\">\n//               <Text\n//                 textAlign=\"center\"\n//                 fontSize={14}\n//                 style={{ padding: \".5rem 0 .5rem 0\" }}\n//               >\n//                 {/* {hasV1Liquidity ? 'Uniswap V1 liquidity found!' : \"Don't see a pool you joined?\"}{' '}\n//                 <StyledInternalLink id=\"import-pool-link\" to={hasV1Liquidity ? '/migrate/v1' : '/find'}>\n//                   {hasV1Liquidity ? 'Migrate now.' : 'Import it.'}\n//                 </StyledInternalLink> */}\n//               </Text>\n//             </AutoColumn>\n//           </AutoColumn>\n//         </AutoColumn>\n//       </PageWrapper>\n//     </>\n//   );\n// }\nexport default 1;\n"]},"metadata":{},"sourceType":"module"}