{"ast":null,"code":"var _jsxFileName = \"/Users/chichke/Documents/Work/Freelance/swap-project/src/pages/Swap/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { JSBI } from \"@uniswap/sdk\";\nimport React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport { ArrowDown } from \"react-feather\";\nimport ReactGA from \"react-ga\";\nimport { Text } from \"rebass\";\nimport { ThemeContext } from \"styled-components\";\nimport AddressInputPanel from \"../../components/AddressInputPanel\";\nimport { ButtonError, ButtonLight, ButtonConfirmed } from \"../../components/Button\";\nimport Card, { GreyCard } from \"../../components/Card\";\nimport Column, { AutoColumn } from \"../../components/Column\";\nimport ConfirmSwapModal from \"../../components/swap/ConfirmSwapModal\";\nimport CurrencyInputPanel from \"../../components/CurrencyInputPanel\";\nimport { SwapPoolTabs } from \"../../components/NavigationTabs\";\nimport { AutoRow, RowBetween } from \"../../components/Row\";\nimport BetterTradeLink, { DefaultVersionLink } from \"../../components/swap/BetterTradeLink\";\nimport confirmPriceImpactWithoutFee from \"../../components/swap/confirmPriceImpactWithoutFee\";\nimport { ArrowWrapper, BottomGrouping, SwapCallbackError, Wrapper } from \"../../components/swap/styleds\";\nimport TradePrice from \"../../components/swap/TradePrice\";\nimport TokenWarningModal from \"../../components/TokenWarningModal\";\nimport ProgressSteps from \"../../components/ProgressSteps\";\nimport SwapHeader from \"../../components/swap/SwapHeader\";\nimport { INITIAL_ALLOWED_SLIPPAGE } from \"../../constants\";\nimport { getTradeVersion } from \"../../data/V1\";\nimport { useActiveWeb3React } from \"../../hooks\";\nimport { useCurrency } from \"../../hooks/Tokens\";\nimport { ApprovalState, useApproveCallbackFromTrade } from \"../../hooks/useApproveCallback\";\nimport useENSAddress from \"../../hooks/useENSAddress\";\nimport { useSwapCallback } from \"../../hooks/useSwapCallback\";\nimport useToggledVersion, { DEFAULT_VERSION, Version } from \"../../hooks/useToggledVersion\";\nimport useWrapCallback, { WrapType } from \"../../hooks/useWrapCallback\";\nimport { useToggleSettingsMenu, useWalletModalToggle } from \"../../state/application/hooks\";\nimport { Field } from \"../../state/swap/actions\";\nimport { useDefaultsFromURLSearch, useDerivedSwapInfo, useSwapActionHandlers, useSwapState } from \"../../state/swap/hooks\";\nimport { useExpertModeManager, useUserSlippageTolerance, useUserSingleHopOnly } from \"../../state/user/hooks\";\nimport { LinkStyledButton, TYPE } from \"../../theme\";\nimport { maxAmountSpend } from \"../../utils/maxAmountSpend\";\nimport { computeTradePriceBreakdown, warningSeverity } from \"../../utils/prices\";\nimport AppBody from \"../AppBody\";\nimport { ClickableText } from \"../Pool/styleds\";\nimport Loader from \"../../components/Loader\";\nimport UnsupportedCurrencyFooter from \"components/swap/UnsupportedCurrencyFooter\";\nimport { isTradeBetter } from \"utils/trades\";\nimport { useQuery } from \"react-query\";\nimport getTokenList from \"utils/getTokenList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Swap() {\n  _s();\n\n  var _parsedAmounts$indepe, _parsedAmounts$indepe2, _parsedAmounts$depend, _parsedAmounts$depend2, _parsedAmounts$indepe3, _parsedAmounts$Field$, _currencies$Field$INP;\n\n  const loadedUrlParams = useDefaultsFromURLSearch(); // token warning stuff\n\n  const [loadedInputCurrency, loadedOutputCurrency] = [useCurrency(loadedUrlParams === null || loadedUrlParams === void 0 ? void 0 : loadedUrlParams.inputCurrencyId), useCurrency(loadedUrlParams === null || loadedUrlParams === void 0 ? void 0 : loadedUrlParams.outputCurrencyId)];\n  const handleConfirmTokenWarning = useCallback(() => {}, []); // dismiss warning if all imported tokens are in active lists\n\n  const defaultTokens = useQuery(\"tokenList\", getTokenList);\n  const {\n    account\n  } = useActiveWeb3React();\n  const theme = useContext(ThemeContext); // toggle wallet when disconnected\n\n  const toggleWalletModal = useWalletModalToggle(); // for expert mode\n\n  const toggleSettings = useToggleSettingsMenu();\n  const [isExpertMode] = useExpertModeManager(); // get custom setting values for user\n\n  const [allowedSlippage] = useUserSlippageTolerance(); // swap state\n\n  const {\n    independentField,\n    typedValue,\n    recipient\n  } = useSwapState();\n  const {\n    v1Trade,\n    v2Trade,\n    currencyBalances,\n    parsedAmount,\n    currencies,\n    inputError: swapInputError\n  } = useDerivedSwapInfo();\n  const {\n    wrapType,\n    execute: onWrap,\n    inputError: wrapInputError\n  } = useWrapCallback(currencies[Field.INPUT], currencies[Field.OUTPUT], typedValue);\n  const showWrap = wrapType !== WrapType.NOT_APPLICABLE;\n  const {\n    address: recipientAddress\n  } = useENSAddress(recipient);\n  const toggledVersion = useToggledVersion();\n  const tradesByVersion = {\n    [Version.v1]: v1Trade,\n    [Version.v2]: v2Trade\n  };\n  const trade = showWrap ? undefined : tradesByVersion[toggledVersion];\n  const defaultTrade = showWrap ? undefined : tradesByVersion[DEFAULT_VERSION];\n  const betterTradeLinkV2 = toggledVersion === Version.v1 && isTradeBetter(v1Trade, v2Trade) ? Version.v2 : undefined;\n  const parsedAmounts = showWrap ? {\n    [Field.INPUT]: parsedAmount,\n    [Field.OUTPUT]: parsedAmount\n  } : {\n    [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade === null || trade === void 0 ? void 0 : trade.inputAmount,\n    [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade === null || trade === void 0 ? void 0 : trade.outputAmount\n  };\n  const {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient\n  } = useSwapActionHandlers();\n  const isValid = !swapInputError;\n  const dependentField = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT;\n  const handleTypeInput = useCallback(value => {\n    onUserInput(Field.INPUT, value);\n  }, [onUserInput]);\n  const handleTypeOutput = useCallback(value => {\n    onUserInput(Field.OUTPUT, value);\n  }, [onUserInput]); // modal and loading\n\n  const [{\n    showConfirm,\n    tradeToConfirm,\n    swapErrorMessage,\n    attemptingTxn,\n    txHash\n  }, setSwapState] = useState({\n    showConfirm: false,\n    tradeToConfirm: undefined,\n    attemptingTxn: false,\n    swapErrorMessage: undefined,\n    txHash: undefined\n  });\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: showWrap ? (_parsedAmounts$indepe = (_parsedAmounts$indepe2 = parsedAmounts[independentField]) === null || _parsedAmounts$indepe2 === void 0 ? void 0 : _parsedAmounts$indepe2.toExact()) !== null && _parsedAmounts$indepe !== void 0 ? _parsedAmounts$indepe : \"\" : (_parsedAmounts$depend = (_parsedAmounts$depend2 = parsedAmounts[dependentField]) === null || _parsedAmounts$depend2 === void 0 ? void 0 : _parsedAmounts$depend2.toSignificant(6)) !== null && _parsedAmounts$depend !== void 0 ? _parsedAmounts$depend : \"\"\n  };\n  const route = trade === null || trade === void 0 ? void 0 : trade.route;\n  const userHasSpecifiedInputOutput = Boolean(currencies[Field.INPUT] && currencies[Field.OUTPUT] && ((_parsedAmounts$indepe3 = parsedAmounts[independentField]) === null || _parsedAmounts$indepe3 === void 0 ? void 0 : _parsedAmounts$indepe3.greaterThan(JSBI.BigInt(0))));\n  const noRoute = !route; // check whether the user has approved the router on the input token\n\n  const [approval, approveCallback] = useApproveCallbackFromTrade(trade, allowedSlippage); // check if user has gone through approval process, used to show two step buttons, reset on token change\n\n  const [approvalSubmitted, setApprovalSubmitted] = useState(false); // mark when a user has submitted an approval, reset onTokenSelection for input field\n\n  useEffect(() => {\n    if (approval === ApprovalState.PENDING) {\n      setApprovalSubmitted(true);\n    }\n  }, [approval, approvalSubmitted]);\n  const maxAmountInput = maxAmountSpend(currencyBalances[Field.INPUT]);\n  const atMaxAmountInput = Boolean(maxAmountInput && ((_parsedAmounts$Field$ = parsedAmounts[Field.INPUT]) === null || _parsedAmounts$Field$ === void 0 ? void 0 : _parsedAmounts$Field$.equalTo(maxAmountInput))); // the callback to execute the swap\n\n  const {\n    callback: swapCallback,\n    error: swapCallbackError\n  } = useSwapCallback(trade, allowedSlippage, recipient);\n  const {\n    priceImpactWithoutFee\n  } = computeTradePriceBreakdown(trade);\n  const [singleHopOnly] = useUserSingleHopOnly();\n  const handleSwap = useCallback(() => {\n    if (priceImpactWithoutFee && !confirmPriceImpactWithoutFee(priceImpactWithoutFee)) {\n      return;\n    }\n\n    if (!swapCallback) {\n      return;\n    }\n\n    setSwapState({\n      attemptingTxn: true,\n      tradeToConfirm,\n      showConfirm,\n      swapErrorMessage: undefined,\n      txHash: undefined\n    });\n    swapCallback().then(hash => {\n      var _trade$inputAmount, _trade$inputAmount$cu, _trade$outputAmount, _trade$outputAmount$c;\n\n      setSwapState({\n        attemptingTxn: false,\n        tradeToConfirm,\n        showConfirm,\n        swapErrorMessage: undefined,\n        txHash: hash\n      });\n      ReactGA.event({\n        category: \"Swap\",\n        action: recipient === null ? \"Swap w/o Send\" : (recipientAddress !== null && recipientAddress !== void 0 ? recipientAddress : recipient) === account ? \"Swap w/o Send + recipient\" : \"Swap w/ Send\",\n        label: [trade === null || trade === void 0 ? void 0 : (_trade$inputAmount = trade.inputAmount) === null || _trade$inputAmount === void 0 ? void 0 : (_trade$inputAmount$cu = _trade$inputAmount.currency) === null || _trade$inputAmount$cu === void 0 ? void 0 : _trade$inputAmount$cu.symbol, trade === null || trade === void 0 ? void 0 : (_trade$outputAmount = trade.outputAmount) === null || _trade$outputAmount === void 0 ? void 0 : (_trade$outputAmount$c = _trade$outputAmount.currency) === null || _trade$outputAmount$c === void 0 ? void 0 : _trade$outputAmount$c.symbol, getTradeVersion(trade)].join(\"/\")\n      });\n      ReactGA.event({\n        category: \"Routing\",\n        action: singleHopOnly ? \"Swap with multihop disabled\" : \"Swap with multihop enabled\"\n      });\n    }).catch(error => {\n      setSwapState({\n        attemptingTxn: false,\n        tradeToConfirm,\n        showConfirm,\n        swapErrorMessage: error.message,\n        txHash: undefined\n      });\n    });\n  }, [priceImpactWithoutFee, swapCallback, tradeToConfirm, showConfirm, recipient, recipientAddress, account, trade, singleHopOnly]); // errors\n\n  const [showInverted, setShowInverted] = useState(false); // warnings on slippage\n\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee); // show approve flow when: no error on inputs, not approved or pending, or approved in current session\n  // never show if price impact is above threshold in non expert mode\n\n  const showApproveFlow = !swapInputError && (approval === ApprovalState.NOT_APPROVED || approval === ApprovalState.PENDING || approvalSubmitted && approval === ApprovalState.APPROVED) && !(priceImpactSeverity > 3 && !isExpertMode);\n  const handleConfirmDismiss = useCallback(() => {\n    setSwapState({\n      showConfirm: false,\n      tradeToConfirm,\n      attemptingTxn,\n      swapErrorMessage,\n      txHash\n    }); // if there was a tx hash, we want to clear the input\n\n    if (txHash) {\n      onUserInput(Field.INPUT, \"\");\n    }\n  }, [attemptingTxn, onUserInput, swapErrorMessage, tradeToConfirm, txHash]);\n  const handleAcceptChanges = useCallback(() => {\n    setSwapState({\n      tradeToConfirm: trade,\n      swapErrorMessage,\n      txHash,\n      attemptingTxn,\n      showConfirm\n    });\n  }, [attemptingTxn, showConfirm, swapErrorMessage, trade, txHash]);\n  const handleInputSelect = useCallback(inputCurrency => {\n    setApprovalSubmitted(false); // reset 2 step UI for approvals\n\n    onCurrencySelection(Field.INPUT, inputCurrency);\n  }, [onCurrencySelection]);\n  const handleMaxInput = useCallback(() => {\n    maxAmountInput && onUserInput(Field.INPUT, maxAmountInput.toExact());\n  }, [maxAmountInput, onUserInput]);\n  const handleOutputSelect = useCallback(outputCurrency => onCurrencySelection(Field.OUTPUT, outputCurrency), [onCurrencySelection]);\n  const swapIsUnsupported = useIsTransactionUnsupported(currencies === null || currencies === void 0 ? void 0 : currencies.INPUT, currencies === null || currencies === void 0 ? void 0 : currencies.OUTPUT);\n\n  if (defaultTokens.isLoading) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(AppBody, {\n        children: /*#__PURE__*/_jsxDEV(Loader, {\n          stroke: \"white\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TokenWarningModal, {\n      isOpen: importTokensNotInDefault.length > 0 && !dismissTokenWarning,\n      tokens: importTokensNotInDefault,\n      onConfirm: handleConfirmTokenWarning\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SwapPoolTabs, {\n      active: \"swap\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AppBody, {\n      children: [/*#__PURE__*/_jsxDEV(SwapHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Wrapper, {\n        id: \"swap-page\",\n        children: [/*#__PURE__*/_jsxDEV(ConfirmSwapModal, {\n          isOpen: showConfirm,\n          trade: trade,\n          originalTrade: tradeToConfirm,\n          onAcceptChanges: handleAcceptChanges,\n          attemptingTxn: attemptingTxn,\n          txHash: txHash,\n          recipient: recipient,\n          allowedSlippage: allowedSlippage,\n          onConfirm: handleSwap,\n          swapErrorMessage: swapErrorMessage,\n          onDismiss: handleConfirmDismiss\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AutoColumn, {\n          gap: \"md\",\n          children: [/*#__PURE__*/_jsxDEV(CurrencyInputPanel, {\n            label: independentField === Field.OUTPUT && !showWrap && trade ? \"From (estimated)\" : \"From\",\n            value: formattedAmounts[Field.INPUT],\n            showMaxButton: !atMaxAmountInput,\n            currency: currencies[Field.INPUT],\n            onUserInput: handleTypeInput,\n            onMax: handleMaxInput,\n            onCurrencySelect: handleInputSelect,\n            otherCurrency: currencies[Field.OUTPUT],\n            id: \"swap-currency-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(AutoColumn, {\n            justify: \"space-between\",\n            children: /*#__PURE__*/_jsxDEV(AutoRow, {\n              justify: isExpertMode ? \"space-between\" : \"center\",\n              style: {\n                padding: \"0 1rem\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(ArrowWrapper, {\n                clickable: true,\n                children: /*#__PURE__*/_jsxDEV(ArrowDown, {\n                  size: \"16\",\n                  onClick: () => {\n                    setApprovalSubmitted(false); // reset 2 step UI for approvals\n\n                    onSwitchTokens();\n                  },\n                  color: currencies[Field.INPUT] && currencies[Field.OUTPUT] ? theme.primary1 : theme.text2\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 439,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 438,\n                columnNumber: 17\n              }, this), recipient === null && !showWrap && isExpertMode ? /*#__PURE__*/_jsxDEV(LinkStyledButton, {\n                id: \"add-recipient-button\",\n                onClick: () => onChangeRecipient(\"\"),\n                children: \"+ Add a send (optional)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 453,\n                columnNumber: 19\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 434,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CurrencyInputPanel, {\n            value: formattedAmounts[Field.OUTPUT],\n            onUserInput: handleTypeOutput,\n            label: independentField === Field.INPUT && !showWrap && trade ? \"To (estimated)\" : \"To\",\n            showMaxButton: false,\n            currency: currencies[Field.OUTPUT],\n            onCurrencySelect: handleOutputSelect,\n            otherCurrency: currencies[Field.INPUT],\n            id: \"swap-currency-output\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 13\n          }, this), recipient !== null && !showWrap ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(AutoRow, {\n              justify: \"space-between\",\n              style: {\n                padding: \"0 1rem\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(ArrowWrapper, {\n                clickable: false,\n                children: /*#__PURE__*/_jsxDEV(ArrowDown, {\n                  size: \"16\",\n                  color: theme.text2\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 481,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 480,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(LinkStyledButton, {\n                id: \"remove-recipient-button\",\n                onClick: () => onChangeRecipient(null),\n                children: \"- Remove send\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 483,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 479,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(AddressInputPanel, {\n              id: \"recipient\",\n              value: recipient,\n              onChange: onChangeRecipient\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 490,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true) : null, showWrap ? null : /*#__PURE__*/_jsxDEV(Card, {\n            padding: showWrap ? \".25rem 1rem 0 1rem\" : \"0px\",\n            borderRadius: \"20px\",\n            children: /*#__PURE__*/_jsxDEV(AutoColumn, {\n              gap: \"8px\",\n              style: {\n                padding: \"0 16px\"\n              },\n              children: [Boolean(trade) && /*#__PURE__*/_jsxDEV(RowBetween, {\n                align: \"center\",\n                children: [/*#__PURE__*/_jsxDEV(Text, {\n                  fontWeight: 500,\n                  fontSize: 14,\n                  color: theme.text2,\n                  children: \"Price\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 506,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TradePrice, {\n                  price: trade === null || trade === void 0 ? void 0 : trade.executionPrice,\n                  showInverted: showInverted,\n                  setShowInverted: setShowInverted\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 509,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 505,\n                columnNumber: 21\n              }, this), allowedSlippage !== INITIAL_ALLOWED_SLIPPAGE && /*#__PURE__*/_jsxDEV(RowBetween, {\n                align: \"center\",\n                children: [/*#__PURE__*/_jsxDEV(ClickableText, {\n                  fontWeight: 500,\n                  fontSize: 14,\n                  color: theme.text2,\n                  onClick: toggleSettings,\n                  children: \"Slippage Tolerance\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 518,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(ClickableText, {\n                  fontWeight: 500,\n                  fontSize: 14,\n                  color: theme.text2,\n                  onClick: toggleSettings,\n                  children: [allowedSlippage / 100, \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 526,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 517,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 503,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 499,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(BottomGrouping, {\n          children: [!account ? /*#__PURE__*/_jsxDEV(ButtonLight, {\n            onClick: toggleWalletModal,\n            children: \"Connect Wallet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 542,\n            columnNumber: 15\n          }, this) : noRoute && userHasSpecifiedInputOutput ? /*#__PURE__*/_jsxDEV(GreyCard, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(TYPE.main, {\n              mb: \"4px\",\n              children: \"Insufficient liquidity for this trade.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 547,\n              columnNumber: 17\n            }, this), singleHopOnly && /*#__PURE__*/_jsxDEV(TYPE.main, {\n              mb: \"4px\",\n              children: \"Try enabling multi-hop trades.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 551,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 546,\n            columnNumber: 15\n          }, this) : showApproveFlow ? /*#__PURE__*/_jsxDEV(RowBetween, {\n            children: [/*#__PURE__*/_jsxDEV(ButtonConfirmed, {\n              onClick: approveCallback,\n              disabled: approval !== ApprovalState.NOT_APPROVED || approvalSubmitted,\n              width: \"48%\",\n              altDisabledStyle: approval === ApprovalState.PENDING // show solid button while waiting\n              ,\n              confirmed: approval === ApprovalState.APPROVED,\n              children: approval === ApprovalState.PENDING ? /*#__PURE__*/_jsxDEV(AutoRow, {\n                gap: \"6px\",\n                justify: \"center\",\n                children: [\"Approving \", /*#__PURE__*/_jsxDEV(Loader, {\n                  stroke: \"white\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 567,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 566,\n                columnNumber: 21\n              }, this) : approvalSubmitted && approval === ApprovalState.APPROVED ? \"Approved\" : \"Approve \" + ((_currencies$Field$INP = currencies[Field.INPUT]) === null || _currencies$Field$INP === void 0 ? void 0 : _currencies$Field$INP.symbol)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 556,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(ButtonError, {\n              onClick: () => {\n                if (isExpertMode) {\n                  handleSwap();\n                } else {\n                  setSwapState({\n                    tradeToConfirm: trade,\n                    attemptingTxn: false,\n                    swapErrorMessage: undefined,\n                    showConfirm: true,\n                    txHash: undefined\n                  });\n                }\n              },\n              width: \"48%\",\n              id: \"swap-button\",\n              disabled: !isValid || approval !== ApprovalState.APPROVED || priceImpactSeverity > 3 && !isExpertMode,\n              error: isValid && priceImpactSeverity > 2,\n              children: /*#__PURE__*/_jsxDEV(Text, {\n                fontSize: 16,\n                fontWeight: 500,\n                children: priceImpactSeverity > 3 && !isExpertMode ? `Price Impact High` : `Swap${priceImpactSeverity > 2 ? \" Anyway\" : \"\"}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 599,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 576,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 555,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(ButtonError, {\n            onClick: () => {\n              if (isExpertMode) {\n                handleSwap();\n              } else {\n                setSwapState({\n                  tradeToConfirm: trade,\n                  attemptingTxn: false,\n                  swapErrorMessage: undefined,\n                  showConfirm: true,\n                  txHash: undefined\n                });\n              }\n            },\n            id: \"swap-button\",\n            disabled: !isValid || priceImpactSeverity > 3 && !isExpertMode || !!swapCallbackError,\n            error: isValid && priceImpactSeverity > 2 && !swapCallbackError,\n            children: /*#__PURE__*/_jsxDEV(Text, {\n              fontSize: 20,\n              fontWeight: 500,\n              children: swapInputError ? swapInputError : priceImpactSeverity > 3 && !isExpertMode ? `Price Impact Too High` : `Swap${priceImpactSeverity > 2 ? \" Anyway\" : \"\"}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 629,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 607,\n            columnNumber: 15\n          }, this), showApproveFlow && /*#__PURE__*/_jsxDEV(Column, {\n            style: {\n              marginTop: \"1rem\"\n            },\n            children: /*#__PURE__*/_jsxDEV(ProgressSteps, {\n              steps: [approval === ApprovalState.APPROVED]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 640,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 639,\n            columnNumber: 15\n          }, this), isExpertMode && swapErrorMessage ? /*#__PURE__*/_jsxDEV(SwapCallbackError, {\n            error: swapErrorMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 644,\n            columnNumber: 15\n          }, this) : null, betterTradeLinkV2 && toggledVersion === Version.v1 ? /*#__PURE__*/_jsxDEV(BetterTradeLink, {\n            version: betterTradeLinkV2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 647,\n            columnNumber: 15\n          }, this) : toggledVersion !== DEFAULT_VERSION && defaultTrade ? /*#__PURE__*/_jsxDEV(DefaultVersionLink, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 649,\n            columnNumber: 15\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UnsupportedCurrencyFooter, {\n      show: swapIsUnsupported,\n      currencies: [currencies.INPUT, currencies.OUTPUT]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 655,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Swap, \"S/dnhrBvZWlkgfR31MEGtWZ4Djc=\", true, function () {\n  return [useDefaultsFromURLSearch, useCurrency, useCurrency, useQuery, useActiveWeb3React, useWalletModalToggle, useToggleSettingsMenu, useExpertModeManager, useUserSlippageTolerance, useSwapState, useDerivedSwapInfo, useWrapCallback, useENSAddress, useToggledVersion, useSwapActionHandlers, useApproveCallbackFromTrade, useSwapCallback, useUserSingleHopOnly];\n});\n\n_c = Swap;\n\nvar _c;\n\n$RefreshReg$(_c, \"Swap\");","map":{"version":3,"sources":["/Users/chichke/Documents/Work/Freelance/swap-project/src/pages/Swap/index.tsx"],"names":["JSBI","React","useCallback","useContext","useEffect","useState","ArrowDown","ReactGA","Text","ThemeContext","AddressInputPanel","ButtonError","ButtonLight","ButtonConfirmed","Card","GreyCard","Column","AutoColumn","ConfirmSwapModal","CurrencyInputPanel","SwapPoolTabs","AutoRow","RowBetween","BetterTradeLink","DefaultVersionLink","confirmPriceImpactWithoutFee","ArrowWrapper","BottomGrouping","SwapCallbackError","Wrapper","TradePrice","TokenWarningModal","ProgressSteps","SwapHeader","INITIAL_ALLOWED_SLIPPAGE","getTradeVersion","useActiveWeb3React","useCurrency","ApprovalState","useApproveCallbackFromTrade","useENSAddress","useSwapCallback","useToggledVersion","DEFAULT_VERSION","Version","useWrapCallback","WrapType","useToggleSettingsMenu","useWalletModalToggle","Field","useDefaultsFromURLSearch","useDerivedSwapInfo","useSwapActionHandlers","useSwapState","useExpertModeManager","useUserSlippageTolerance","useUserSingleHopOnly","LinkStyledButton","TYPE","maxAmountSpend","computeTradePriceBreakdown","warningSeverity","AppBody","ClickableText","Loader","UnsupportedCurrencyFooter","isTradeBetter","useQuery","getTokenList","Swap","loadedUrlParams","loadedInputCurrency","loadedOutputCurrency","inputCurrencyId","outputCurrencyId","handleConfirmTokenWarning","defaultTokens","account","theme","toggleWalletModal","toggleSettings","isExpertMode","allowedSlippage","independentField","typedValue","recipient","v1Trade","v2Trade","currencyBalances","parsedAmount","currencies","inputError","swapInputError","wrapType","execute","onWrap","wrapInputError","INPUT","OUTPUT","showWrap","NOT_APPLICABLE","address","recipientAddress","toggledVersion","tradesByVersion","v1","v2","trade","undefined","defaultTrade","betterTradeLinkV2","parsedAmounts","inputAmount","outputAmount","onSwitchTokens","onCurrencySelection","onUserInput","onChangeRecipient","isValid","dependentField","handleTypeInput","value","handleTypeOutput","showConfirm","tradeToConfirm","swapErrorMessage","attemptingTxn","txHash","setSwapState","formattedAmounts","toExact","toSignificant","route","userHasSpecifiedInputOutput","Boolean","greaterThan","BigInt","noRoute","approval","approveCallback","approvalSubmitted","setApprovalSubmitted","PENDING","maxAmountInput","atMaxAmountInput","equalTo","callback","swapCallback","error","swapCallbackError","priceImpactWithoutFee","singleHopOnly","handleSwap","then","hash","event","category","action","label","currency","symbol","join","catch","message","showInverted","setShowInverted","priceImpactSeverity","showApproveFlow","NOT_APPROVED","APPROVED","handleConfirmDismiss","handleAcceptChanges","handleInputSelect","inputCurrency","handleMaxInput","handleOutputSelect","outputCurrency","swapIsUnsupported","useIsTransactionUnsupported","isLoading","importTokensNotInDefault","length","dismissTokenWarning","padding","primary1","text2","executionPrice","textAlign","marginTop"],"mappings":"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","sourcesContent":["import { CurrencyAmount, JSBI, Token, Trade } from \"@uniswap/sdk\";\nimport React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { ArrowDown } from \"react-feather\";\nimport ReactGA from \"react-ga\";\nimport { Text } from \"rebass\";\nimport { ThemeContext } from \"styled-components\";\nimport AddressInputPanel from \"../../components/AddressInputPanel\";\nimport {\n  ButtonError,\n  ButtonLight,\n  ButtonPrimary,\n  ButtonConfirmed,\n} from \"../../components/Button\";\nimport Card, { GreyCard } from \"../../components/Card\";\nimport Column, { AutoColumn } from \"../../components/Column\";\nimport ConfirmSwapModal from \"../../components/swap/ConfirmSwapModal\";\nimport CurrencyInputPanel from \"../../components/CurrencyInputPanel\";\nimport { SwapPoolTabs } from \"../../components/NavigationTabs\";\nimport { AutoRow, RowBetween } from \"../../components/Row\";\nimport AdvancedSwapDetailsDropdown from \"../../components/swap/AdvancedSwapDetailsDropdown\";\nimport BetterTradeLink, {\n  DefaultVersionLink,\n} from \"../../components/swap/BetterTradeLink\";\nimport confirmPriceImpactWithoutFee from \"../../components/swap/confirmPriceImpactWithoutFee\";\nimport {\n  ArrowWrapper,\n  BottomGrouping,\n  SwapCallbackError,\n  Wrapper,\n} from \"../../components/swap/styleds\";\nimport TradePrice from \"../../components/swap/TradePrice\";\nimport TokenWarningModal from \"../../components/TokenWarningModal\";\nimport ProgressSteps from \"../../components/ProgressSteps\";\nimport SwapHeader from \"../../components/swap/SwapHeader\";\n\nimport { INITIAL_ALLOWED_SLIPPAGE } from \"../../constants\";\nimport { getTradeVersion } from \"../../data/V1\";\nimport { useActiveWeb3React } from \"../../hooks\";\nimport { useCurrency } from \"../../hooks/Tokens\";\nimport {\n  ApprovalState,\n  useApproveCallbackFromTrade,\n} from \"../../hooks/useApproveCallback\";\nimport useENSAddress from \"../../hooks/useENSAddress\";\nimport { useSwapCallback } from \"../../hooks/useSwapCallback\";\nimport useToggledVersion, {\n  DEFAULT_VERSION,\n  Version,\n} from \"../../hooks/useToggledVersion\";\nimport useWrapCallback, { WrapType } from \"../../hooks/useWrapCallback\";\nimport {\n  useToggleSettingsMenu,\n  useWalletModalToggle,\n} from \"../../state/application/hooks\";\nimport { Field } from \"../../state/swap/actions\";\nimport {\n  useDefaultsFromURLSearch,\n  useDerivedSwapInfo,\n  useSwapActionHandlers,\n  useSwapState,\n} from \"../../state/swap/hooks\";\nimport {\n  useExpertModeManager,\n  useUserSlippageTolerance,\n  useUserSingleHopOnly,\n} from \"../../state/user/hooks\";\nimport { LinkStyledButton, TYPE } from \"../../theme\";\nimport { maxAmountSpend } from \"../../utils/maxAmountSpend\";\nimport {\n  computeTradePriceBreakdown,\n  warningSeverity,\n} from \"../../utils/prices\";\nimport AppBody from \"../AppBody\";\nimport { ClickableText } from \"../Pool/styleds\";\nimport Loader from \"../../components/Loader\";\nimport UnsupportedCurrencyFooter from \"components/swap/UnsupportedCurrencyFooter\";\nimport { isTradeBetter } from \"utils/trades\";\nimport { useQuery } from \"react-query\";\nimport getTokenList from \"utils/getTokenList\";\n\nexport default function Swap() {\n  const loadedUrlParams = useDefaultsFromURLSearch();\n\n  // token warning stuff\n  const [loadedInputCurrency, loadedOutputCurrency] = [\n    useCurrency(loadedUrlParams?.inputCurrencyId),\n    useCurrency(loadedUrlParams?.outputCurrencyId),\n  ];\n\n  const handleConfirmTokenWarning = useCallback(() => {}, []);\n\n  // dismiss warning if all imported tokens are in active lists\n  const defaultTokens = useQuery(\"tokenList\", getTokenList);\n\n  const { account } = useActiveWeb3React();\n  const theme = useContext(ThemeContext);\n\n  // toggle wallet when disconnected\n  const toggleWalletModal = useWalletModalToggle();\n\n  // for expert mode\n  const toggleSettings = useToggleSettingsMenu();\n  const [isExpertMode] = useExpertModeManager();\n\n  // get custom setting values for user\n  const [allowedSlippage] = useUserSlippageTolerance();\n\n  // swap state\n  const { independentField, typedValue, recipient } = useSwapState();\n  const {\n    v1Trade,\n    v2Trade,\n    currencyBalances,\n    parsedAmount,\n    currencies,\n    inputError: swapInputError,\n  } = useDerivedSwapInfo();\n  const {\n    wrapType,\n    execute: onWrap,\n    inputError: wrapInputError,\n  } = useWrapCallback(\n    currencies[Field.INPUT],\n    currencies[Field.OUTPUT],\n    typedValue\n  );\n  const showWrap: boolean = wrapType !== WrapType.NOT_APPLICABLE;\n  const { address: recipientAddress } = useENSAddress(recipient);\n  const toggledVersion = useToggledVersion();\n  const tradesByVersion = {\n    [Version.v1]: v1Trade,\n    [Version.v2]: v2Trade,\n  };\n  const trade = showWrap ? undefined : tradesByVersion[toggledVersion];\n  const defaultTrade = showWrap ? undefined : tradesByVersion[DEFAULT_VERSION];\n\n  const betterTradeLinkV2: Version | undefined =\n    toggledVersion === Version.v1 && isTradeBetter(v1Trade, v2Trade)\n      ? Version.v2\n      : undefined;\n\n  const parsedAmounts = showWrap\n    ? {\n        [Field.INPUT]: parsedAmount,\n        [Field.OUTPUT]: parsedAmount,\n      }\n    : {\n        [Field.INPUT]:\n          independentField === Field.INPUT ? parsedAmount : trade?.inputAmount,\n        [Field.OUTPUT]:\n          independentField === Field.OUTPUT\n            ? parsedAmount\n            : trade?.outputAmount,\n      };\n\n  const {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient,\n  } = useSwapActionHandlers();\n  const isValid = !swapInputError;\n  const dependentField: Field =\n    independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT;\n\n  const handleTypeInput = useCallback(\n    (value: string) => {\n      onUserInput(Field.INPUT, value);\n    },\n    [onUserInput]\n  );\n  const handleTypeOutput = useCallback(\n    (value: string) => {\n      onUserInput(Field.OUTPUT, value);\n    },\n    [onUserInput]\n  );\n\n  // modal and loading\n  const [\n    { showConfirm, tradeToConfirm, swapErrorMessage, attemptingTxn, txHash },\n    setSwapState,\n  ] = useState<{\n    showConfirm: boolean;\n    tradeToConfirm: Trade | undefined;\n    attemptingTxn: boolean;\n    swapErrorMessage: string | undefined;\n    txHash: string | undefined;\n  }>({\n    showConfirm: false,\n    tradeToConfirm: undefined,\n    attemptingTxn: false,\n    swapErrorMessage: undefined,\n    txHash: undefined,\n  });\n\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: showWrap\n      ? parsedAmounts[independentField]?.toExact() ?? \"\"\n      : parsedAmounts[dependentField]?.toSignificant(6) ?? \"\",\n  };\n\n  const route = trade?.route;\n  const userHasSpecifiedInputOutput = Boolean(\n    currencies[Field.INPUT] &&\n      currencies[Field.OUTPUT] &&\n      parsedAmounts[independentField]?.greaterThan(JSBI.BigInt(0))\n  );\n  const noRoute = !route;\n\n  // check whether the user has approved the router on the input token\n  const [approval, approveCallback] = useApproveCallbackFromTrade(\n    trade,\n    allowedSlippage\n  );\n\n  // check if user has gone through approval process, used to show two step buttons, reset on token change\n  const [approvalSubmitted, setApprovalSubmitted] = useState<boolean>(false);\n\n  // mark when a user has submitted an approval, reset onTokenSelection for input field\n  useEffect(() => {\n    if (approval === ApprovalState.PENDING) {\n      setApprovalSubmitted(true);\n    }\n  }, [approval, approvalSubmitted]);\n\n  const maxAmountInput: CurrencyAmount | undefined = maxAmountSpend(\n    currencyBalances[Field.INPUT]\n  );\n  const atMaxAmountInput = Boolean(\n    maxAmountInput && parsedAmounts[Field.INPUT]?.equalTo(maxAmountInput)\n  );\n\n  // the callback to execute the swap\n  const { callback: swapCallback, error: swapCallbackError } = useSwapCallback(\n    trade,\n    allowedSlippage,\n    recipient\n  );\n\n  const { priceImpactWithoutFee } = computeTradePriceBreakdown(trade);\n\n  const [singleHopOnly] = useUserSingleHopOnly();\n\n  const handleSwap = useCallback(() => {\n    if (\n      priceImpactWithoutFee &&\n      !confirmPriceImpactWithoutFee(priceImpactWithoutFee)\n    ) {\n      return;\n    }\n    if (!swapCallback) {\n      return;\n    }\n    setSwapState({\n      attemptingTxn: true,\n      tradeToConfirm,\n      showConfirm,\n      swapErrorMessage: undefined,\n      txHash: undefined,\n    });\n    swapCallback()\n      .then((hash) => {\n        setSwapState({\n          attemptingTxn: false,\n          tradeToConfirm,\n          showConfirm,\n          swapErrorMessage: undefined,\n          txHash: hash,\n        });\n\n        ReactGA.event({\n          category: \"Swap\",\n          action:\n            recipient === null\n              ? \"Swap w/o Send\"\n              : (recipientAddress ?? recipient) === account\n              ? \"Swap w/o Send + recipient\"\n              : \"Swap w/ Send\",\n          label: [\n            trade?.inputAmount?.currency?.symbol,\n            trade?.outputAmount?.currency?.symbol,\n            getTradeVersion(trade),\n          ].join(\"/\"),\n        });\n\n        ReactGA.event({\n          category: \"Routing\",\n          action: singleHopOnly\n            ? \"Swap with multihop disabled\"\n            : \"Swap with multihop enabled\",\n        });\n      })\n      .catch((error) => {\n        setSwapState({\n          attemptingTxn: false,\n          tradeToConfirm,\n          showConfirm,\n          swapErrorMessage: error.message,\n          txHash: undefined,\n        });\n      });\n  }, [\n    priceImpactWithoutFee,\n    swapCallback,\n    tradeToConfirm,\n    showConfirm,\n    recipient,\n    recipientAddress,\n    account,\n    trade,\n    singleHopOnly,\n  ]);\n\n  // errors\n  const [showInverted, setShowInverted] = useState<boolean>(false);\n\n  // warnings on slippage\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee);\n\n  // show approve flow when: no error on inputs, not approved or pending, or approved in current session\n  // never show if price impact is above threshold in non expert mode\n  const showApproveFlow =\n    !swapInputError &&\n    (approval === ApprovalState.NOT_APPROVED ||\n      approval === ApprovalState.PENDING ||\n      (approvalSubmitted && approval === ApprovalState.APPROVED)) &&\n    !(priceImpactSeverity > 3 && !isExpertMode);\n\n  const handleConfirmDismiss = useCallback(() => {\n    setSwapState({\n      showConfirm: false,\n      tradeToConfirm,\n      attemptingTxn,\n      swapErrorMessage,\n      txHash,\n    });\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onUserInput(Field.INPUT, \"\");\n    }\n  }, [attemptingTxn, onUserInput, swapErrorMessage, tradeToConfirm, txHash]);\n\n  const handleAcceptChanges = useCallback(() => {\n    setSwapState({\n      tradeToConfirm: trade,\n      swapErrorMessage,\n      txHash,\n      attemptingTxn,\n      showConfirm,\n    });\n  }, [attemptingTxn, showConfirm, swapErrorMessage, trade, txHash]);\n\n  const handleInputSelect = useCallback(\n    (inputCurrency) => {\n      setApprovalSubmitted(false); // reset 2 step UI for approvals\n      onCurrencySelection(Field.INPUT, inputCurrency);\n    },\n    [onCurrencySelection]\n  );\n\n  const handleMaxInput = useCallback(() => {\n    maxAmountInput && onUserInput(Field.INPUT, maxAmountInput.toExact());\n  }, [maxAmountInput, onUserInput]);\n\n  const handleOutputSelect = useCallback(\n    (outputCurrency) => onCurrencySelection(Field.OUTPUT, outputCurrency),\n    [onCurrencySelection]\n  );\n\n  const swapIsUnsupported = useIsTransactionUnsupported(\n    currencies?.INPUT,\n    currencies?.OUTPUT\n  );\n\n  if (defaultTokens.isLoading) {\n    return (\n      <>\n        <AppBody>\n          <Loader stroke=\"white\" />\n        </AppBody>\n      </>\n    );\n  }\n  return (\n    <>\n      <TokenWarningModal\n        isOpen={importTokensNotInDefault.length > 0 && !dismissTokenWarning}\n        tokens={importTokensNotInDefault}\n        onConfirm={handleConfirmTokenWarning}\n      />\n      <SwapPoolTabs active={\"swap\"} />\n      <AppBody>\n        <SwapHeader />\n        <Wrapper id=\"swap-page\">\n          <ConfirmSwapModal\n            isOpen={showConfirm}\n            trade={trade}\n            originalTrade={tradeToConfirm}\n            onAcceptChanges={handleAcceptChanges}\n            attemptingTxn={attemptingTxn}\n            txHash={txHash}\n            recipient={recipient}\n            allowedSlippage={allowedSlippage}\n            onConfirm={handleSwap}\n            swapErrorMessage={swapErrorMessage}\n            onDismiss={handleConfirmDismiss}\n          />\n\n          <AutoColumn gap={\"md\"}>\n            <CurrencyInputPanel\n              label={\n                independentField === Field.OUTPUT && !showWrap && trade\n                  ? \"From (estimated)\"\n                  : \"From\"\n              }\n              value={formattedAmounts[Field.INPUT]}\n              showMaxButton={!atMaxAmountInput}\n              currency={currencies[Field.INPUT]}\n              onUserInput={handleTypeInput}\n              onMax={handleMaxInput}\n              onCurrencySelect={handleInputSelect}\n              otherCurrency={currencies[Field.OUTPUT]}\n              id=\"swap-currency-input\"\n            />\n            <AutoColumn justify=\"space-between\">\n              <AutoRow\n                justify={isExpertMode ? \"space-between\" : \"center\"}\n                style={{ padding: \"0 1rem\" }}\n              >\n                <ArrowWrapper clickable>\n                  <ArrowDown\n                    size=\"16\"\n                    onClick={() => {\n                      setApprovalSubmitted(false); // reset 2 step UI for approvals\n                      onSwitchTokens();\n                    }}\n                    color={\n                      currencies[Field.INPUT] && currencies[Field.OUTPUT]\n                        ? theme.primary1\n                        : theme.text2\n                    }\n                  />\n                </ArrowWrapper>\n                {recipient === null && !showWrap && isExpertMode ? (\n                  <LinkStyledButton\n                    id=\"add-recipient-button\"\n                    onClick={() => onChangeRecipient(\"\")}\n                  >\n                    + Add a send (optional)\n                  </LinkStyledButton>\n                ) : null}\n              </AutoRow>\n            </AutoColumn>\n            <CurrencyInputPanel\n              value={formattedAmounts[Field.OUTPUT]}\n              onUserInput={handleTypeOutput}\n              label={\n                independentField === Field.INPUT && !showWrap && trade\n                  ? \"To (estimated)\"\n                  : \"To\"\n              }\n              showMaxButton={false}\n              currency={currencies[Field.OUTPUT]}\n              onCurrencySelect={handleOutputSelect}\n              otherCurrency={currencies[Field.INPUT]}\n              id=\"swap-currency-output\"\n            />\n\n            {recipient !== null && !showWrap ? (\n              <>\n                <AutoRow justify=\"space-between\" style={{ padding: \"0 1rem\" }}>\n                  <ArrowWrapper clickable={false}>\n                    <ArrowDown size=\"16\" color={theme.text2} />\n                  </ArrowWrapper>\n                  <LinkStyledButton\n                    id=\"remove-recipient-button\"\n                    onClick={() => onChangeRecipient(null)}\n                  >\n                    - Remove send\n                  </LinkStyledButton>\n                </AutoRow>\n                <AddressInputPanel\n                  id=\"recipient\"\n                  value={recipient}\n                  onChange={onChangeRecipient}\n                />\n              </>\n            ) : null}\n\n            {showWrap ? null : (\n              <Card\n                padding={showWrap ? \".25rem 1rem 0 1rem\" : \"0px\"}\n                borderRadius={\"20px\"}\n              >\n                <AutoColumn gap=\"8px\" style={{ padding: \"0 16px\" }}>\n                  {Boolean(trade) && (\n                    <RowBetween align=\"center\">\n                      <Text fontWeight={500} fontSize={14} color={theme.text2}>\n                        Price\n                      </Text>\n                      <TradePrice\n                        price={trade?.executionPrice}\n                        showInverted={showInverted}\n                        setShowInverted={setShowInverted}\n                      />\n                    </RowBetween>\n                  )}\n                  {allowedSlippage !== INITIAL_ALLOWED_SLIPPAGE && (\n                    <RowBetween align=\"center\">\n                      <ClickableText\n                        fontWeight={500}\n                        fontSize={14}\n                        color={theme.text2}\n                        onClick={toggleSettings}\n                      >\n                        Slippage Tolerance\n                      </ClickableText>\n                      <ClickableText\n                        fontWeight={500}\n                        fontSize={14}\n                        color={theme.text2}\n                        onClick={toggleSettings}\n                      >\n                        {allowedSlippage / 100}%\n                      </ClickableText>\n                    </RowBetween>\n                  )}\n                </AutoColumn>\n              </Card>\n            )}\n          </AutoColumn>\n          <BottomGrouping>\n            {!account ? (\n              <ButtonLight onClick={toggleWalletModal}>\n                Connect Wallet\n              </ButtonLight>\n            ) : noRoute && userHasSpecifiedInputOutput ? (\n              <GreyCard style={{ textAlign: \"center\" }}>\n                <TYPE.main mb=\"4px\">\n                  Insufficient liquidity for this trade.\n                </TYPE.main>\n                {singleHopOnly && (\n                  <TYPE.main mb=\"4px\">Try enabling multi-hop trades.</TYPE.main>\n                )}\n              </GreyCard>\n            ) : showApproveFlow ? (\n              <RowBetween>\n                <ButtonConfirmed\n                  onClick={approveCallback}\n                  disabled={\n                    approval !== ApprovalState.NOT_APPROVED || approvalSubmitted\n                  }\n                  width=\"48%\"\n                  altDisabledStyle={approval === ApprovalState.PENDING} // show solid button while waiting\n                  confirmed={approval === ApprovalState.APPROVED}\n                >\n                  {approval === ApprovalState.PENDING ? (\n                    <AutoRow gap=\"6px\" justify=\"center\">\n                      Approving <Loader stroke=\"white\" />\n                    </AutoRow>\n                  ) : approvalSubmitted &&\n                    approval === ApprovalState.APPROVED ? (\n                    \"Approved\"\n                  ) : (\n                    \"Approve \" + currencies[Field.INPUT]?.symbol\n                  )}\n                </ButtonConfirmed>\n                <ButtonError\n                  onClick={() => {\n                    if (isExpertMode) {\n                      handleSwap();\n                    } else {\n                      setSwapState({\n                        tradeToConfirm: trade,\n                        attemptingTxn: false,\n                        swapErrorMessage: undefined,\n                        showConfirm: true,\n                        txHash: undefined,\n                      });\n                    }\n                  }}\n                  width=\"48%\"\n                  id=\"swap-button\"\n                  disabled={\n                    !isValid ||\n                    approval !== ApprovalState.APPROVED ||\n                    (priceImpactSeverity > 3 && !isExpertMode)\n                  }\n                  error={isValid && priceImpactSeverity > 2}\n                >\n                  <Text fontSize={16} fontWeight={500}>\n                    {priceImpactSeverity > 3 && !isExpertMode\n                      ? `Price Impact High`\n                      : `Swap${priceImpactSeverity > 2 ? \" Anyway\" : \"\"}`}\n                  </Text>\n                </ButtonError>\n              </RowBetween>\n            ) : (\n              <ButtonError\n                onClick={() => {\n                  if (isExpertMode) {\n                    handleSwap();\n                  } else {\n                    setSwapState({\n                      tradeToConfirm: trade,\n                      attemptingTxn: false,\n                      swapErrorMessage: undefined,\n                      showConfirm: true,\n                      txHash: undefined,\n                    });\n                  }\n                }}\n                id=\"swap-button\"\n                disabled={\n                  !isValid ||\n                  (priceImpactSeverity > 3 && !isExpertMode) ||\n                  !!swapCallbackError\n                }\n                error={isValid && priceImpactSeverity > 2 && !swapCallbackError}\n              >\n                <Text fontSize={20} fontWeight={500}>\n                  {swapInputError\n                    ? swapInputError\n                    : priceImpactSeverity > 3 && !isExpertMode\n                    ? `Price Impact Too High`\n                    : `Swap${priceImpactSeverity > 2 ? \" Anyway\" : \"\"}`}\n                </Text>\n              </ButtonError>\n            )}\n            {showApproveFlow && (\n              <Column style={{ marginTop: \"1rem\" }}>\n                <ProgressSteps steps={[approval === ApprovalState.APPROVED]} />\n              </Column>\n            )}\n            {isExpertMode && swapErrorMessage ? (\n              <SwapCallbackError error={swapErrorMessage} />\n            ) : null}\n            {betterTradeLinkV2 && toggledVersion === Version.v1 ? (\n              <BetterTradeLink version={betterTradeLinkV2} />\n            ) : toggledVersion !== DEFAULT_VERSION && defaultTrade ? (\n              <DefaultVersionLink />\n            ) : null}\n          </BottomGrouping>\n        </Wrapper>\n      </AppBody>\n      {\n        <UnsupportedCurrencyFooter\n          show={swapIsUnsupported}\n          currencies={[currencies.INPUT, currencies.OUTPUT]}\n        />\n      }\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}