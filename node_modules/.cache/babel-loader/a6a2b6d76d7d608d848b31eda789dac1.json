{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\nimport { useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useActiveWeb3React } from '../../hooks';\nimport { addTransaction } from './actions';\n// helper that can take a ethers library transaction response and add it to the list of transactions\nexport function useTransactionAdder() {\n  _s();\n\n  const {\n    chainId,\n    account\n  } = useActiveWeb3React();\n  const dispatch = useDispatch();\n  return useCallback((response, {\n    summary,\n    approval,\n    claim\n  } = {}) => {\n    if (!account) return;\n    if (!chainId) return;\n    const {\n      hash\n    } = response;\n\n    if (!hash) {\n      throw Error('No transaction hash found.');\n    }\n\n    dispatch(addTransaction({\n      hash,\n      from: account,\n      chainId,\n      approval,\n      summary,\n      claim\n    }));\n  }, [dispatch, chainId, account]);\n} // returns all the transactions for the current chain\n\n_s(useTransactionAdder, \"MEh+TAztv1BWq5c2lTL2SEy/Uq8=\", false, function () {\n  return [useActiveWeb3React, useDispatch];\n});\n\nexport function useAllTransactions() {\n  _s2();\n\n  var _state$chainId;\n\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const state = useSelector(state => state.transactions);\n  return chainId ? (_state$chainId = state[chainId]) !== null && _state$chainId !== void 0 ? _state$chainId : {} : {};\n}\n\n_s2(useAllTransactions, \"3FhVoM2yUUuTIyL07ycVqdy9Zqs=\", false, function () {\n  return [useActiveWeb3React, useSelector];\n});\n\nexport function useIsTransactionPending(transactionHash) {\n  _s3();\n\n  const transactions = useAllTransactions();\n  if (!transactionHash || !transactions[transactionHash]) return false;\n  return !transactions[transactionHash].receipt;\n}\n/**\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\n * @param tx to check for recency\n */\n\n_s3(useIsTransactionPending, \"hqz1TRfIl9I1+vK9TqtScGR9Kdg=\", false, function () {\n  return [useAllTransactions];\n});\n\nexport function isTransactionRecent(tx) {\n  return new Date().getTime() - tx.addedTime < 86400000;\n} // returns whether a token has a pending approval transaction\n\nexport function useHasPendingApproval(tokenAddress, spender) {\n  _s4();\n\n  const allTransactions = useAllTransactions();\n  return useMemo(() => typeof tokenAddress === 'string' && typeof spender === 'string' && Object.keys(allTransactions).some(hash => {\n    const tx = allTransactions[hash];\n    if (!tx) return false;\n\n    if (tx.receipt) {\n      return false;\n    } else {\n      const approval = tx.approval;\n      if (!approval) return false;\n      return approval.spender === spender && approval.tokenAddress === tokenAddress && isTransactionRecent(tx);\n    }\n  }), [allTransactions, spender, tokenAddress]);\n} // watch for submissions to claim\n// return null if not done loading, return undefined if not found\n\n_s4(useHasPendingApproval, \"VezVe/KwFqNDaRAkqywKb3KU5lg=\", false, function () {\n  return [useAllTransactions];\n});\n\nexport function useUserHasSubmittedClaim(account) {\n  _s5();\n\n  const allTransactions = useAllTransactions(); // get the txn if it has been submitted\n\n  const claimTxn = useMemo(() => {\n    const txnIndex = Object.keys(allTransactions).find(hash => {\n      const tx = allTransactions[hash];\n      return tx.claim && tx.claim.recipient === account;\n    });\n    return txnIndex && allTransactions[txnIndex] ? allTransactions[txnIndex] : undefined;\n  }, [account, allTransactions]);\n  return {\n    claimSubmitted: Boolean(claimTxn),\n    claimTxn\n  };\n}\n\n_s5(useUserHasSubmittedClaim, \"VV0KKHrbuq348q6dk6Qn9MylTW8=\", false, function () {\n  return [useAllTransactions];\n});","map":{"version":3,"sources":["/Users/chichke/Documents/Work/Freelance/swap-project/src/state/transactions/hooks.tsx"],"names":["useCallback","useMemo","useDispatch","useSelector","useActiveWeb3React","addTransaction","useTransactionAdder","chainId","account","dispatch","response","summary","approval","claim","hash","Error","from","useAllTransactions","state","transactions","useIsTransactionPending","transactionHash","receipt","isTransactionRecent","tx","Date","getTime","addedTime","useHasPendingApproval","tokenAddress","spender","allTransactions","Object","keys","some","useUserHasSubmittedClaim","claimTxn","txnIndex","find","recipient","undefined","claimSubmitted","Boolean"],"mappings":"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","sourcesContent":["import { TransactionResponse } from '@ethersproject/providers'\nimport { useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { useActiveWeb3React } from '../../hooks'\nimport { AppDispatch, AppState } from '../index'\nimport { addTransaction } from './actions'\nimport { TransactionDetails } from './reducer'\n\n// helper that can take a ethers library transaction response and add it to the list of transactions\nexport function useTransactionAdder(): (\n  response: TransactionResponse,\n  customData?: { summary?: string; approval?: { tokenAddress: string; spender: string }; claim?: { recipient: string } }\n) => void {\n  const { chainId, account } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n\n  return useCallback(\n    (\n      response: TransactionResponse,\n      {\n        summary,\n        approval,\n        claim\n      }: { summary?: string; claim?: { recipient: string }; approval?: { tokenAddress: string; spender: string } } = {}\n    ) => {\n      if (!account) return\n      if (!chainId) return\n\n      const { hash } = response\n      if (!hash) {\n        throw Error('No transaction hash found.')\n      }\n      dispatch(addTransaction({ hash, from: account, chainId, approval, summary, claim }))\n    },\n    [dispatch, chainId, account]\n  )\n}\n\n// returns all the transactions for the current chain\nexport function useAllTransactions(): { [txHash: string]: TransactionDetails } {\n  const { chainId } = useActiveWeb3React()\n\n  const state = useSelector<AppState, AppState['transactions']>(state => state.transactions)\n\n  return chainId ? state[chainId] ?? {} : {}\n}\n\nexport function useIsTransactionPending(transactionHash?: string): boolean {\n  const transactions = useAllTransactions()\n\n  if (!transactionHash || !transactions[transactionHash]) return false\n\n  return !transactions[transactionHash].receipt\n}\n\n/**\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\n * @param tx to check for recency\n */\nexport function isTransactionRecent(tx: TransactionDetails): boolean {\n  return new Date().getTime() - tx.addedTime < 86_400_000\n}\n\n// returns whether a token has a pending approval transaction\nexport function useHasPendingApproval(tokenAddress: string | undefined, spender: string | undefined): boolean {\n  const allTransactions = useAllTransactions()\n  return useMemo(\n    () =>\n      typeof tokenAddress === 'string' &&\n      typeof spender === 'string' &&\n      Object.keys(allTransactions).some(hash => {\n        const tx = allTransactions[hash]\n        if (!tx) return false\n        if (tx.receipt) {\n          return false\n        } else {\n          const approval = tx.approval\n          if (!approval) return false\n          return approval.spender === spender && approval.tokenAddress === tokenAddress && isTransactionRecent(tx)\n        }\n      }),\n    [allTransactions, spender, tokenAddress]\n  )\n}\n\n// watch for submissions to claim\n// return null if not done loading, return undefined if not found\nexport function useUserHasSubmittedClaim(\n  account?: string\n): { claimSubmitted: boolean; claimTxn: TransactionDetails | undefined } {\n  const allTransactions = useAllTransactions()\n\n  // get the txn if it has been submitted\n  const claimTxn = useMemo(() => {\n    const txnIndex = Object.keys(allTransactions).find(hash => {\n      const tx = allTransactions[hash]\n      return tx.claim && tx.claim.recipient === account\n    })\n    return txnIndex && allTransactions[txnIndex] ? allTransactions[txnIndex] : undefined\n  }, [account, allTransactions])\n\n  return { claimSubmitted: Boolean(claimTxn), claimTxn }\n}\n"]},"metadata":{},"sourceType":"module"}