{"ast":null,"code":"import { ChainId } from \"@uniswap/sdk\";\nimport { FortmaticConnector as FortmaticConnectorCore } from \"@web3-react/fortmatic-connector\";\nexport const OVERLAY_READY = \"OVERLAY_READY\";\nconst CHAIN_ID_NETWORK_ARGUMENT = {\n  [ChainId.MAINNET]: undefined,\n  [ChainId.ROPSTEN]: \"ropsten\",\n  [ChainId.RINKEBY]: \"rinkeby\",\n  [ChainId.KOVAN]: \"kovan\"\n};\nexport class FortmaticConnector extends FortmaticConnectorCore {\n  async activate() {\n    if (!this.fortmatic) {\n      const {\n        apiKey,\n        chainId\n      } = this;\n\n      if (chainId in CHAIN_ID_NETWORK_ARGUMENT) {\n        this.fortmatic = new Fortmatic(apiKey, CHAIN_ID_NETWORK_ARGUMENT[chainId]);\n      } else {\n        throw new Error(`Unsupported network ID: ${chainId}`);\n      }\n    }\n\n    const provider = this.fortmatic.getProvider();\n    const pollForOverlayReady = new Promise(resolve => {\n      const interval = setInterval(() => {\n        if (provider.overlayReady) {\n          clearInterval(interval);\n          this.emit(OVERLAY_READY);\n          resolve();\n        }\n      }, 200);\n    });\n    const [account] = await Promise.all([provider.enable().then(accounts => accounts[0]), pollForOverlayReady]);\n    return {\n      provider: this.fortmatic.getProvider(),\n      chainId: this.chainId,\n      account\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/chichke/Documents/Work/Freelance/swap-project/src/connectors/Fortmatic.ts"],"names":["ChainId","FortmaticConnector","FortmaticConnectorCore","OVERLAY_READY","CHAIN_ID_NETWORK_ARGUMENT","MAINNET","undefined","ROPSTEN","RINKEBY","KOVAN","activate","fortmatic","apiKey","chainId","Fortmatic","Error","provider","getProvider","pollForOverlayReady","Promise","resolve","interval","setInterval","overlayReady","clearInterval","emit","account","all","enable","then","accounts"],"mappings":"AAAA,SAASA,OAAT,QAAwB,cAAxB;AACA,SAASC,kBAAkB,IAAIC,sBAA/B,QAA6D,iCAA7D;AAEA,OAAO,MAAMC,aAAa,GAAG,eAAtB;AAOP,MAAMC,yBAEL,GAAG;AACF,GAACJ,OAAO,CAACK,OAAT,GAAmBC,SADjB;AAEF,GAACN,OAAO,CAACO,OAAT,GAAmB,SAFjB;AAGF,GAACP,OAAO,CAACQ,OAAT,GAAmB,SAHjB;AAIF,GAACR,OAAO,CAACS,KAAT,GAAiB;AAJf,CAFJ;AASA,OAAO,MAAMR,kBAAN,SAAiCC,sBAAjC,CAAwD;AAC/C,QAARQ,QAAQ,GAAG;AACf,QAAI,CAAC,KAAKC,SAAV,EAAqB;AACnB,YAAM;AAAEC,QAAAA,MAAF;AAAUC,QAAAA;AAAV,UAAsB,IAA5B;;AACA,UAAIA,OAAO,IAAIT,yBAAf,EAA0C;AACxC,aAAKO,SAAL,GAAiB,IAAIG,SAAJ,CACfF,MADe,EAEfR,yBAAyB,CAACS,OAAD,CAFV,CAAjB;AAID,OALD,MAKO;AACL,cAAM,IAAIE,KAAJ,CAAW,2BAA0BF,OAAQ,EAA7C,CAAN;AACD;AACF;;AAED,UAAMG,QAAQ,GAAG,KAAKL,SAAL,CAAeM,WAAf,EAAjB;AAEA,UAAMC,mBAAmB,GAAG,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACnD,YAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjC,YAAIN,QAAQ,CAACO,YAAb,EAA2B;AACzBC,UAAAA,aAAa,CAACH,QAAD,CAAb;AACA,eAAKI,IAAL,CAAUtB,aAAV;AACAiB,UAAAA,OAAO;AACR;AACF,OAN2B,EAMzB,GANyB,CAA5B;AAOD,KAR2B,CAA5B;AAUA,UAAM,CAACM,OAAD,IAAY,MAAMP,OAAO,CAACQ,GAAR,CAAY,CAClCX,QAAQ,CAACY,MAAT,GAAkBC,IAAlB,CAAwBC,QAAD,IAAwBA,QAAQ,CAAC,CAAD,CAAvD,CADkC,EAElCZ,mBAFkC,CAAZ,CAAxB;AAKA,WAAO;AACLF,MAAAA,QAAQ,EAAE,KAAKL,SAAL,CAAeM,WAAf,EADL;AAELJ,MAAAA,OAAO,EAAG,IAAD,CAAcA,OAFlB;AAGLa,MAAAA;AAHK,KAAP;AAKD;;AApC4D","sourcesContent":["import { ChainId } from \"@uniswap/sdk\";\nimport { FortmaticConnector as FortmaticConnectorCore } from \"@web3-react/fortmatic-connector\";\nimport Formatic from \"fortmatic\";\nexport const OVERLAY_READY = \"OVERLAY_READY\";\n\ntype FormaticSupportedChains = Extract<\n  ChainId,\n  ChainId.MAINNET | ChainId.ROPSTEN | ChainId.RINKEBY | ChainId.KOVAN\n>;\n\nconst CHAIN_ID_NETWORK_ARGUMENT: {\n  readonly [chainId in FormaticSupportedChains]: string | undefined;\n} = {\n  [ChainId.MAINNET]: undefined,\n  [ChainId.ROPSTEN]: \"ropsten\",\n  [ChainId.RINKEBY]: \"rinkeby\",\n  [ChainId.KOVAN]: \"kovan\",\n};\n\nexport class FortmaticConnector extends FortmaticConnectorCore {\n  async activate() {\n    if (!this.fortmatic) {\n      const { apiKey, chainId } = this as any;\n      if (chainId in CHAIN_ID_NETWORK_ARGUMENT) {\n        this.fortmatic = new Fortmatic(\n          apiKey,\n          CHAIN_ID_NETWORK_ARGUMENT[chainId as FormaticSupportedChains]\n        );\n      } else {\n        throw new Error(`Unsupported network ID: ${chainId}`);\n      }\n    }\n\n    const provider = this.fortmatic.getProvider();\n\n    const pollForOverlayReady = new Promise((resolve) => {\n      const interval = setInterval(() => {\n        if (provider.overlayReady) {\n          clearInterval(interval);\n          this.emit(OVERLAY_READY);\n          resolve();\n        }\n      }, 200);\n    });\n\n    const [account] = await Promise.all([\n      provider.enable().then((accounts: string[]) => accounts[0]),\n      pollForOverlayReady,\n    ]);\n\n    return {\n      provider: this.fortmatic.getProvider(),\n      chainId: (this as any).chainId,\n      account,\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}