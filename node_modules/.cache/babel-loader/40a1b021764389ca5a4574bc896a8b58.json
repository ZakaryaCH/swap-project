{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport { ChainId, JSBI, TokenAmount, WETH, Pair } from '@uniswap/sdk';\nimport { useMemo } from 'react';\nimport { DAI, UNI, USDC, USDT, WBTC, POGO } from '../../constants';\nimport { STAKING_REWARDS_INTERFACE } from '../../constants/abis/staking-rewards';\nimport { useActiveWeb3React } from '../../hooks';\nimport { NEVER_RELOAD, useMultipleContractSingleData } from '../multicall/hooks';\nimport { tryParseAmount } from '../swap/hooks';\nimport useCurrentBlockTimestamp from 'hooks/useCurrentBlockTimestamp';\nexport const STAKING_GENESIS = 1600387200;\nexport const REWARDS_DURATION_DAYS = 60; // TODO add staking rewards addresses here\n\nexport const STAKING_REWARDS_INFO = {\n  [ChainId.MAINNET]: [{\n    tokens: [WETH[ChainId.MAINNET], DAI],\n    stakingRewardAddress: '0xa1484C3aa22a66C62b77E0AE78E15258bd0cB711'\n  }, {\n    tokens: [WETH[ChainId.MAINNET], USDC],\n    stakingRewardAddress: '0x7FBa4B8Dc5E7616e59622806932DBea72537A56b'\n  }, {\n    tokens: [WETH[ChainId.MAINNET], USDT],\n    stakingRewardAddress: '0x6C3e4cb2E96B01F4b866965A91ed4437839A121a'\n  }, {\n    tokens: [WETH[ChainId.MAINNET], WBTC],\n    stakingRewardAddress: '0xCA35e32e7926b96A9988f61d510E038108d8068e'\n  }, {\n    tokens: [WETH[ChainId.MAINNET], POGO],\n    stakingRewardAddress: '0xc7A8df971177bBF202431563A2b7c73dA2e9eCfD'\n  }]\n};\n// gets the staking info from the network for the active chain id\nexport function useStakingInfo(pairToFilterBy) {\n  _s();\n\n  const {\n    chainId,\n    account\n  } = useActiveWeb3React(); // detect if staking is ended\n\n  const currentBlockTimestamp = useCurrentBlockTimestamp();\n  const info = useMemo(() => {\n    var _STAKING_REWARDS_INFO, _STAKING_REWARDS_INFO2;\n\n    return chainId ? (_STAKING_REWARDS_INFO = (_STAKING_REWARDS_INFO2 = STAKING_REWARDS_INFO[chainId]) === null || _STAKING_REWARDS_INFO2 === void 0 ? void 0 : _STAKING_REWARDS_INFO2.filter(stakingRewardInfo => pairToFilterBy === undefined ? true : pairToFilterBy === null ? false : pairToFilterBy.involvesToken(stakingRewardInfo.tokens[0]) && pairToFilterBy.involvesToken(stakingRewardInfo.tokens[1]))) !== null && _STAKING_REWARDS_INFO !== void 0 ? _STAKING_REWARDS_INFO : [] : [];\n  }, [chainId, pairToFilterBy]);\n  const uni = chainId ? UNI[chainId] : undefined;\n  const rewardsAddresses = useMemo(() => info.map(({\n    stakingRewardAddress\n  }) => stakingRewardAddress), [info]);\n  const accountArg = useMemo(() => [account !== null && account !== void 0 ? account : undefined], [account]); // get all the info from the staking rewards contracts\n\n  const balances = useMultipleContractSingleData(rewardsAddresses, STAKING_REWARDS_INTERFACE, 'balanceOf', accountArg);\n  const earnedAmounts = useMultipleContractSingleData(rewardsAddresses, STAKING_REWARDS_INTERFACE, 'earned', accountArg);\n  const totalSupplies = useMultipleContractSingleData(rewardsAddresses, STAKING_REWARDS_INTERFACE, 'totalSupply'); // tokens per second, constants\n\n  const rewardRates = useMultipleContractSingleData(rewardsAddresses, STAKING_REWARDS_INTERFACE, 'rewardRate', undefined, NEVER_RELOAD);\n  const periodFinishes = useMultipleContractSingleData(rewardsAddresses, STAKING_REWARDS_INTERFACE, 'periodFinish', undefined, NEVER_RELOAD);\n  return useMemo(() => {\n    if (!chainId || !uni) return [];\n    return rewardsAddresses.reduce((memo, rewardsAddress, index) => {\n      // these two are dependent on account\n      const balanceState = balances[index];\n      const earnedAmountState = earnedAmounts[index]; // these get fetched regardless of account\n\n      const totalSupplyState = totalSupplies[index];\n      const rewardRateState = rewardRates[index];\n      const periodFinishState = periodFinishes[index];\n\n      if ( // these may be undefined if not logged in\n      !(balanceState === null || balanceState === void 0 ? void 0 : balanceState.loading) && !(earnedAmountState === null || earnedAmountState === void 0 ? void 0 : earnedAmountState.loading) && // always need these\n      totalSupplyState && !totalSupplyState.loading && rewardRateState && !rewardRateState.loading && periodFinishState && !periodFinishState.loading) {\n        var _balanceState$result$, _balanceState$result, _totalSupplyState$res, _rewardRateState$resu, _periodFinishState$re, _periodFinishState$re2, _earnedAmountState$re, _earnedAmountState$re2;\n\n        if ((balanceState === null || balanceState === void 0 ? void 0 : balanceState.error) || (earnedAmountState === null || earnedAmountState === void 0 ? void 0 : earnedAmountState.error) || totalSupplyState.error || rewardRateState.error || periodFinishState.error) {\n          console.error('Failed to load staking rewards info');\n          return memo;\n        } // get the LP token\n\n\n        const tokens = info[index].tokens;\n        const dummyPair = new Pair(new TokenAmount(tokens[0], '0'), new TokenAmount(tokens[1], '0')); // check for account, if no account set to 0\n\n        const stakedAmount = new TokenAmount(dummyPair.liquidityToken, JSBI.BigInt((_balanceState$result$ = balanceState === null || balanceState === void 0 ? void 0 : (_balanceState$result = balanceState.result) === null || _balanceState$result === void 0 ? void 0 : _balanceState$result[0]) !== null && _balanceState$result$ !== void 0 ? _balanceState$result$ : 0));\n        const totalStakedAmount = new TokenAmount(dummyPair.liquidityToken, JSBI.BigInt((_totalSupplyState$res = totalSupplyState.result) === null || _totalSupplyState$res === void 0 ? void 0 : _totalSupplyState$res[0]));\n        const totalRewardRate = new TokenAmount(uni, JSBI.BigInt((_rewardRateState$resu = rewardRateState.result) === null || _rewardRateState$resu === void 0 ? void 0 : _rewardRateState$resu[0]));\n\n        const getHypotheticalRewardRate = (stakedAmount, totalStakedAmount, totalRewardRate) => {\n          return new TokenAmount(uni, JSBI.greaterThan(totalStakedAmount.raw, JSBI.BigInt(0)) ? JSBI.divide(JSBI.multiply(totalRewardRate.raw, stakedAmount.raw), totalStakedAmount.raw) : JSBI.BigInt(0));\n        };\n\n        const individualRewardRate = getHypotheticalRewardRate(stakedAmount, totalStakedAmount, totalRewardRate);\n        const periodFinishSeconds = (_periodFinishState$re = periodFinishState.result) === null || _periodFinishState$re === void 0 ? void 0 : (_periodFinishState$re2 = _periodFinishState$re[0]) === null || _periodFinishState$re2 === void 0 ? void 0 : _periodFinishState$re2.toNumber();\n        const periodFinishMs = periodFinishSeconds * 1000; // compare period end timestamp vs current block timestamp (in seconds)\n\n        const active = periodFinishSeconds && currentBlockTimestamp ? periodFinishSeconds > currentBlockTimestamp.toNumber() : true;\n        memo.push({\n          stakingRewardAddress: rewardsAddress,\n          tokens: info[index].tokens,\n          periodFinish: periodFinishMs > 0 ? new Date(periodFinishMs) : undefined,\n          earnedAmount: new TokenAmount(uni, JSBI.BigInt((_earnedAmountState$re = earnedAmountState === null || earnedAmountState === void 0 ? void 0 : (_earnedAmountState$re2 = earnedAmountState.result) === null || _earnedAmountState$re2 === void 0 ? void 0 : _earnedAmountState$re2[0]) !== null && _earnedAmountState$re !== void 0 ? _earnedAmountState$re : 0)),\n          rewardRate: individualRewardRate,\n          totalRewardRate: totalRewardRate,\n          stakedAmount: stakedAmount,\n          totalStakedAmount: totalStakedAmount,\n          getHypotheticalRewardRate,\n          active\n        });\n      }\n\n      return memo;\n    }, []);\n  }, [balances, chainId, currentBlockTimestamp, earnedAmounts, info, periodFinishes, rewardRates, rewardsAddresses, totalSupplies, uni]);\n}\n\n_s(useStakingInfo, \"AQQJ3p899cWqZLKMAsfbq7mseLo=\", false, function () {\n  return [useActiveWeb3React, useCurrentBlockTimestamp, useMultipleContractSingleData, useMultipleContractSingleData, useMultipleContractSingleData, useMultipleContractSingleData, useMultipleContractSingleData];\n});\n\nexport function useTotalUniEarned() {\n  _s2();\n\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const uni = chainId ? UNI[chainId] : undefined;\n  const stakingInfos = useStakingInfo();\n  return useMemo(() => {\n    var _stakingInfos$reduce;\n\n    if (!uni) return undefined;\n    return (_stakingInfos$reduce = stakingInfos === null || stakingInfos === void 0 ? void 0 : stakingInfos.reduce((accumulator, stakingInfo) => accumulator.add(stakingInfo.earnedAmount), new TokenAmount(uni, '0'))) !== null && _stakingInfos$reduce !== void 0 ? _stakingInfos$reduce : new TokenAmount(uni, '0');\n  }, [stakingInfos, uni]);\n} // based on typed value\n\n_s2(useTotalUniEarned, \"ne0sqTEC8cSF4yDqUF4Xdz4iTEo=\", false, function () {\n  return [useActiveWeb3React, useStakingInfo];\n});\n\nexport function useDerivedStakeInfo(typedValue, stakingToken, userLiquidityUnstaked) {\n  _s3();\n\n  const {\n    account\n  } = useActiveWeb3React();\n  const parsedInput = tryParseAmount(typedValue, stakingToken);\n  const parsedAmount = parsedInput && userLiquidityUnstaked && JSBI.lessThanOrEqual(parsedInput.raw, userLiquidityUnstaked.raw) ? parsedInput : undefined;\n  let error;\n\n  if (!account) {\n    error = 'Connect Wallet';\n  }\n\n  if (!parsedAmount) {\n    var _error;\n\n    error = (_error = error) !== null && _error !== void 0 ? _error : 'Enter an amount';\n  }\n\n  return {\n    parsedAmount,\n    error\n  };\n} // based on typed value\n\n_s3(useDerivedStakeInfo, \"SBDWLFuvTxBgnBUfJpXeYDOlPck=\", false, function () {\n  return [useActiveWeb3React];\n});\n\nexport function useDerivedUnstakeInfo(typedValue, stakingAmount) {\n  _s4();\n\n  const {\n    account\n  } = useActiveWeb3React();\n  const parsedInput = tryParseAmount(typedValue, stakingAmount.token);\n  const parsedAmount = parsedInput && JSBI.lessThanOrEqual(parsedInput.raw, stakingAmount.raw) ? parsedInput : undefined;\n  let error;\n\n  if (!account) {\n    error = 'Connect Wallet';\n  }\n\n  if (!parsedAmount) {\n    var _error2;\n\n    error = (_error2 = error) !== null && _error2 !== void 0 ? _error2 : 'Enter an amount';\n  }\n\n  return {\n    parsedAmount,\n    error\n  };\n}\n\n_s4(useDerivedUnstakeInfo, \"SBDWLFuvTxBgnBUfJpXeYDOlPck=\", false, function () {\n  return [useActiveWeb3React];\n});","map":{"version":3,"sources":["/Users/chichke/Documents/Work/Freelance/swap-project/src/state/stake/hooks.ts"],"names":["ChainId","JSBI","TokenAmount","WETH","Pair","useMemo","DAI","UNI","USDC","USDT","WBTC","POGO","STAKING_REWARDS_INTERFACE","useActiveWeb3React","NEVER_RELOAD","useMultipleContractSingleData","tryParseAmount","useCurrentBlockTimestamp","STAKING_GENESIS","REWARDS_DURATION_DAYS","STAKING_REWARDS_INFO","MAINNET","tokens","stakingRewardAddress","useStakingInfo","pairToFilterBy","chainId","account","currentBlockTimestamp","info","filter","stakingRewardInfo","undefined","involvesToken","uni","rewardsAddresses","map","accountArg","balances","earnedAmounts","totalSupplies","rewardRates","periodFinishes","reduce","memo","rewardsAddress","index","balanceState","earnedAmountState","totalSupplyState","rewardRateState","periodFinishState","loading","error","console","dummyPair","stakedAmount","liquidityToken","BigInt","result","totalStakedAmount","totalRewardRate","getHypotheticalRewardRate","greaterThan","raw","divide","multiply","individualRewardRate","periodFinishSeconds","toNumber","periodFinishMs","active","push","periodFinish","Date","earnedAmount","rewardRate","useTotalUniEarned","stakingInfos","accumulator","stakingInfo","add","useDerivedStakeInfo","typedValue","stakingToken","userLiquidityUnstaked","parsedInput","parsedAmount","lessThanOrEqual","useDerivedUnstakeInfo","stakingAmount","token"],"mappings":"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","sourcesContent":["import { ChainId, CurrencyAmount, JSBI, Token, TokenAmount, WETH, Pair } from '@uniswap/sdk'\nimport { useMemo } from 'react'\nimport { DAI, UNI, USDC, USDT, WBTC, POGO } from '../../constants'\nimport { STAKING_REWARDS_INTERFACE } from '../../constants/abis/staking-rewards'\nimport { useActiveWeb3React } from '../../hooks'\nimport { NEVER_RELOAD, useMultipleContractSingleData } from '../multicall/hooks'\nimport { tryParseAmount } from '../swap/hooks'\nimport useCurrentBlockTimestamp from 'hooks/useCurrentBlockTimestamp'\n\nexport const STAKING_GENESIS = 1600387200\n\nexport const REWARDS_DURATION_DAYS = 60\n\n// TODO add staking rewards addresses here\nexport const STAKING_REWARDS_INFO: {\n  [chainId in ChainId]?: {\n    tokens: [Token, Token]\n    stakingRewardAddress: string\n  }[]\n} = {\n  [ChainId.MAINNET]: [\n    {\n      tokens: [WETH[ChainId.MAINNET], DAI],\n      stakingRewardAddress: '0xa1484C3aa22a66C62b77E0AE78E15258bd0cB711'\n    },\n    {\n      tokens: [WETH[ChainId.MAINNET], USDC],\n      stakingRewardAddress: '0x7FBa4B8Dc5E7616e59622806932DBea72537A56b'\n    },\n    {\n      tokens: [WETH[ChainId.MAINNET], USDT],\n      stakingRewardAddress: '0x6C3e4cb2E96B01F4b866965A91ed4437839A121a'\n    },\n    {\n      tokens: [WETH[ChainId.MAINNET], WBTC],\n      stakingRewardAddress: '0xCA35e32e7926b96A9988f61d510E038108d8068e'\n    },\n    {\n      tokens: [WETH[ChainId.MAINNET], POGO],\n      stakingRewardAddress: '0xc7A8df971177bBF202431563A2b7c73dA2e9eCfD'\n    }\n  ]\n}\n\nexport interface StakingInfo {\n  // the address of the reward contract\n  stakingRewardAddress: string\n  // the tokens involved in this pair\n  tokens: [Token, Token]\n  // the amount of token currently staked, or undefined if no account\n  stakedAmount: TokenAmount\n  // the amount of reward token earned by the active account, or undefined if no account\n  earnedAmount: TokenAmount\n  // the total amount of token staked in the contract\n  totalStakedAmount: TokenAmount\n  // the amount of token distributed per second to all LPs, constant\n  totalRewardRate: TokenAmount\n  // the current amount of token distributed to the active account per second.\n  // equivalent to percent of total supply * reward rate\n  rewardRate: TokenAmount\n  // when the period ends\n  periodFinish: Date | undefined\n  // if pool is active\n  active: boolean\n  // calculates a hypothetical amount of token distributed to the active account per second.\n  getHypotheticalRewardRate: (\n    stakedAmount: TokenAmount,\n    totalStakedAmount: TokenAmount,\n    totalRewardRate: TokenAmount\n  ) => TokenAmount\n}\n\n// gets the staking info from the network for the active chain id\nexport function useStakingInfo(pairToFilterBy?: Pair | null): StakingInfo[] {\n  const { chainId, account } = useActiveWeb3React()\n\n  // detect if staking is ended\n  const currentBlockTimestamp = useCurrentBlockTimestamp()\n\n  const info = useMemo(\n    () =>\n      chainId\n        ? STAKING_REWARDS_INFO[chainId]?.filter(stakingRewardInfo =>\n            pairToFilterBy === undefined\n              ? true\n              : pairToFilterBy === null\n              ? false\n              : pairToFilterBy.involvesToken(stakingRewardInfo.tokens[0]) &&\n                pairToFilterBy.involvesToken(stakingRewardInfo.tokens[1])\n          ) ?? []\n        : [],\n    [chainId, pairToFilterBy]\n  )\n\n  const uni = chainId ? UNI[chainId] : undefined\n\n  const rewardsAddresses = useMemo(() => info.map(({ stakingRewardAddress }) => stakingRewardAddress), [info])\n\n  const accountArg = useMemo(() => [account ?? undefined], [account])\n\n  // get all the info from the staking rewards contracts\n  const balances = useMultipleContractSingleData(rewardsAddresses, STAKING_REWARDS_INTERFACE, 'balanceOf', accountArg)\n  const earnedAmounts = useMultipleContractSingleData(rewardsAddresses, STAKING_REWARDS_INTERFACE, 'earned', accountArg)\n  const totalSupplies = useMultipleContractSingleData(rewardsAddresses, STAKING_REWARDS_INTERFACE, 'totalSupply')\n\n  // tokens per second, constants\n  const rewardRates = useMultipleContractSingleData(\n    rewardsAddresses,\n    STAKING_REWARDS_INTERFACE,\n    'rewardRate',\n    undefined,\n    NEVER_RELOAD\n  )\n  const periodFinishes = useMultipleContractSingleData(\n    rewardsAddresses,\n    STAKING_REWARDS_INTERFACE,\n    'periodFinish',\n    undefined,\n    NEVER_RELOAD\n  )\n\n  return useMemo(() => {\n    if (!chainId || !uni) return []\n\n    return rewardsAddresses.reduce<StakingInfo[]>((memo, rewardsAddress, index) => {\n      // these two are dependent on account\n      const balanceState = balances[index]\n      const earnedAmountState = earnedAmounts[index]\n\n      // these get fetched regardless of account\n      const totalSupplyState = totalSupplies[index]\n      const rewardRateState = rewardRates[index]\n      const periodFinishState = periodFinishes[index]\n\n      if (\n        // these may be undefined if not logged in\n        !balanceState?.loading &&\n        !earnedAmountState?.loading &&\n        // always need these\n        totalSupplyState &&\n        !totalSupplyState.loading &&\n        rewardRateState &&\n        !rewardRateState.loading &&\n        periodFinishState &&\n        !periodFinishState.loading\n      ) {\n        if (\n          balanceState?.error ||\n          earnedAmountState?.error ||\n          totalSupplyState.error ||\n          rewardRateState.error ||\n          periodFinishState.error\n        ) {\n          console.error('Failed to load staking rewards info')\n          return memo\n        }\n\n        // get the LP token\n        const tokens = info[index].tokens\n        const dummyPair = new Pair(new TokenAmount(tokens[0], '0'), new TokenAmount(tokens[1], '0'))\n\n        // check for account, if no account set to 0\n\n        const stakedAmount = new TokenAmount(dummyPair.liquidityToken, JSBI.BigInt(balanceState?.result?.[0] ?? 0))\n        const totalStakedAmount = new TokenAmount(dummyPair.liquidityToken, JSBI.BigInt(totalSupplyState.result?.[0]))\n        const totalRewardRate = new TokenAmount(uni, JSBI.BigInt(rewardRateState.result?.[0]))\n\n        const getHypotheticalRewardRate = (\n          stakedAmount: TokenAmount,\n          totalStakedAmount: TokenAmount,\n          totalRewardRate: TokenAmount\n        ): TokenAmount => {\n          return new TokenAmount(\n            uni,\n            JSBI.greaterThan(totalStakedAmount.raw, JSBI.BigInt(0))\n              ? JSBI.divide(JSBI.multiply(totalRewardRate.raw, stakedAmount.raw), totalStakedAmount.raw)\n              : JSBI.BigInt(0)\n          )\n        }\n\n        const individualRewardRate = getHypotheticalRewardRate(stakedAmount, totalStakedAmount, totalRewardRate)\n\n        const periodFinishSeconds = periodFinishState.result?.[0]?.toNumber()\n        const periodFinishMs = periodFinishSeconds * 1000\n\n        // compare period end timestamp vs current block timestamp (in seconds)\n        const active =\n          periodFinishSeconds && currentBlockTimestamp ? periodFinishSeconds > currentBlockTimestamp.toNumber() : true\n\n        memo.push({\n          stakingRewardAddress: rewardsAddress,\n          tokens: info[index].tokens,\n          periodFinish: periodFinishMs > 0 ? new Date(periodFinishMs) : undefined,\n          earnedAmount: new TokenAmount(uni, JSBI.BigInt(earnedAmountState?.result?.[0] ?? 0)),\n          rewardRate: individualRewardRate,\n          totalRewardRate: totalRewardRate,\n          stakedAmount: stakedAmount,\n          totalStakedAmount: totalStakedAmount,\n          getHypotheticalRewardRate,\n          active\n        })\n      }\n      return memo\n    }, [])\n  }, [\n    balances,\n    chainId,\n    currentBlockTimestamp,\n    earnedAmounts,\n    info,\n    periodFinishes,\n    rewardRates,\n    rewardsAddresses,\n    totalSupplies,\n    uni\n  ])\n}\n\nexport function useTotalUniEarned(): TokenAmount | undefined {\n  const { chainId } = useActiveWeb3React()\n  const uni = chainId ? UNI[chainId] : undefined\n  const stakingInfos = useStakingInfo()\n\n  return useMemo(() => {\n    if (!uni) return undefined\n    return (\n      stakingInfos?.reduce(\n        (accumulator, stakingInfo) => accumulator.add(stakingInfo.earnedAmount),\n        new TokenAmount(uni, '0')\n      ) ?? new TokenAmount(uni, '0')\n    )\n  }, [stakingInfos, uni])\n}\n\n// based on typed value\nexport function useDerivedStakeInfo(\n  typedValue: string,\n  stakingToken: Token,\n  userLiquidityUnstaked: TokenAmount | undefined\n): {\n  parsedAmount?: CurrencyAmount\n  error?: string\n} {\n  const { account } = useActiveWeb3React()\n\n  const parsedInput: CurrencyAmount | undefined = tryParseAmount(typedValue, stakingToken)\n\n  const parsedAmount =\n    parsedInput && userLiquidityUnstaked && JSBI.lessThanOrEqual(parsedInput.raw, userLiquidityUnstaked.raw)\n      ? parsedInput\n      : undefined\n\n  let error: string | undefined\n  if (!account) {\n    error = 'Connect Wallet'\n  }\n  if (!parsedAmount) {\n    error = error ?? 'Enter an amount'\n  }\n\n  return {\n    parsedAmount,\n    error\n  }\n}\n\n// based on typed value\nexport function useDerivedUnstakeInfo(\n  typedValue: string,\n  stakingAmount: TokenAmount\n): {\n  parsedAmount?: CurrencyAmount\n  error?: string\n} {\n  const { account } = useActiveWeb3React()\n\n  const parsedInput: CurrencyAmount | undefined = tryParseAmount(typedValue, stakingAmount.token)\n\n  const parsedAmount = parsedInput && JSBI.lessThanOrEqual(parsedInput.raw, stakingAmount.raw) ? parsedInput : undefined\n\n  let error: string | undefined\n  if (!account) {\n    error = 'Connect Wallet'\n  }\n  if (!parsedAmount) {\n    error = error ?? 'Enter an amount'\n  }\n\n  return {\n    parsedAmount,\n    error\n  }\n}\n"]},"metadata":{},"sourceType":"module"}