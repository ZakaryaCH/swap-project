{"ast":null,"code":"var _jsxFileName = \"/Users/chichke/Documents/Work/Freelance/swap-project/src/pages/Swap/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport { ArrowDown } from \"react-feather\";\nimport ReactGA from \"react-ga\";\nimport { Text } from \"rebass\";\nimport { ThemeContext } from \"styled-components\";\nimport AddressInputPanel from \"../../components/AddressInputPanel\";\nimport { ButtonError, ButtonLight, ButtonConfirmed } from \"../../components/Button\";\nimport Card, { GreyCard } from \"../../components/Card\";\nimport Column, { AutoColumn } from \"../../components/Column\";\nimport ConfirmSwapModal from \"../../components/swap/ConfirmSwapModal\";\nimport CurrencyInputPanel from \"../../components/CurrencyInputPanel\";\nimport { SwapPoolTabs } from \"../../components/NavigationTabs\";\nimport { AutoRow, RowBetween } from \"../../components/Row\";\nimport BetterTradeLink, { DefaultVersionLink } from \"../../components/swap/BetterTradeLink\";\nimport confirmPriceImpactWithoutFee from \"../../components/swap/confirmPriceImpactWithoutFee\";\nimport { ArrowWrapper, BottomGrouping, SwapCallbackError, Wrapper } from \"../../components/swap/styleds\";\nimport TradePrice from \"../../components/swap/TradePrice\";\nimport TokenWarningModal from \"../../components/TokenWarningModal\";\nimport ProgressSteps from \"../../components/ProgressSteps\";\nimport SwapHeader from \"../../components/swap/SwapHeader\";\nimport { INITIAL_ALLOWED_SLIPPAGE } from \"../../constants\";\nimport { useActiveWeb3React } from \"../../hooks\";\nimport { useCurrency } from \"../../hooks/Tokens\";\nimport useENSAddress from \"../../hooks/useENSAddress\";\nimport useToggledVersion, { DEFAULT_VERSION, Version } from \"../../hooks/useToggledVersion\";\nimport { useToggleSettingsMenu, useWalletModalToggle } from \"../../state/application/hooks\";\nimport { Field } from \"../../state/swap/actions\";\nimport { useDefaultsFromURLSearch, useSwapActionHandlers, useSwapState } from \"../../state/swap/hooks\";\nimport { useExpertModeManager, useUserSlippageTolerance, useUserSingleHopOnly } from \"../../state/user/hooks\";\nimport { LinkStyledButton, TYPE } from \"../../theme\";\nimport AppBody from \"../AppBody\";\nimport { ClickableText } from \"../Pool/styleds\";\nimport Loader from \"../../components/Loader\";\nimport UnsupportedCurrencyFooter from \"components/swap/UnsupportedCurrencyFooter\";\nimport { useQuery } from \"react-query\";\nimport getTokenList from \"utils/getTokenList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Swap() {\n  _s();\n\n  var _data$data, _currencies$Field$INP;\n\n  const loadedUrlParams = useDefaultsFromURLSearch(); // token warning stuff\n\n  const [loadedInputCurrency, loadedOutputCurrency] = [useCurrency(loadedUrlParams === null || loadedUrlParams === void 0 ? void 0 : loadedUrlParams.inputCurrencyId), useCurrency(loadedUrlParams === null || loadedUrlParams === void 0 ? void 0 : loadedUrlParams.outputCurrencyId)];\n  const handleConfirmTokenWarning = useCallback(() => {}, []); // dismiss warning if all imported tokens are in active lists\n\n  const {\n    data,\n    isLoading,\n    isError\n  } = useQuery(\"tokenList\", getTokenList);\n  const tokenList = data === null || data === void 0 ? void 0 : (_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data.tokens;\n  const {\n    account\n  } = useActiveWeb3React();\n  const theme = useContext(ThemeContext); // toggle wallet when disconnected\n\n  const toggleWalletModal = useWalletModalToggle(); // for expert mode\n\n  const toggleSettings = useToggleSettingsMenu();\n  const [isExpertMode] = useExpertModeManager(); // get custom setting values for user\n\n  const [allowedSlippage] = useUserSlippageTolerance(); // swap state\n\n  const {\n    independentField,\n    typedValue,\n    recipient\n  } = useSwapState();\n  const showWrap = false;\n  const {\n    address: recipientAddress\n  } = useENSAddress(recipient);\n  const toggledVersion = useToggledVersion();\n  const trade = showWrap;\n  const defaultTrade = showWrap;\n  const parsedAmounts = showWrap ? {\n    [Field.INPUT]: 100,\n    [Field.OUTPUT]: 200\n  } : {\n    [Field.INPUT]: independentField === Field.INPUT ? 100 : 200,\n    [Field.OUTPUT]: independentField === Field.OUTPUT ? 100 : 200\n  };\n  const {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient\n  } = useSwapActionHandlers();\n  const isValid = false;\n  const dependentField = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT;\n  const handleTypeInput = useCallback(value => {\n    onUserInput(Field.INPUT, value);\n  }, [onUserInput]);\n  const handleTypeOutput = useCallback(value => {\n    onUserInput(Field.OUTPUT, value);\n  }, [onUserInput]); // modal and loading\n\n  const [{\n    showConfirm,\n    tradeToConfirm,\n    swapErrorMessage,\n    attemptingTxn,\n    txHash\n  }, setSwapState] = useState({\n    showConfirm: false,\n    tradeToConfirm: undefined,\n    attemptingTxn: false,\n    swapErrorMessage: undefined,\n    txHash: undefined\n  });\n  const formattedAmounts = 500;\n  const route = trade === null || trade === void 0 ? void 0 : trade.route;\n  const userHasSpecifiedInputOutput = true;\n  const noRoute = !route; // check whether the user has approved the router on the input token\n\n  const [approval, approveCallback] = useState(false); // check if user has gone through approval process, used to show two step buttons, reset on token change\n\n  const [approvalSubmitted, setApprovalSubmitted] = useState(false); // mark when a user has submitted an approval, reset onTokenSelection for input field\n\n  useEffect(() => {\n    if (false) {\n      setApprovalSubmitted(true);\n    }\n  }, [approval, approvalSubmitted]);\n  const maxAmountInput = 10000;\n  const atMaxAmountInput = Boolean(maxAmountInput && true);\n  const priceImpactWithoutFee = 0.2;\n  const [singleHopOnly] = useUserSingleHopOnly();\n  const handleSwap = useCallback(() => {\n    if (priceImpactWithoutFee && !confirmPriceImpactWithoutFee(priceImpactWithoutFee)) {\n      return;\n    }\n\n    if (!swapCallback) {\n      return;\n    }\n\n    setSwapState({\n      attemptingTxn: true,\n      tradeToConfirm,\n      showConfirm,\n      swapErrorMessage: undefined,\n      txHash: undefined\n    });\n    swapCallback().then(hash => {\n      var _trade$inputAmount, _trade$inputAmount$cu, _trade$outputAmount, _trade$outputAmount$c;\n\n      setSwapState({\n        attemptingTxn: false,\n        tradeToConfirm,\n        showConfirm,\n        swapErrorMessage: undefined,\n        txHash: hash\n      });\n      ReactGA.event({\n        category: \"Swap\",\n        action: recipient === null ? \"Swap w/o Send\" : (recipientAddress !== null && recipientAddress !== void 0 ? recipientAddress : recipient) === account ? \"Swap w/o Send + recipient\" : \"Swap w/ Send\",\n        label: [trade === null || trade === void 0 ? void 0 : (_trade$inputAmount = trade.inputAmount) === null || _trade$inputAmount === void 0 ? void 0 : (_trade$inputAmount$cu = _trade$inputAmount.currency) === null || _trade$inputAmount$cu === void 0 ? void 0 : _trade$inputAmount$cu.symbol, trade === null || trade === void 0 ? void 0 : (_trade$outputAmount = trade.outputAmount) === null || _trade$outputAmount === void 0 ? void 0 : (_trade$outputAmount$c = _trade$outputAmount.currency) === null || _trade$outputAmount$c === void 0 ? void 0 : _trade$outputAmount$c.symbol, \"v1\"].join(\"/\")\n      });\n      ReactGA.event({\n        category: \"Routing\",\n        action: singleHopOnly ? \"Swap with multihop disabled\" : \"Swap with multihop enabled\"\n      });\n    }).catch(error => {\n      setSwapState({\n        attemptingTxn: false,\n        tradeToConfirm,\n        showConfirm,\n        swapErrorMessage: error.message,\n        txHash: undefined\n      });\n    });\n  }, [priceImpactWithoutFee, swapCallback, tradeToConfirm, showConfirm, recipient, recipientAddress, account, trade, singleHopOnly]); // errors\n\n  const [showInverted, setShowInverted] = useState(false); // warnings on slippage\n\n  const priceImpactSeverity = 2; // show approve flow when: no error on inputs, not approved or pending, or approved in current session\n  // never show if price impact is above threshold in non expert mode\n\n  const showApproveFlow = true;\n  const handleConfirmDismiss = useCallback(() => {\n    setSwapState({\n      showConfirm: false,\n      tradeToConfirm,\n      attemptingTxn,\n      swapErrorMessage,\n      txHash\n    }); // if there was a tx hash, we want to clear the input\n\n    if (txHash) {\n      onUserInput(Field.INPUT, \"\");\n    }\n  }, [attemptingTxn, onUserInput, swapErrorMessage, tradeToConfirm, txHash]);\n  const handleAcceptChanges = useCallback(() => {}, []);\n  const handleInputSelect = useCallback(inputCurrency => {\n    setApprovalSubmitted(false); // reset 2 step UI for approvals\n\n    onCurrencySelection(Field.INPUT, inputCurrency);\n  }, [onCurrencySelection]);\n  const handleMaxInput = useCallback(() => {\n    maxAmountInput && onUserInput(Field.INPUT, maxAmountInput.toExact());\n  }, [maxAmountInput, onUserInput]);\n  const handleOutputSelect = useCallback(outputCurrency => onCurrencySelection(Field.OUTPUT, outputCurrency), [onCurrencySelection]);\n  const swapIsUnsupported = false;\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(AppBody, {\n        children: /*#__PURE__*/_jsxDEV(Loader, {\n          stroke: \"white\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TokenWarningModal, {\n      isOpen: Object.values(tokenList).length > 0 && !false,\n      tokens: tokenList,\n      onConfirm: handleConfirmTokenWarning\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SwapPoolTabs, {\n      active: \"swap\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AppBody, {\n      children: [/*#__PURE__*/_jsxDEV(SwapHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Wrapper, {\n        id: \"swap-page\",\n        children: [/*#__PURE__*/_jsxDEV(ConfirmSwapModal, {\n          isOpen: showConfirm,\n          trade: trade,\n          originalTrade: tradeToConfirm,\n          onAcceptChanges: handleAcceptChanges,\n          attemptingTxn: attemptingTxn,\n          txHash: txHash,\n          recipient: recipient,\n          allowedSlippage: allowedSlippage,\n          onConfirm: handleSwap,\n          swapErrorMessage: swapErrorMessage,\n          onDismiss: handleConfirmDismiss\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AutoColumn, {\n          gap: \"md\",\n          children: [/*#__PURE__*/_jsxDEV(CurrencyInputPanel, {\n            label: independentField === Field.OUTPUT && !showWrap && trade ? \"From (estimated)\" : \"From\",\n            value: formattedAmounts[Field.INPUT],\n            showMaxButton: !atMaxAmountInput,\n            currency: currencies[Field.INPUT],\n            onUserInput: handleTypeInput,\n            onMax: handleMaxInput,\n            onCurrencySelect: handleInputSelect,\n            otherCurrency: currencies[Field.OUTPUT],\n            id: \"swap-currency-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(AutoColumn, {\n            justify: \"space-between\",\n            children: /*#__PURE__*/_jsxDEV(AutoRow, {\n              justify: isExpertMode ? \"space-between\" : \"center\",\n              style: {\n                padding: \"0 1rem\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(ArrowWrapper, {\n                clickable: true,\n                children: /*#__PURE__*/_jsxDEV(ArrowDown, {\n                  size: \"16\",\n                  onClick: () => {\n                    setApprovalSubmitted(false); // reset 2 step UI for approvals\n\n                    onSwitchTokens();\n                  },\n                  color: currencies[Field.INPUT] && currencies[Field.OUTPUT] ? theme.primary1 : theme.text2\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 368,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 367,\n                columnNumber: 17\n              }, this), recipient === null && !showWrap && isExpertMode ? /*#__PURE__*/_jsxDEV(LinkStyledButton, {\n                id: \"add-recipient-button\",\n                onClick: () => onChangeRecipient(\"\"),\n                children: \"+ Add a send (optional)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 382,\n                columnNumber: 19\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CurrencyInputPanel, {\n            value: formattedAmounts[Field.OUTPUT],\n            onUserInput: handleTypeOutput,\n            label: independentField === Field.INPUT && !showWrap && trade ? \"To (estimated)\" : \"To\",\n            showMaxButton: false,\n            currency: currencies[Field.OUTPUT],\n            onCurrencySelect: handleOutputSelect,\n            otherCurrency: currencies[Field.INPUT],\n            id: \"swap-currency-output\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 13\n          }, this), recipient !== null && !showWrap ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(AutoRow, {\n              justify: \"space-between\",\n              style: {\n                padding: \"0 1rem\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(ArrowWrapper, {\n                clickable: false,\n                children: /*#__PURE__*/_jsxDEV(ArrowDown, {\n                  size: \"16\",\n                  color: theme.text2\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 410,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 409,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(LinkStyledButton, {\n                id: \"remove-recipient-button\",\n                onClick: () => onChangeRecipient(null),\n                children: \"- Remove send\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 412,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(AddressInputPanel, {\n              id: \"recipient\",\n              value: recipient,\n              onChange: onChangeRecipient\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 419,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true) : null, showWrap ? null : /*#__PURE__*/_jsxDEV(Card, {\n            padding: showWrap ? \".25rem 1rem 0 1rem\" : \"0px\",\n            borderRadius: \"20px\",\n            children: /*#__PURE__*/_jsxDEV(AutoColumn, {\n              gap: \"8px\",\n              style: {\n                padding: \"0 16px\"\n              },\n              children: [Boolean(trade) && /*#__PURE__*/_jsxDEV(RowBetween, {\n                align: \"center\",\n                children: [/*#__PURE__*/_jsxDEV(Text, {\n                  fontWeight: 500,\n                  fontSize: 14,\n                  color: theme.text2,\n                  children: \"Price\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 435,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TradePrice, {\n                  price: trade === null || trade === void 0 ? void 0 : trade.executionPrice,\n                  showInverted: showInverted,\n                  setShowInverted: setShowInverted\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 438,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 434,\n                columnNumber: 21\n              }, this), allowedSlippage !== INITIAL_ALLOWED_SLIPPAGE && /*#__PURE__*/_jsxDEV(RowBetween, {\n                align: \"center\",\n                children: [/*#__PURE__*/_jsxDEV(ClickableText, {\n                  fontWeight: 500,\n                  fontSize: 14,\n                  color: theme.text2,\n                  onClick: toggleSettings,\n                  children: \"Slippage Tolerance\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 447,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(ClickableText, {\n                  fontWeight: 500,\n                  fontSize: 14,\n                  color: theme.text2,\n                  onClick: toggleSettings,\n                  children: [allowedSlippage / 100, \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 455,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 446,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 432,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(BottomGrouping, {\n          children: [!account ? /*#__PURE__*/_jsxDEV(ButtonLight, {\n            onClick: toggleWalletModal,\n            children: \"Connect Wallet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 15\n          }, this) : noRoute && userHasSpecifiedInputOutput ? /*#__PURE__*/_jsxDEV(GreyCard, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(TYPE.main, {\n              mb: \"4px\",\n              children: \"Insufficient liquidity for this trade.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 476,\n              columnNumber: 17\n            }, this), singleHopOnly && /*#__PURE__*/_jsxDEV(TYPE.main, {\n              mb: \"4px\",\n              children: \"Try enabling multi-hop trades.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 480,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 15\n          }, this) : showApproveFlow ? /*#__PURE__*/_jsxDEV(RowBetween, {\n            children: [/*#__PURE__*/_jsxDEV(ButtonConfirmed, {\n              onClick: approveCallback,\n              disabled: approval !== ApprovalState.NOT_APPROVED || approvalSubmitted,\n              width: \"48%\",\n              altDisabledStyle: approval === ApprovalState.PENDING // show solid button while waiting\n              ,\n              confirmed: approval === ApprovalState.APPROVED,\n              children: approval === ApprovalState.PENDING ? /*#__PURE__*/_jsxDEV(AutoRow, {\n                gap: \"6px\",\n                justify: \"center\",\n                children: [\"Approving \", /*#__PURE__*/_jsxDEV(Loader, {\n                  stroke: \"white\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 496,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 495,\n                columnNumber: 21\n              }, this) : approvalSubmitted && approval === ApprovalState.APPROVED ? \"Approved\" : \"Approve \" + ((_currencies$Field$INP = currencies[Field.INPUT]) === null || _currencies$Field$INP === void 0 ? void 0 : _currencies$Field$INP.symbol)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 485,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(ButtonError, {\n              onClick: () => {\n                if (isExpertMode) {\n                  handleSwap();\n                } else {\n                  setSwapState({\n                    tradeToConfirm: trade,\n                    attemptingTxn: false,\n                    swapErrorMessage: undefined,\n                    showConfirm: true,\n                    txHash: undefined\n                  });\n                }\n              },\n              width: \"48%\",\n              id: \"swap-button\",\n              disabled: !isValid || approval !== ApprovalState.APPROVED || priceImpactSeverity > 3 && !isExpertMode,\n              error: isValid && priceImpactSeverity > 2,\n              children: /*#__PURE__*/_jsxDEV(Text, {\n                fontSize: 16,\n                fontWeight: 500,\n                children: priceImpactSeverity > 3 && !isExpertMode ? `Price Impact High` : `Swap${priceImpactSeverity > 2 ? \" Anyway\" : \"\"}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 528,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 505,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 484,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(ButtonError, {\n            onClick: () => {\n              if (isExpertMode) {\n                handleSwap();\n              } else {\n                setSwapState({\n                  tradeToConfirm: trade,\n                  attemptingTxn: false,\n                  swapErrorMessage: undefined,\n                  showConfirm: true,\n                  txHash: undefined\n                });\n              }\n            },\n            id: \"swap-button\",\n            disabled: !isValid || priceImpactSeverity > 3 && !isExpertMode || !!swapCallbackError,\n            error: isValid && priceImpactSeverity > 2 && !swapCallbackError,\n            children: /*#__PURE__*/_jsxDEV(Text, {\n              fontSize: 20,\n              fontWeight: 500,\n              children: swapInputError ? swapInputError : priceImpactSeverity > 3 && !isExpertMode ? `Price Impact Too High` : `Swap${priceImpactSeverity > 2 ? \" Anyway\" : \"\"}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 558,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 536,\n            columnNumber: 15\n          }, this), showApproveFlow && /*#__PURE__*/_jsxDEV(Column, {\n            style: {\n              marginTop: \"1rem\"\n            },\n            children: /*#__PURE__*/_jsxDEV(ProgressSteps, {\n              steps: [approval === ApprovalState.APPROVED]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 569,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 568,\n            columnNumber: 15\n          }, this), isExpertMode && swapErrorMessage ? /*#__PURE__*/_jsxDEV(SwapCallbackError, {\n            error: swapErrorMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 573,\n            columnNumber: 15\n          }, this) : null, betterTradeLinkV2 && toggledVersion === Version.v1 ? /*#__PURE__*/_jsxDEV(BetterTradeLink, {\n            version: betterTradeLinkV2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 576,\n            columnNumber: 15\n          }, this) : toggledVersion !== DEFAULT_VERSION && defaultTrade ? /*#__PURE__*/_jsxDEV(DefaultVersionLink, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 578,\n            columnNumber: 15\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UnsupportedCurrencyFooter, {\n      show: swapIsUnsupported,\n      currencies: [currencies.INPUT, currencies.OUTPUT]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 584,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Swap, \"zN767O5q4yMaIOXSrefW4HlfBu8=\", false, function () {\n  return [useDefaultsFromURLSearch, useCurrency, useCurrency, useQuery, useActiveWeb3React, useWalletModalToggle, useToggleSettingsMenu, useExpertModeManager, useUserSlippageTolerance, useSwapState, useENSAddress, useToggledVersion, useSwapActionHandlers, useUserSingleHopOnly];\n});\n\n_c = Swap;\n\nvar _c;\n\n$RefreshReg$(_c, \"Swap\");","map":{"version":3,"sources":["/Users/chichke/Documents/Work/Freelance/swap-project/src/pages/Swap/index.tsx"],"names":["React","useCallback","useContext","useEffect","useState","ArrowDown","ReactGA","Text","ThemeContext","AddressInputPanel","ButtonError","ButtonLight","ButtonConfirmed","Card","GreyCard","Column","AutoColumn","ConfirmSwapModal","CurrencyInputPanel","SwapPoolTabs","AutoRow","RowBetween","BetterTradeLink","DefaultVersionLink","confirmPriceImpactWithoutFee","ArrowWrapper","BottomGrouping","SwapCallbackError","Wrapper","TradePrice","TokenWarningModal","ProgressSteps","SwapHeader","INITIAL_ALLOWED_SLIPPAGE","useActiveWeb3React","useCurrency","useENSAddress","useToggledVersion","DEFAULT_VERSION","Version","useToggleSettingsMenu","useWalletModalToggle","Field","useDefaultsFromURLSearch","useSwapActionHandlers","useSwapState","useExpertModeManager","useUserSlippageTolerance","useUserSingleHopOnly","LinkStyledButton","TYPE","AppBody","ClickableText","Loader","UnsupportedCurrencyFooter","useQuery","getTokenList","Swap","loadedUrlParams","loadedInputCurrency","loadedOutputCurrency","inputCurrencyId","outputCurrencyId","handleConfirmTokenWarning","data","isLoading","isError","tokenList","tokens","account","theme","toggleWalletModal","toggleSettings","isExpertMode","allowedSlippage","independentField","typedValue","recipient","showWrap","address","recipientAddress","toggledVersion","trade","defaultTrade","parsedAmounts","INPUT","OUTPUT","onSwitchTokens","onCurrencySelection","onUserInput","onChangeRecipient","isValid","dependentField","handleTypeInput","value","handleTypeOutput","showConfirm","tradeToConfirm","swapErrorMessage","attemptingTxn","txHash","setSwapState","undefined","formattedAmounts","route","userHasSpecifiedInputOutput","noRoute","approval","approveCallback","approvalSubmitted","setApprovalSubmitted","maxAmountInput","atMaxAmountInput","Boolean","priceImpactWithoutFee","singleHopOnly","handleSwap","swapCallback","then","hash","event","category","action","label","inputAmount","currency","symbol","outputAmount","join","catch","error","message","showInverted","setShowInverted","priceImpactSeverity","showApproveFlow","handleConfirmDismiss","handleAcceptChanges","handleInputSelect","inputCurrency","handleMaxInput","toExact","handleOutputSelect","outputCurrency","swapIsUnsupported","Object","values","length","currencies","padding","primary1","text2","executionPrice","textAlign","ApprovalState","NOT_APPROVED","PENDING","APPROVED","swapCallbackError","swapInputError","marginTop","betterTradeLinkV2","v1"],"mappings":"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","sourcesContent":["import { CurrencyAmount, JSBI, Token, Trade } from \"@uniswap/sdk\";\nimport React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { ArrowDown } from \"react-feather\";\nimport ReactGA from \"react-ga\";\nimport { Text } from \"rebass\";\nimport { ThemeContext } from \"styled-components\";\nimport AddressInputPanel from \"../../components/AddressInputPanel\";\nimport {\n  ButtonError,\n  ButtonLight,\n  ButtonPrimary,\n  ButtonConfirmed,\n} from \"../../components/Button\";\nimport Card, { GreyCard } from \"../../components/Card\";\nimport Column, { AutoColumn } from \"../../components/Column\";\nimport ConfirmSwapModal from \"../../components/swap/ConfirmSwapModal\";\nimport CurrencyInputPanel from \"../../components/CurrencyInputPanel\";\nimport { SwapPoolTabs } from \"../../components/NavigationTabs\";\nimport { AutoRow, RowBetween } from \"../../components/Row\";\nimport AdvancedSwapDetailsDropdown from \"../../components/swap/AdvancedSwapDetailsDropdown\";\nimport BetterTradeLink, {\n  DefaultVersionLink,\n} from \"../../components/swap/BetterTradeLink\";\nimport confirmPriceImpactWithoutFee from \"../../components/swap/confirmPriceImpactWithoutFee\";\nimport {\n  ArrowWrapper,\n  BottomGrouping,\n  SwapCallbackError,\n  Wrapper,\n} from \"../../components/swap/styleds\";\nimport TradePrice from \"../../components/swap/TradePrice\";\nimport TokenWarningModal from \"../../components/TokenWarningModal\";\nimport ProgressSteps from \"../../components/ProgressSteps\";\nimport SwapHeader from \"../../components/swap/SwapHeader\";\n\nimport { INITIAL_ALLOWED_SLIPPAGE } from \"../../constants\";\nimport { useActiveWeb3React } from \"../../hooks\";\nimport { useCurrency } from \"../../hooks/Tokens\";\n\nimport useENSAddress from \"../../hooks/useENSAddress\";\nimport useToggledVersion, {\n  DEFAULT_VERSION,\n  Version,\n} from \"../../hooks/useToggledVersion\";\nimport useWrapCallback, { WrapType } from \"../../hooks/useWrapCallback\";\nimport {\n  useToggleSettingsMenu,\n  useWalletModalToggle,\n} from \"../../state/application/hooks\";\nimport { Field } from \"../../state/swap/actions\";\nimport {\n  useDefaultsFromURLSearch,\n  useDerivedSwapInfo,\n  useSwapActionHandlers,\n  useSwapState,\n} from \"../../state/swap/hooks\";\nimport {\n  useExpertModeManager,\n  useUserSlippageTolerance,\n  useUserSingleHopOnly,\n} from \"../../state/user/hooks\";\nimport { LinkStyledButton, TYPE } from \"../../theme\";\nimport { maxAmountSpend } from \"../../utils/maxAmountSpend\";\nimport {\n  computeTradePriceBreakdown,\n  warningSeverity,\n} from \"../../utils/prices\";\nimport AppBody from \"../AppBody\";\nimport { ClickableText } from \"../Pool/styleds\";\nimport Loader from \"../../components/Loader\";\nimport UnsupportedCurrencyFooter from \"components/swap/UnsupportedCurrencyFooter\";\nimport { isTradeBetter } from \"utils/trades\";\nimport { useQuery } from \"react-query\";\nimport getTokenList from \"utils/getTokenList\";\nimport { TokenList } from \"types\";\n\nexport default function Swap() {\n  const loadedUrlParams = useDefaultsFromURLSearch();\n\n  // token warning stuff\n  const [loadedInputCurrency, loadedOutputCurrency] = [\n    useCurrency(loadedUrlParams?.inputCurrencyId),\n    useCurrency(loadedUrlParams?.outputCurrencyId),\n  ];\n\n  const handleConfirmTokenWarning = useCallback(() => {}, []);\n\n  // dismiss warning if all imported tokens are in active lists\n  const { data, isLoading, isError } = useQuery(\"tokenList\", getTokenList);\n  const tokenList: TokenList = data?.data?.tokens;\n  const { account } = useActiveWeb3React();\n  const theme = useContext(ThemeContext);\n\n  // toggle wallet when disconnected\n  const toggleWalletModal = useWalletModalToggle();\n\n  // for expert mode\n  const toggleSettings = useToggleSettingsMenu();\n  const [isExpertMode] = useExpertModeManager();\n\n  // get custom setting values for user\n  const [allowedSlippage] = useUserSlippageTolerance();\n\n  // swap state\n  const { independentField, typedValue, recipient } = useSwapState();\n\n  const showWrap: boolean = false;\n  const { address: recipientAddress } = useENSAddress(recipient);\n  const toggledVersion = useToggledVersion();\n\n  const trade = showWrap;\n  const defaultTrade = showWrap;\n\n  const parsedAmounts = showWrap\n    ? {\n        [Field.INPUT]: 100,\n        [Field.OUTPUT]: 200,\n      }\n    : {\n        [Field.INPUT]: independentField === Field.INPUT ? 100 : 200,\n        [Field.OUTPUT]: independentField === Field.OUTPUT ? 100 : 200,\n      };\n\n  const {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient,\n  } = useSwapActionHandlers();\n  const isValid = false;\n  const dependentField: Field =\n    independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT;\n\n  const handleTypeInput = useCallback(\n    (value: string) => {\n      onUserInput(Field.INPUT, value);\n    },\n    [onUserInput]\n  );\n  const handleTypeOutput = useCallback(\n    (value: string) => {\n      onUserInput(Field.OUTPUT, value);\n    },\n    [onUserInput]\n  );\n\n  // modal and loading\n  const [\n    { showConfirm, tradeToConfirm, swapErrorMessage, attemptingTxn, txHash },\n    setSwapState,\n  ] = useState<{\n    showConfirm: boolean;\n    tradeToConfirm: Trade | undefined;\n    attemptingTxn: boolean;\n    swapErrorMessage: string | undefined;\n    txHash: string | undefined;\n  }>({\n    showConfirm: false,\n    tradeToConfirm: undefined,\n    attemptingTxn: false,\n    swapErrorMessage: undefined,\n    txHash: undefined,\n  });\n\n  const formattedAmounts = 500;\n\n  const route = trade?.route;\n  const userHasSpecifiedInputOutput = true;\n  const noRoute = !route;\n\n  // check whether the user has approved the router on the input token\n  const [approval, approveCallback] = useState(false);\n\n  // check if user has gone through approval process, used to show two step buttons, reset on token change\n  const [approvalSubmitted, setApprovalSubmitted] = useState<boolean>(false);\n\n  // mark when a user has submitted an approval, reset onTokenSelection for input field\n  useEffect(() => {\n    if (false) {\n      setApprovalSubmitted(true);\n    }\n  }, [approval, approvalSubmitted]);\n\n  const maxAmountInput = 10000;\n  const atMaxAmountInput = Boolean(maxAmountInput && true);\n\n  const priceImpactWithoutFee = 0.2;\n\n  const [singleHopOnly] = useUserSingleHopOnly();\n\n  const handleSwap = useCallback(() => {\n    if (\n      priceImpactWithoutFee &&\n      !confirmPriceImpactWithoutFee(priceImpactWithoutFee)\n    ) {\n      return;\n    }\n    if (!swapCallback) {\n      return;\n    }\n    setSwapState({\n      attemptingTxn: true,\n      tradeToConfirm,\n      showConfirm,\n      swapErrorMessage: undefined,\n      txHash: undefined,\n    });\n    swapCallback()\n      .then((hash) => {\n        setSwapState({\n          attemptingTxn: false,\n          tradeToConfirm,\n          showConfirm,\n          swapErrorMessage: undefined,\n          txHash: hash,\n        });\n\n        ReactGA.event({\n          category: \"Swap\",\n          action:\n            recipient === null\n              ? \"Swap w/o Send\"\n              : (recipientAddress ?? recipient) === account\n              ? \"Swap w/o Send + recipient\"\n              : \"Swap w/ Send\",\n          label: [\n            trade?.inputAmount?.currency?.symbol,\n            trade?.outputAmount?.currency?.symbol,\n            \"v1\",\n          ].join(\"/\"),\n        });\n\n        ReactGA.event({\n          category: \"Routing\",\n          action: singleHopOnly\n            ? \"Swap with multihop disabled\"\n            : \"Swap with multihop enabled\",\n        });\n      })\n      .catch((error) => {\n        setSwapState({\n          attemptingTxn: false,\n          tradeToConfirm,\n          showConfirm,\n          swapErrorMessage: error.message,\n          txHash: undefined,\n        });\n      });\n  }, [\n    priceImpactWithoutFee,\n    swapCallback,\n    tradeToConfirm,\n    showConfirm,\n    recipient,\n    recipientAddress,\n    account,\n    trade,\n    singleHopOnly,\n  ]);\n\n  // errors\n  const [showInverted, setShowInverted] = useState<boolean>(false);\n\n  // warnings on slippage\n  const priceImpactSeverity = 2;\n\n  // show approve flow when: no error on inputs, not approved or pending, or approved in current session\n  // never show if price impact is above threshold in non expert mode\n  const showApproveFlow = true;\n\n  const handleConfirmDismiss = useCallback(() => {\n    setSwapState({\n      showConfirm: false,\n      tradeToConfirm,\n      attemptingTxn,\n      swapErrorMessage,\n      txHash,\n    });\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onUserInput(Field.INPUT, \"\");\n    }\n  }, [attemptingTxn, onUserInput, swapErrorMessage, tradeToConfirm, txHash]);\n\n  const handleAcceptChanges = useCallback(() => {}, []);\n\n  const handleInputSelect = useCallback(\n    (inputCurrency) => {\n      setApprovalSubmitted(false); // reset 2 step UI for approvals\n      onCurrencySelection(Field.INPUT, inputCurrency);\n    },\n    [onCurrencySelection]\n  );\n\n  const handleMaxInput = useCallback(() => {\n    maxAmountInput && onUserInput(Field.INPUT, maxAmountInput.toExact());\n  }, [maxAmountInput, onUserInput]);\n\n  const handleOutputSelect = useCallback(\n    (outputCurrency) => onCurrencySelection(Field.OUTPUT, outputCurrency),\n    [onCurrencySelection]\n  );\n\n  const swapIsUnsupported = false;\n\n  if (isLoading) {\n    return (\n      <>\n        <AppBody>\n          <Loader stroke=\"white\" />\n        </AppBody>\n      </>\n    );\n  }\n  return (\n    <>\n      <TokenWarningModal\n        isOpen={Object.values(tokenList).length > 0 && !false}\n        tokens={tokenList}\n        onConfirm={handleConfirmTokenWarning}\n      />\n      <SwapPoolTabs active={\"swap\"} />\n      <AppBody>\n        <SwapHeader />\n        <Wrapper id=\"swap-page\">\n          <ConfirmSwapModal\n            isOpen={showConfirm}\n            trade={trade}\n            originalTrade={tradeToConfirm}\n            onAcceptChanges={handleAcceptChanges}\n            attemptingTxn={attemptingTxn}\n            txHash={txHash}\n            recipient={recipient}\n            allowedSlippage={allowedSlippage}\n            onConfirm={handleSwap}\n            swapErrorMessage={swapErrorMessage}\n            onDismiss={handleConfirmDismiss}\n          />\n\n          <AutoColumn gap={\"md\"}>\n            <CurrencyInputPanel\n              label={\n                independentField === Field.OUTPUT && !showWrap && trade\n                  ? \"From (estimated)\"\n                  : \"From\"\n              }\n              value={formattedAmounts[Field.INPUT]}\n              showMaxButton={!atMaxAmountInput}\n              currency={currencies[Field.INPUT]}\n              onUserInput={handleTypeInput}\n              onMax={handleMaxInput}\n              onCurrencySelect={handleInputSelect}\n              otherCurrency={currencies[Field.OUTPUT]}\n              id=\"swap-currency-input\"\n            />\n            <AutoColumn justify=\"space-between\">\n              <AutoRow\n                justify={isExpertMode ? \"space-between\" : \"center\"}\n                style={{ padding: \"0 1rem\" }}\n              >\n                <ArrowWrapper clickable>\n                  <ArrowDown\n                    size=\"16\"\n                    onClick={() => {\n                      setApprovalSubmitted(false); // reset 2 step UI for approvals\n                      onSwitchTokens();\n                    }}\n                    color={\n                      currencies[Field.INPUT] && currencies[Field.OUTPUT]\n                        ? theme.primary1\n                        : theme.text2\n                    }\n                  />\n                </ArrowWrapper>\n                {recipient === null && !showWrap && isExpertMode ? (\n                  <LinkStyledButton\n                    id=\"add-recipient-button\"\n                    onClick={() => onChangeRecipient(\"\")}\n                  >\n                    + Add a send (optional)\n                  </LinkStyledButton>\n                ) : null}\n              </AutoRow>\n            </AutoColumn>\n            <CurrencyInputPanel\n              value={formattedAmounts[Field.OUTPUT]}\n              onUserInput={handleTypeOutput}\n              label={\n                independentField === Field.INPUT && !showWrap && trade\n                  ? \"To (estimated)\"\n                  : \"To\"\n              }\n              showMaxButton={false}\n              currency={currencies[Field.OUTPUT]}\n              onCurrencySelect={handleOutputSelect}\n              otherCurrency={currencies[Field.INPUT]}\n              id=\"swap-currency-output\"\n            />\n\n            {recipient !== null && !showWrap ? (\n              <>\n                <AutoRow justify=\"space-between\" style={{ padding: \"0 1rem\" }}>\n                  <ArrowWrapper clickable={false}>\n                    <ArrowDown size=\"16\" color={theme.text2} />\n                  </ArrowWrapper>\n                  <LinkStyledButton\n                    id=\"remove-recipient-button\"\n                    onClick={() => onChangeRecipient(null)}\n                  >\n                    - Remove send\n                  </LinkStyledButton>\n                </AutoRow>\n                <AddressInputPanel\n                  id=\"recipient\"\n                  value={recipient}\n                  onChange={onChangeRecipient}\n                />\n              </>\n            ) : null}\n\n            {showWrap ? null : (\n              <Card\n                padding={showWrap ? \".25rem 1rem 0 1rem\" : \"0px\"}\n                borderRadius={\"20px\"}\n              >\n                <AutoColumn gap=\"8px\" style={{ padding: \"0 16px\" }}>\n                  {Boolean(trade) && (\n                    <RowBetween align=\"center\">\n                      <Text fontWeight={500} fontSize={14} color={theme.text2}>\n                        Price\n                      </Text>\n                      <TradePrice\n                        price={trade?.executionPrice}\n                        showInverted={showInverted}\n                        setShowInverted={setShowInverted}\n                      />\n                    </RowBetween>\n                  )}\n                  {allowedSlippage !== INITIAL_ALLOWED_SLIPPAGE && (\n                    <RowBetween align=\"center\">\n                      <ClickableText\n                        fontWeight={500}\n                        fontSize={14}\n                        color={theme.text2}\n                        onClick={toggleSettings}\n                      >\n                        Slippage Tolerance\n                      </ClickableText>\n                      <ClickableText\n                        fontWeight={500}\n                        fontSize={14}\n                        color={theme.text2}\n                        onClick={toggleSettings}\n                      >\n                        {allowedSlippage / 100}%\n                      </ClickableText>\n                    </RowBetween>\n                  )}\n                </AutoColumn>\n              </Card>\n            )}\n          </AutoColumn>\n          <BottomGrouping>\n            {!account ? (\n              <ButtonLight onClick={toggleWalletModal}>\n                Connect Wallet\n              </ButtonLight>\n            ) : noRoute && userHasSpecifiedInputOutput ? (\n              <GreyCard style={{ textAlign: \"center\" }}>\n                <TYPE.main mb=\"4px\">\n                  Insufficient liquidity for this trade.\n                </TYPE.main>\n                {singleHopOnly && (\n                  <TYPE.main mb=\"4px\">Try enabling multi-hop trades.</TYPE.main>\n                )}\n              </GreyCard>\n            ) : showApproveFlow ? (\n              <RowBetween>\n                <ButtonConfirmed\n                  onClick={approveCallback}\n                  disabled={\n                    approval !== ApprovalState.NOT_APPROVED || approvalSubmitted\n                  }\n                  width=\"48%\"\n                  altDisabledStyle={approval === ApprovalState.PENDING} // show solid button while waiting\n                  confirmed={approval === ApprovalState.APPROVED}\n                >\n                  {approval === ApprovalState.PENDING ? (\n                    <AutoRow gap=\"6px\" justify=\"center\">\n                      Approving <Loader stroke=\"white\" />\n                    </AutoRow>\n                  ) : approvalSubmitted &&\n                    approval === ApprovalState.APPROVED ? (\n                    \"Approved\"\n                  ) : (\n                    \"Approve \" + currencies[Field.INPUT]?.symbol\n                  )}\n                </ButtonConfirmed>\n                <ButtonError\n                  onClick={() => {\n                    if (isExpertMode) {\n                      handleSwap();\n                    } else {\n                      setSwapState({\n                        tradeToConfirm: trade,\n                        attemptingTxn: false,\n                        swapErrorMessage: undefined,\n                        showConfirm: true,\n                        txHash: undefined,\n                      });\n                    }\n                  }}\n                  width=\"48%\"\n                  id=\"swap-button\"\n                  disabled={\n                    !isValid ||\n                    approval !== ApprovalState.APPROVED ||\n                    (priceImpactSeverity > 3 && !isExpertMode)\n                  }\n                  error={isValid && priceImpactSeverity > 2}\n                >\n                  <Text fontSize={16} fontWeight={500}>\n                    {priceImpactSeverity > 3 && !isExpertMode\n                      ? `Price Impact High`\n                      : `Swap${priceImpactSeverity > 2 ? \" Anyway\" : \"\"}`}\n                  </Text>\n                </ButtonError>\n              </RowBetween>\n            ) : (\n              <ButtonError\n                onClick={() => {\n                  if (isExpertMode) {\n                    handleSwap();\n                  } else {\n                    setSwapState({\n                      tradeToConfirm: trade,\n                      attemptingTxn: false,\n                      swapErrorMessage: undefined,\n                      showConfirm: true,\n                      txHash: undefined,\n                    });\n                  }\n                }}\n                id=\"swap-button\"\n                disabled={\n                  !isValid ||\n                  (priceImpactSeverity > 3 && !isExpertMode) ||\n                  !!swapCallbackError\n                }\n                error={isValid && priceImpactSeverity > 2 && !swapCallbackError}\n              >\n                <Text fontSize={20} fontWeight={500}>\n                  {swapInputError\n                    ? swapInputError\n                    : priceImpactSeverity > 3 && !isExpertMode\n                    ? `Price Impact Too High`\n                    : `Swap${priceImpactSeverity > 2 ? \" Anyway\" : \"\"}`}\n                </Text>\n              </ButtonError>\n            )}\n            {showApproveFlow && (\n              <Column style={{ marginTop: \"1rem\" }}>\n                <ProgressSteps steps={[approval === ApprovalState.APPROVED]} />\n              </Column>\n            )}\n            {isExpertMode && swapErrorMessage ? (\n              <SwapCallbackError error={swapErrorMessage} />\n            ) : null}\n            {betterTradeLinkV2 && toggledVersion === Version.v1 ? (\n              <BetterTradeLink version={betterTradeLinkV2} />\n            ) : toggledVersion !== DEFAULT_VERSION && defaultTrade ? (\n              <DefaultVersionLink />\n            ) : null}\n          </BottomGrouping>\n        </Wrapper>\n      </AppBody>\n      {\n        <UnsupportedCurrencyFooter\n          show={swapIsUnsupported}\n          currencies={[currencies.INPUT, currencies.OUTPUT]}\n        />\n      }\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}