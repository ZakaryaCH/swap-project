{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$(),\n    _s9 = $RefreshSig$();\n\nimport { PRELOADED_PROPOSALS } from \"./../../constants/index\";\nimport { TokenAmount } from \"@uniswap/sdk\";\nimport { isAddress } from \"ethers/lib/utils\";\nimport { useGovernanceContract, useUniContract } from \"../../hooks/useContract\";\nimport { useSingleCallResult, useSingleContractMultipleData } from \"../multicall/hooks\";\nimport { useActiveWeb3React } from \"../../hooks\";\nimport { ethers, utils } from \"ethers\";\nimport { calculateGasMargin } from \"../../utils\";\nimport { useTransactionAdder } from \"../transactions/hooks\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport { abi as GOV_ABI } from \"@uniswap/governance/build/GovernorAlpha.json\";\n\nconst enumerateProposalState = state => {\n  const proposalStates = [\"pending\", \"active\", \"canceled\", \"defeated\", \"succeeded\", \"queued\", \"expired\", \"executed\"];\n  return proposalStates[state];\n}; // get count of all proposals made\n\n\nexport function useProposalCount() {\n  _s();\n\n  const gov = useGovernanceContract();\n  const res = useSingleCallResult(gov, \"proposalCount\");\n\n  if (res.result && !res.loading) {\n    return parseInt(res.result[0]);\n  }\n\n  return undefined;\n}\n/**\n * Need proposal events to get description data emitted from\n * new proposal event.\n */\n\n_s(useProposalCount, \"AMy12v9M/SNQ/XRsDKIevMm6Ug0=\", false, function () {\n  return [useGovernanceContract, useSingleCallResult];\n});\n\nexport function useDataFromEventLogs() {\n  _s2();\n\n  var _govContract$filters;\n\n  const {\n    library\n  } = useActiveWeb3React();\n  const [formattedEvents, setFormattedEvents] = useState();\n  const govContract = useGovernanceContract(); // create filter for these specific events\n\n  const filter = { ...(govContract === null || govContract === void 0 ? void 0 : (_govContract$filters = govContract.filters) === null || _govContract$filters === void 0 ? void 0 : _govContract$filters[\"ProposalCreated\"]()),\n    fromBlock: 0,\n    toBlock: \"latest\"\n  };\n  const eventParser = new ethers.utils.Interface(GOV_ABI);\n  useEffect(() => {\n    async function fetchData() {\n      const pastEvents = await (library === null || library === void 0 ? void 0 : library.getLogs(filter)); // reverse events to get them from newest to odlest\n\n      const formattedEventData = pastEvents === null || pastEvents === void 0 ? void 0 : pastEvents.map(event => {\n        const eventParsed = eventParser.parseLog(event).args;\n        return {\n          description: eventParsed.description,\n          details: eventParsed.targets.map((target, i) => {\n            const signature = eventParsed.signatures[i];\n            const [name, types] = signature.substr(0, signature.length - 1).split(\"(\");\n            const calldata = eventParsed.calldatas[i];\n            const decoded = utils.defaultAbiCoder.decode(types.split(\",\"), calldata);\n            return {\n              target,\n              functionSig: name,\n              callData: decoded.join(\", \")\n            };\n          })\n        };\n      }).reverse();\n      setFormattedEvents(formattedEventData);\n    }\n\n    if (!formattedEvents) {\n      fetchData();\n    }\n  }, [eventParser, filter, library, formattedEvents]);\n  return formattedEvents;\n} // get data for all past and active proposals\n\n_s2(useDataFromEventLogs, \"4eth59sKWabwxcuENIemA+tthmc=\", false, function () {\n  return [useActiveWeb3React, useGovernanceContract];\n});\n\nexport function useAllProposalData() {\n  _s3();\n\n  const proposalCount = useProposalCount();\n  const govContract = useGovernanceContract();\n  const proposalIndexes = [];\n\n  for (let i = 1; i <= (proposalCount !== null && proposalCount !== void 0 ? proposalCount : 0); i++) {\n    proposalIndexes.push([i]);\n  } // get metadata from past events\n\n\n  const formattedEvents = useDataFromEventLogs(); // get all proposal entities\n\n  const allProposals = useSingleContractMultipleData(govContract, \"proposals\", proposalIndexes); // get all proposal states\n\n  const allProposalStates = useSingleContractMultipleData(govContract, \"state\", proposalIndexes);\n\n  if (formattedEvents && allProposals && allProposalStates) {\n    allProposals.reverse();\n    allProposalStates.reverse();\n    return allProposals.filter((p, i) => {\n      var _allProposalStates$i;\n\n      return Boolean(p.result) && Boolean((_allProposalStates$i = allProposalStates[i]) === null || _allProposalStates$i === void 0 ? void 0 : _allProposalStates$i.result) && Boolean(formattedEvents[i]);\n    }).map((p, i) => {\n      var _allProposals$i, _allProposals$i$resul, _allProposals$i2, _allProposals$i2$resu, _enumerateProposalSta, _allProposalStates$i2, _allProposalStates$i3, _allProposals$i3, _allProposals$i3$resu, _allProposals$i4, _allProposals$i4$resu, _allProposals$i5, _allProposals$i5$resu, _allProposals$i5$resu2, _allProposals$i6, _allProposals$i6$resu, _allProposals$i6$resu2;\n\n      const description = PRELOADED_PROPOSALS.get(allProposals.length - i - 1) || formattedEvents[i].description;\n      const formattedProposal = {\n        id: (_allProposals$i = allProposals[i]) === null || _allProposals$i === void 0 ? void 0 : (_allProposals$i$resul = _allProposals$i.result) === null || _allProposals$i$resul === void 0 ? void 0 : _allProposals$i$resul.id.toString(),\n        title: (description === null || description === void 0 ? void 0 : description.split(/# |\\n/g)[1]) || \"Untitled\",\n        description: description || \"No description.\",\n        proposer: (_allProposals$i2 = allProposals[i]) === null || _allProposals$i2 === void 0 ? void 0 : (_allProposals$i2$resu = _allProposals$i2.result) === null || _allProposals$i2$resu === void 0 ? void 0 : _allProposals$i2$resu.proposer,\n        status: (_enumerateProposalSta = enumerateProposalState((_allProposalStates$i2 = allProposalStates[i]) === null || _allProposalStates$i2 === void 0 ? void 0 : (_allProposalStates$i3 = _allProposalStates$i2.result) === null || _allProposalStates$i3 === void 0 ? void 0 : _allProposalStates$i3[0])) !== null && _enumerateProposalSta !== void 0 ? _enumerateProposalSta : \"Undetermined\",\n        forCount: parseFloat(ethers.utils.formatUnits((_allProposals$i3 = allProposals[i]) === null || _allProposals$i3 === void 0 ? void 0 : (_allProposals$i3$resu = _allProposals$i3.result) === null || _allProposals$i3$resu === void 0 ? void 0 : _allProposals$i3$resu.forVotes.toString(), 18)),\n        againstCount: parseFloat(ethers.utils.formatUnits((_allProposals$i4 = allProposals[i]) === null || _allProposals$i4 === void 0 ? void 0 : (_allProposals$i4$resu = _allProposals$i4.result) === null || _allProposals$i4$resu === void 0 ? void 0 : _allProposals$i4$resu.againstVotes.toString(), 18)),\n        startBlock: parseInt((_allProposals$i5 = allProposals[i]) === null || _allProposals$i5 === void 0 ? void 0 : (_allProposals$i5$resu = _allProposals$i5.result) === null || _allProposals$i5$resu === void 0 ? void 0 : (_allProposals$i5$resu2 = _allProposals$i5$resu.startBlock) === null || _allProposals$i5$resu2 === void 0 ? void 0 : _allProposals$i5$resu2.toString()),\n        endBlock: parseInt((_allProposals$i6 = allProposals[i]) === null || _allProposals$i6 === void 0 ? void 0 : (_allProposals$i6$resu = _allProposals$i6.result) === null || _allProposals$i6$resu === void 0 ? void 0 : (_allProposals$i6$resu2 = _allProposals$i6$resu.endBlock) === null || _allProposals$i6$resu2 === void 0 ? void 0 : _allProposals$i6$resu2.toString()),\n        details: formattedEvents[i].details\n      };\n      return formattedProposal;\n    });\n  } else {\n    return [];\n  }\n}\n\n_s3(useAllProposalData, \"/WcjByTiPHndORQKXpOl+GC8dgQ=\", false, function () {\n  return [useProposalCount, useGovernanceContract, useDataFromEventLogs, useSingleContractMultipleData, useSingleContractMultipleData];\n});\n\nexport function useProposalData(id) {\n  _s4();\n\n  const allProposalData = useAllProposalData();\n  return allProposalData === null || allProposalData === void 0 ? void 0 : allProposalData.find(p => p.id === id);\n} // get the users delegatee if it exists\n\n_s4(useProposalData, \"F3k3FhGyr7f8AaGlb8LZ0mtExSQ=\", false, function () {\n  return [useAllProposalData];\n});\n\nexport function useUserDelegatee() {\n  _s5();\n\n  var _result$;\n\n  const {\n    account\n  } = useActiveWeb3React();\n  const uniContract = useUniContract();\n  const {\n    result\n  } = useSingleCallResult(uniContract, \"delegates\", [account !== null && account !== void 0 ? account : undefined]);\n  return (_result$ = result === null || result === void 0 ? void 0 : result[0]) !== null && _result$ !== void 0 ? _result$ : undefined;\n} // gets the users current votes\n\n_s5(useUserDelegatee, \"eFppHS3EelWrPCls/KfVDgdoxrA=\", false, function () {\n  return [useActiveWeb3React, useUniContract, useSingleCallResult];\n});\n\nexport function useUserVotes() {\n  _s6();\n\n  var _useSingleCallResult, _useSingleCallResult$;\n\n  const {\n    account,\n    chainId\n  } = useActiveWeb3React();\n  const uniContract = useUniContract(); // check for available votes\n\n  const uni = chainId ? UNI[chainId] : undefined;\n  const votes = (_useSingleCallResult = useSingleCallResult(uniContract, \"getCurrentVotes\", [account !== null && account !== void 0 ? account : undefined])) === null || _useSingleCallResult === void 0 ? void 0 : (_useSingleCallResult$ = _useSingleCallResult.result) === null || _useSingleCallResult$ === void 0 ? void 0 : _useSingleCallResult$[0];\n  return votes && uni ? new TokenAmount(uni, votes) : undefined;\n} // fetch available votes as of block (usually proposal start block)\n\n_s6(useUserVotes, \"Oj1EIAaOA8kFSVIG4a7iJEAv6gM=\", false, function () {\n  return [useActiveWeb3React, useUniContract, useSingleCallResult];\n});\n\nexport function useUserVotesAsOfBlock(block) {\n  _s7();\n\n  var _useSingleCallResult2, _useSingleCallResult3;\n\n  const {\n    account,\n    chainId\n  } = useActiveWeb3React();\n  const uniContract = useUniContract(); // check for available votes\n\n  const uni = chainId ? UNI[chainId] : undefined;\n  const votes = (_useSingleCallResult2 = useSingleCallResult(uniContract, \"getPriorVotes\", [account !== null && account !== void 0 ? account : undefined, block !== null && block !== void 0 ? block : undefined])) === null || _useSingleCallResult2 === void 0 ? void 0 : (_useSingleCallResult3 = _useSingleCallResult2.result) === null || _useSingleCallResult3 === void 0 ? void 0 : _useSingleCallResult3[0];\n  return votes && uni ? new TokenAmount(uni, votes) : undefined;\n}\n\n_s7(useUserVotesAsOfBlock, \"Oj1EIAaOA8kFSVIG4a7iJEAv6gM=\", false, function () {\n  return [useActiveWeb3React, useUniContract, useSingleCallResult];\n});\n\nexport function useDelegateCallback() {\n  _s8();\n\n  const {\n    account,\n    chainId,\n    library\n  } = useActiveWeb3React();\n  const addTransaction = useTransactionAdder();\n  const uniContract = useUniContract();\n  return useCallback(delegatee => {\n    if (!library || !chainId || !account || !isAddress(delegatee !== null && delegatee !== void 0 ? delegatee : \"\")) return undefined;\n    const args = [delegatee];\n    if (!uniContract) throw new Error(\"No UNI Contract!\");\n    return uniContract.estimateGas.delegate(...args, {}).then(estimatedGasLimit => {\n      return uniContract.delegate(...args, {\n        value: null,\n        gasLimit: calculateGasMargin(estimatedGasLimit)\n      }).then(response => {\n        addTransaction(response, {\n          summary: `Delegated votes`\n        });\n        return response.hash;\n      });\n    });\n  }, [account, addTransaction, chainId, library, uniContract]);\n}\n\n_s8(useDelegateCallback, \"U/KI23NLrlfHj0yXDkveqwkfyxQ=\", false, function () {\n  return [useActiveWeb3React, useTransactionAdder, useUniContract];\n});\n\nexport function useVoteCallback() {\n  _s9();\n\n  const {\n    account\n  } = useActiveWeb3React();\n  const govContract = useGovernanceContract();\n  const addTransaction = useTransactionAdder();\n  const voteCallback = useCallback((proposalId, support) => {\n    if (!account || !govContract || !proposalId) return;\n    const args = [proposalId, support];\n    return govContract.estimateGas.castVote(...args, {}).then(estimatedGasLimit => {\n      return govContract.castVote(...args, {\n        value: null,\n        gasLimit: calculateGasMargin(estimatedGasLimit)\n      }).then(response => {\n        addTransaction(response, {\n          summary: `Voted ${support ? \"for \" : \"against\"} proposal ${proposalId}`\n        });\n        return response.hash;\n      });\n    });\n  }, [account, addTransaction, govContract]);\n  return {\n    voteCallback\n  };\n}\n\n_s9(useVoteCallback, \"Zv6XxMkUklQXrI8OpPmAKi8rd4g=\", false, function () {\n  return [useActiveWeb3React, useGovernanceContract, useTransactionAdder];\n});","map":{"version":3,"sources":["/Users/chichke/Documents/Work/Freelance/swap-project/src/state/governance/hooks.ts"],"names":["PRELOADED_PROPOSALS","TokenAmount","isAddress","useGovernanceContract","useUniContract","useSingleCallResult","useSingleContractMultipleData","useActiveWeb3React","ethers","utils","calculateGasMargin","useTransactionAdder","useState","useEffect","useCallback","abi","GOV_ABI","enumerateProposalState","state","proposalStates","useProposalCount","gov","res","result","loading","parseInt","undefined","useDataFromEventLogs","library","formattedEvents","setFormattedEvents","govContract","filter","filters","fromBlock","toBlock","eventParser","Interface","fetchData","pastEvents","getLogs","formattedEventData","map","event","eventParsed","parseLog","args","description","details","targets","target","i","signature","signatures","name","types","substr","length","split","calldata","calldatas","decoded","defaultAbiCoder","decode","functionSig","callData","join","reverse","useAllProposalData","proposalCount","proposalIndexes","push","allProposals","allProposalStates","p","Boolean","get","formattedProposal","id","toString","title","proposer","status","forCount","parseFloat","formatUnits","forVotes","againstCount","againstVotes","startBlock","endBlock","useProposalData","allProposalData","find","useUserDelegatee","account","uniContract","useUserVotes","chainId","uni","UNI","votes","useUserVotesAsOfBlock","block","useDelegateCallback","addTransaction","delegatee","Error","estimateGas","delegate","then","estimatedGasLimit","value","gasLimit","response","summary","hash","useVoteCallback","voteCallback","proposalId","support","castVote"],"mappings":"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","sourcesContent":["import { PRELOADED_PROPOSALS } from \"./../../constants/index\";\nimport { TokenAmount } from \"@uniswap/sdk\";\nimport { isAddress } from \"ethers/lib/utils\";\nimport { useGovernanceContract, useUniContract } from \"../../hooks/useContract\";\nimport {\n  useSingleCallResult,\n  useSingleContractMultipleData,\n} from \"../multicall/hooks\";\nimport { useActiveWeb3React } from \"../../hooks\";\nimport { ethers, utils } from \"ethers\";\nimport { calculateGasMargin } from \"../../utils\";\nimport { TransactionResponse } from \"@ethersproject/providers\";\nimport { useTransactionAdder } from \"../transactions/hooks\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport { abi as GOV_ABI } from \"@uniswap/governance/build/GovernorAlpha.json\";\n\ninterface ProposalDetail {\n  target: string;\n  functionSig: string;\n  callData: string;\n}\n\nexport interface ProposalData {\n  id: string;\n  title: string;\n  description: string;\n  proposer: string;\n  status: string;\n  forCount: number;\n  againstCount: number;\n  startBlock: number;\n  endBlock: number;\n  details: ProposalDetail[];\n}\n\nconst enumerateProposalState = (state: number) => {\n  const proposalStates = [\n    \"pending\",\n    \"active\",\n    \"canceled\",\n    \"defeated\",\n    \"succeeded\",\n    \"queued\",\n    \"expired\",\n    \"executed\",\n  ];\n  return proposalStates[state];\n};\n\n// get count of all proposals made\nexport function useProposalCount(): number | undefined {\n  const gov = useGovernanceContract();\n  const res = useSingleCallResult(gov, \"proposalCount\");\n  if (res.result && !res.loading) {\n    return parseInt(res.result[0]);\n  }\n  return undefined;\n}\n\n/**\n * Need proposal events to get description data emitted from\n * new proposal event.\n */\nexport function useDataFromEventLogs() {\n  const { library } = useActiveWeb3React();\n  const [formattedEvents, setFormattedEvents] = useState<any>();\n  const govContract = useGovernanceContract();\n\n  // create filter for these specific events\n  const filter = {\n    ...govContract?.filters?.[\"ProposalCreated\"](),\n    fromBlock: 0,\n    toBlock: \"latest\",\n  };\n  const eventParser = new ethers.utils.Interface(GOV_ABI);\n\n  useEffect(() => {\n    async function fetchData() {\n      const pastEvents = await library?.getLogs(filter);\n      // reverse events to get them from newest to odlest\n      const formattedEventData = pastEvents\n        ?.map((event) => {\n          const eventParsed = eventParser.parseLog(event).args;\n          return {\n            description: eventParsed.description,\n            details: eventParsed.targets.map((target: string, i: number) => {\n              const signature = eventParsed.signatures[i];\n              const [name, types] = signature\n                .substr(0, signature.length - 1)\n                .split(\"(\");\n\n              const calldata = eventParsed.calldatas[i];\n              const decoded = utils.defaultAbiCoder.decode(\n                types.split(\",\"),\n                calldata\n              );\n\n              return {\n                target,\n                functionSig: name,\n                callData: decoded.join(\", \"),\n              };\n            }),\n          };\n        })\n        .reverse();\n      setFormattedEvents(formattedEventData);\n    }\n    if (!formattedEvents) {\n      fetchData();\n    }\n  }, [eventParser, filter, library, formattedEvents]);\n\n  return formattedEvents;\n}\n\n// get data for all past and active proposals\nexport function useAllProposalData() {\n  const proposalCount = useProposalCount();\n  const govContract = useGovernanceContract();\n\n  const proposalIndexes = [];\n  for (let i = 1; i <= (proposalCount ?? 0); i++) {\n    proposalIndexes.push([i]);\n  }\n\n  // get metadata from past events\n  const formattedEvents = useDataFromEventLogs();\n\n  // get all proposal entities\n  const allProposals = useSingleContractMultipleData(\n    govContract,\n    \"proposals\",\n    proposalIndexes\n  );\n\n  // get all proposal states\n  const allProposalStates = useSingleContractMultipleData(\n    govContract,\n    \"state\",\n    proposalIndexes\n  );\n\n  if (formattedEvents && allProposals && allProposalStates) {\n    allProposals.reverse();\n    allProposalStates.reverse();\n\n    return allProposals\n      .filter((p, i) => {\n        return (\n          Boolean(p.result) &&\n          Boolean(allProposalStates[i]?.result) &&\n          Boolean(formattedEvents[i])\n        );\n      })\n      .map((p, i) => {\n        const description =\n          PRELOADED_PROPOSALS.get(allProposals.length - i - 1) ||\n          formattedEvents[i].description;\n        const formattedProposal: ProposalData = {\n          id: allProposals[i]?.result?.id.toString(),\n          title: description?.split(/# |\\n/g)[1] || \"Untitled\",\n          description: description || \"No description.\",\n          proposer: allProposals[i]?.result?.proposer,\n          status:\n            enumerateProposalState(allProposalStates[i]?.result?.[0]) ??\n            \"Undetermined\",\n          forCount: parseFloat(\n            ethers.utils.formatUnits(\n              allProposals[i]?.result?.forVotes.toString(),\n              18\n            )\n          ),\n          againstCount: parseFloat(\n            ethers.utils.formatUnits(\n              allProposals[i]?.result?.againstVotes.toString(),\n              18\n            )\n          ),\n          startBlock: parseInt(allProposals[i]?.result?.startBlock?.toString()),\n          endBlock: parseInt(allProposals[i]?.result?.endBlock?.toString()),\n          details: formattedEvents[i].details,\n        };\n        return formattedProposal;\n      });\n  } else {\n    return [];\n  }\n}\n\nexport function useProposalData(id: string): ProposalData | undefined {\n  const allProposalData = useAllProposalData();\n  return allProposalData?.find((p) => p.id === id);\n}\n\n// get the users delegatee if it exists\nexport function useUserDelegatee(): string {\n  const { account } = useActiveWeb3React();\n  const uniContract = useUniContract();\n  const { result } = useSingleCallResult(uniContract, \"delegates\", [\n    account ?? undefined,\n  ]);\n  return result?.[0] ?? undefined;\n}\n\n// gets the users current votes\nexport function useUserVotes(): TokenAmount | undefined {\n  const { account, chainId } = useActiveWeb3React();\n  const uniContract = useUniContract();\n\n  // check for available votes\n  const uni = chainId ? UNI[chainId] : undefined;\n  const votes = useSingleCallResult(uniContract, \"getCurrentVotes\", [\n    account ?? undefined,\n  ])?.result?.[0];\n  return votes && uni ? new TokenAmount(uni, votes) : undefined;\n}\n\n// fetch available votes as of block (usually proposal start block)\nexport function useUserVotesAsOfBlock(\n  block: number | undefined\n): TokenAmount | undefined {\n  const { account, chainId } = useActiveWeb3React();\n  const uniContract = useUniContract();\n\n  // check for available votes\n  const uni = chainId ? UNI[chainId] : undefined;\n  const votes = useSingleCallResult(uniContract, \"getPriorVotes\", [\n    account ?? undefined,\n    block ?? undefined,\n  ])?.result?.[0];\n  return votes && uni ? new TokenAmount(uni, votes) : undefined;\n}\n\nexport function useDelegateCallback(): (\n  delegatee: string | undefined\n) => undefined | Promise<string> {\n  const { account, chainId, library } = useActiveWeb3React();\n  const addTransaction = useTransactionAdder();\n\n  const uniContract = useUniContract();\n\n  return useCallback(\n    (delegatee: string | undefined) => {\n      if (!library || !chainId || !account || !isAddress(delegatee ?? \"\"))\n        return undefined;\n      const args = [delegatee];\n      if (!uniContract) throw new Error(\"No UNI Contract!\");\n      return uniContract.estimateGas\n        .delegate(...args, {})\n        .then((estimatedGasLimit) => {\n          return uniContract\n            .delegate(...args, {\n              value: null,\n              gasLimit: calculateGasMargin(estimatedGasLimit),\n            })\n            .then((response: TransactionResponse) => {\n              addTransaction(response, {\n                summary: `Delegated votes`,\n              });\n              return response.hash;\n            });\n        });\n    },\n    [account, addTransaction, chainId, library, uniContract]\n  );\n}\n\nexport function useVoteCallback(): {\n  voteCallback: (\n    proposalId: string | undefined,\n    support: boolean\n  ) => undefined | Promise<string>;\n} {\n  const { account } = useActiveWeb3React();\n\n  const govContract = useGovernanceContract();\n  const addTransaction = useTransactionAdder();\n\n  const voteCallback = useCallback(\n    (proposalId: string | undefined, support: boolean) => {\n      if (!account || !govContract || !proposalId) return;\n      const args = [proposalId, support];\n      return govContract.estimateGas\n        .castVote(...args, {})\n        .then((estimatedGasLimit) => {\n          return govContract\n            .castVote(...args, {\n              value: null,\n              gasLimit: calculateGasMargin(estimatedGasLimit),\n            })\n            .then((response: TransactionResponse) => {\n              addTransaction(response, {\n                summary: `Voted ${\n                  support ? \"for \" : \"against\"\n                } proposal ${proposalId}`,\n              });\n              return response.hash;\n            });\n        });\n    },\n    [account, addTransaction, govContract]\n  );\n  return { voteCallback };\n}\n"]},"metadata":{},"sourceType":"module"}