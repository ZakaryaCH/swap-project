{"ast":null,"code":"// import { Currency, ETHER, JSBI, TokenAmount } from '@uniswap/sdk'\n// import React, { useCallback, useEffect, useState } from 'react'\n// import { Plus } from 'react-feather'\n// import { Text } from 'rebass'\n// import { ButtonDropdownLight } from '../../components/Button'\n// import { LightCard } from '../../components/Card'\n// import { AutoColumn, ColumnCenter } from '../../components/Column'\n// import CurrencyLogo from '../../components/CurrencyLogo'\n// import { FindPoolTabs } from '../../components/NavigationTabs'\n// import { MinimalPositionCard } from '../../components/PositionCard'\n// import Row from '../../components/Row'\n// import CurrencySearchModal from '../../components/SearchModal/CurrencySearchModal'\n// import { PairState, usePair } from '../../data/Reserves'\n// import { useActiveWeb3React } from '../../hooks'\n// import { usePairAdder } from '../../state/user/hooks'\n// import { useTokenBalance } from '../../state/wallet/hooks'\n// import { StyledInternalLink } from '../../theme'\n// import { currencyId } from '../../utils/currencyId'\n// import AppBody from '../AppBody'\n// import { Dots } from '../Pool/styleds'\n// import { BlueCard } from '../../components/Card'\n// import { TYPE } from '../../theme'\n// enum Fields {\n//   TOKEN0 = 0,\n//   TOKEN1 = 1\n// }\n// export default function PoolFinder() {\n//   const { account } = useActiveWeb3React()\n//   const [showSearch, setShowSearch] = useState<boolean>(false)\n//   const [activeField, setActiveField] = useState<number>(Fields.TOKEN1)\n//   const [currency0, setCurrency0] = useState<Currency | null>(ETHER)\n//   const [currency1, setCurrency1] = useState<Currency | null>(null)\n//   const [pairState, pair] = usePair(currency0 ?? undefined, currency1 ?? undefined)\n//   const addPair = usePairAdder()\n//   useEffect(() => {\n//     if (pair) {\n//       addPair(pair)\n//     }\n//   }, [pair, addPair])\n//   const validPairNoLiquidity: boolean =\n//     pairState === PairState.NOT_EXISTS ||\n//     Boolean(\n//       pairState === PairState.EXISTS &&\n//         pair &&\n//         JSBI.equal(pair.reserve0.raw, JSBI.BigInt(0)) &&\n//         JSBI.equal(pair.reserve1.raw, JSBI.BigInt(0))\n//     )\n//   const position: TokenAmount | undefined = useTokenBalance(account ?? undefined, pair?.liquidityToken)\n//   const hasPosition = Boolean(position && JSBI.greaterThan(position.raw, JSBI.BigInt(0)))\n//   const handleCurrencySelect = useCallback(\n//     (currency: Currency) => {\n//       if (activeField === Fields.TOKEN0) {\n//         setCurrency0(currency)\n//       } else {\n//         setCurrency1(currency)\n//       }\n//     },\n//     [activeField]\n//   )\n//   const handleSearchDismiss = useCallback(() => {\n//     setShowSearch(false)\n//   }, [setShowSearch])\n//   const prerequisiteMessage = (\n//     <LightCard padding=\"45px 10px\">\n//       <Text textAlign=\"center\">\n//         {!account ? 'Connect to a wallet to find pools' : 'Select a token to find your liquidity.'}\n//       </Text>\n//     </LightCard>\n//   )\n//   return (\n//     <AppBody>\n//       <FindPoolTabs />\n//       <AutoColumn style={{ padding: '1rem' }} gap=\"md\">\n//         <BlueCard>\n//           <AutoColumn gap=\"10px\">\n//             <TYPE.link fontWeight={400} color={'primaryText1'}>\n//               <b>Tip:</b> Use this tool to find pairs that don&apos;t automatically appear in the interface.\n//             </TYPE.link>\n//           </AutoColumn>\n//         </BlueCard>\n//         <ButtonDropdownLight\n//           onClick={() => {\n//             setShowSearch(true)\n//             setActiveField(Fields.TOKEN0)\n//           }}\n//         >\n//           {currency0 ? (\n//             <Row>\n//               <CurrencyLogo currency={currency0} />\n//               <Text fontWeight={500} fontSize={20} marginLeft={'12px'}>\n//                 {currency0.symbol}\n//               </Text>\n//             </Row>\n//           ) : (\n//             <Text fontWeight={500} fontSize={20} marginLeft={'12px'}>\n//               Select a Token\n//             </Text>\n//           )}\n//         </ButtonDropdownLight>\n//         <ColumnCenter>\n//           <Plus size=\"16\" color=\"#888D9B\" />\n//         </ColumnCenter>\n//         <ButtonDropdownLight\n//           onClick={() => {\n//             setShowSearch(true)\n//             setActiveField(Fields.TOKEN1)\n//           }}\n//         >\n//           {currency1 ? (\n//             <Row>\n//               <CurrencyLogo currency={currency1} />\n//               <Text fontWeight={500} fontSize={20} marginLeft={'12px'}>\n//                 {currency1.symbol}\n//               </Text>\n//             </Row>\n//           ) : (\n//             <Text fontWeight={500} fontSize={20} marginLeft={'12px'}>\n//               Select a Token\n//             </Text>\n//           )}\n//         </ButtonDropdownLight>\n//         {hasPosition && (\n//           <ColumnCenter\n//             style={{ justifyItems: 'center', backgroundColor: '', padding: '12px 0px', borderRadius: '12px' }}\n//           >\n//             <Text textAlign=\"center\" fontWeight={500}>\n//               Pool Found!\n//             </Text>\n//             <StyledInternalLink to={`/pool`}>\n//               <Text textAlign=\"center\">Manage this pool.</Text>\n//             </StyledInternalLink>\n//           </ColumnCenter>\n//         )}\n//         {currency0 && currency1 ? (\n//           pairState === PairState.EXISTS ? (\n//             hasPosition && pair ? (\n//               <MinimalPositionCard pair={pair} border=\"1px solid #CED0D9\" />\n//             ) : (\n//               <LightCard padding=\"45px 10px\">\n//                 <AutoColumn gap=\"sm\" justify=\"center\">\n//                   <Text textAlign=\"center\">You donâ€™t have liquidity in this pool yet.</Text>\n//                   <StyledInternalLink to={`/add/${currencyId(currency0)}/${currencyId(currency1)}`}>\n//                     <Text textAlign=\"center\">Add liquidity.</Text>\n//                   </StyledInternalLink>\n//                 </AutoColumn>\n//               </LightCard>\n//             )\n//           ) : validPairNoLiquidity ? (\n//             <LightCard padding=\"45px 10px\">\n//               <AutoColumn gap=\"sm\" justify=\"center\">\n//                 <Text textAlign=\"center\">No pool found.</Text>\n//                 <StyledInternalLink to={`/add/${currencyId(currency0)}/${currencyId(currency1)}`}>\n//                   Create pool.\n//                 </StyledInternalLink>\n//               </AutoColumn>\n//             </LightCard>\n//           ) : pairState === PairState.INVALID ? (\n//             <LightCard padding=\"45px 10px\">\n//               <AutoColumn gap=\"sm\" justify=\"center\">\n//                 <Text textAlign=\"center\" fontWeight={500}>\n//                   Invalid pair.\n//                 </Text>\n//               </AutoColumn>\n//             </LightCard>\n//           ) : pairState === PairState.LOADING ? (\n//             <LightCard padding=\"45px 10px\">\n//               <AutoColumn gap=\"sm\" justify=\"center\">\n//                 <Text textAlign=\"center\">\n//                   Loading\n//                   <Dots />\n//                 </Text>\n//               </AutoColumn>\n//             </LightCard>\n//           ) : null\n//         ) : (\n//           prerequisiteMessage\n//         )}\n//       </AutoColumn>\n//       <CurrencySearchModal\n//         isOpen={showSearch}\n//         onCurrencySelect={handleCurrencySelect}\n//         onDismiss={handleSearchDismiss}\n//         showCommonBases\n//         selectedCurrency={(activeField === Fields.TOKEN0 ? currency1 : currency0) ?? undefined}\n//       />\n//     </AppBody>\n//   )\n// }\nexport default 1;","map":{"version":3,"sources":["/Users/chichke/Documents/Work/Freelance/swap-project/src/pages/PoolFinder/index.tsx"],"names":[],"mappingseAAe,CAAf","sourcesContent":["// import { Currency, ETHER, JSBI, TokenAmount } from '@uniswap/sdk'\n// import React, { useCallback, useEffect, useState } from 'react'\n// import { Plus } from 'react-feather'\n// import { Text } from 'rebass'\n// import { ButtonDropdownLight } from '../../components/Button'\n// import { LightCard } from '../../components/Card'\n// import { AutoColumn, ColumnCenter } from '../../components/Column'\n// import CurrencyLogo from '../../components/CurrencyLogo'\n// import { FindPoolTabs } from '../../components/NavigationTabs'\n// import { MinimalPositionCard } from '../../components/PositionCard'\n// import Row from '../../components/Row'\n// import CurrencySearchModal from '../../components/SearchModal/CurrencySearchModal'\n// import { PairState, usePair } from '../../data/Reserves'\n// import { useActiveWeb3React } from '../../hooks'\n// import { usePairAdder } from '../../state/user/hooks'\n// import { useTokenBalance } from '../../state/wallet/hooks'\n// import { StyledInternalLink } from '../../theme'\n// import { currencyId } from '../../utils/currencyId'\n// import AppBody from '../AppBody'\n// import { Dots } from '../Pool/styleds'\n// import { BlueCard } from '../../components/Card'\n// import { TYPE } from '../../theme'\n\n// enum Fields {\n//   TOKEN0 = 0,\n//   TOKEN1 = 1\n// }\n\n// export default function PoolFinder() {\n//   const { account } = useActiveWeb3React()\n\n//   const [showSearch, setShowSearch] = useState<boolean>(false)\n//   const [activeField, setActiveField] = useState<number>(Fields.TOKEN1)\n\n//   const [currency0, setCurrency0] = useState<Currency | null>(ETHER)\n//   const [currency1, setCurrency1] = useState<Currency | null>(null)\n\n//   const [pairState, pair] = usePair(currency0 ?? undefined, currency1 ?? undefined)\n//   const addPair = usePairAdder()\n//   useEffect(() => {\n//     if (pair) {\n//       addPair(pair)\n//     }\n//   }, [pair, addPair])\n\n//   const validPairNoLiquidity: boolean =\n//     pairState === PairState.NOT_EXISTS ||\n//     Boolean(\n//       pairState === PairState.EXISTS &&\n//         pair &&\n//         JSBI.equal(pair.reserve0.raw, JSBI.BigInt(0)) &&\n//         JSBI.equal(pair.reserve1.raw, JSBI.BigInt(0))\n//     )\n\n//   const position: TokenAmount | undefined = useTokenBalance(account ?? undefined, pair?.liquidityToken)\n//   const hasPosition = Boolean(position && JSBI.greaterThan(position.raw, JSBI.BigInt(0)))\n\n//   const handleCurrencySelect = useCallback(\n//     (currency: Currency) => {\n//       if (activeField === Fields.TOKEN0) {\n//         setCurrency0(currency)\n//       } else {\n//         setCurrency1(currency)\n//       }\n//     },\n//     [activeField]\n//   )\n\n//   const handleSearchDismiss = useCallback(() => {\n//     setShowSearch(false)\n//   }, [setShowSearch])\n\n//   const prerequisiteMessage = (\n//     <LightCard padding=\"45px 10px\">\n//       <Text textAlign=\"center\">\n//         {!account ? 'Connect to a wallet to find pools' : 'Select a token to find your liquidity.'}\n//       </Text>\n//     </LightCard>\n//   )\n\n//   return (\n//     <AppBody>\n//       <FindPoolTabs />\n//       <AutoColumn style={{ padding: '1rem' }} gap=\"md\">\n//         <BlueCard>\n//           <AutoColumn gap=\"10px\">\n//             <TYPE.link fontWeight={400} color={'primaryText1'}>\n//               <b>Tip:</b> Use this tool to find pairs that don&apos;t automatically appear in the interface.\n//             </TYPE.link>\n//           </AutoColumn>\n//         </BlueCard>\n//         <ButtonDropdownLight\n//           onClick={() => {\n//             setShowSearch(true)\n//             setActiveField(Fields.TOKEN0)\n//           }}\n//         >\n//           {currency0 ? (\n//             <Row>\n//               <CurrencyLogo currency={currency0} />\n//               <Text fontWeight={500} fontSize={20} marginLeft={'12px'}>\n//                 {currency0.symbol}\n//               </Text>\n//             </Row>\n//           ) : (\n//             <Text fontWeight={500} fontSize={20} marginLeft={'12px'}>\n//               Select a Token\n//             </Text>\n//           )}\n//         </ButtonDropdownLight>\n\n//         <ColumnCenter>\n//           <Plus size=\"16\" color=\"#888D9B\" />\n//         </ColumnCenter>\n\n//         <ButtonDropdownLight\n//           onClick={() => {\n//             setShowSearch(true)\n//             setActiveField(Fields.TOKEN1)\n//           }}\n//         >\n//           {currency1 ? (\n//             <Row>\n//               <CurrencyLogo currency={currency1} />\n//               <Text fontWeight={500} fontSize={20} marginLeft={'12px'}>\n//                 {currency1.symbol}\n//               </Text>\n//             </Row>\n//           ) : (\n//             <Text fontWeight={500} fontSize={20} marginLeft={'12px'}>\n//               Select a Token\n//             </Text>\n//           )}\n//         </ButtonDropdownLight>\n\n//         {hasPosition && (\n//           <ColumnCenter\n//             style={{ justifyItems: 'center', backgroundColor: '', padding: '12px 0px', borderRadius: '12px' }}\n//           >\n//             <Text textAlign=\"center\" fontWeight={500}>\n//               Pool Found!\n//             </Text>\n//             <StyledInternalLink to={`/pool`}>\n//               <Text textAlign=\"center\">Manage this pool.</Text>\n//             </StyledInternalLink>\n//           </ColumnCenter>\n//         )}\n\n//         {currency0 && currency1 ? (\n//           pairState === PairState.EXISTS ? (\n//             hasPosition && pair ? (\n//               <MinimalPositionCard pair={pair} border=\"1px solid #CED0D9\" />\n//             ) : (\n//               <LightCard padding=\"45px 10px\">\n//                 <AutoColumn gap=\"sm\" justify=\"center\">\n//                   <Text textAlign=\"center\">You donâ€™t have liquidity in this pool yet.</Text>\n//                   <StyledInternalLink to={`/add/${currencyId(currency0)}/${currencyId(currency1)}`}>\n//                     <Text textAlign=\"center\">Add liquidity.</Text>\n//                   </StyledInternalLink>\n//                 </AutoColumn>\n//               </LightCard>\n//             )\n//           ) : validPairNoLiquidity ? (\n//             <LightCard padding=\"45px 10px\">\n//               <AutoColumn gap=\"sm\" justify=\"center\">\n//                 <Text textAlign=\"center\">No pool found.</Text>\n//                 <StyledInternalLink to={`/add/${currencyId(currency0)}/${currencyId(currency1)}`}>\n//                   Create pool.\n//                 </StyledInternalLink>\n//               </AutoColumn>\n//             </LightCard>\n//           ) : pairState === PairState.INVALID ? (\n//             <LightCard padding=\"45px 10px\">\n//               <AutoColumn gap=\"sm\" justify=\"center\">\n//                 <Text textAlign=\"center\" fontWeight={500}>\n//                   Invalid pair.\n//                 </Text>\n//               </AutoColumn>\n//             </LightCard>\n//           ) : pairState === PairState.LOADING ? (\n//             <LightCard padding=\"45px 10px\">\n//               <AutoColumn gap=\"sm\" justify=\"center\">\n//                 <Text textAlign=\"center\">\n//                   Loading\n//                   <Dots />\n//                 </Text>\n//               </AutoColumn>\n//             </LightCard>\n//           ) : null\n//         ) : (\n//           prerequisiteMessage\n//         )}\n//       </AutoColumn>\n\n//       <CurrencySearchModal\n//         isOpen={showSearch}\n//         onCurrencySelect={handleCurrencySelect}\n//         onDismiss={handleSearchDismiss}\n//         showCommonBases\n//         selectedCurrency={(activeField === Fields.TOKEN0 ? currency1 : currency0) ?? undefined}\n//       />\n//     </AppBody>\n//   )\n// }\nexport default 1;\n"]},"metadata":{},"sourceType":"module"}