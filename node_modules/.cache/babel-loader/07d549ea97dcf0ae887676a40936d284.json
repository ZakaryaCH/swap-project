{"ast":null,"code":"// import React, { useState } from 'react'\n// import Modal from '../Modal'\n// import { AutoColumn, ColumnCenter } from '../Column'\n// import styled from 'styled-components'\n// import { DataCard, CardSection, Break } from '../earn/styled'\n// import { RowBetween } from '../Row'\n// import { TYPE, ExternalLink, CloseIcon, CustomLightSpinner, UniTokenAnimated } from '../../theme'\n// import { ButtonPrimary } from '../Button'\n// import { useClaimCallback, useUserUnclaimedAmount, useUserHasAvailableClaim } from '../../state/claim/hooks'\n// import tokenLogo from '../../assets/images/token-logo.png'\n// import Circle from '../../assets/images/blue-loader.svg'\n// import { Text } from 'rebass'\n// import AddressInputPanel from '../AddressInputPanel'\n// import useENS from '../../hooks/useENS'\n// import { useActiveWeb3React } from '../../hooks'\n// import { isAddress } from 'ethers/lib/utils'\n// import Confetti from '../Confetti'\n// import { CardNoise, CardBGImage, CardBGImageSmaller } from '../earn/styled'\n// import { useIsTransactionPending } from '../../state/transactions/hooks'\n// import { TokenAmount } from '@uniswap/sdk'\n// import { getEtherscanLink, shortenAddress } from '../../utils'\n// const ContentWrapper = styled(AutoColumn)`\n//   width: 100%;\n// `\n// const ModalUpper = styled(DataCard)`\n//   box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\n//   background: radial-gradient(76.02% 75.41% at 1.84% 0%, #ff007a 0%, #021d43 100%);\n// `\n// const ConfirmOrLoadingWrapper = styled.div<{ activeBG: boolean }>`\n//   width: 100%;\n//   padding: 24px;\n//   position: relative;\n//   background: ${({ activeBG }) =>\n//     activeBG &&\n//     'radial-gradient(76.02% 75.41% at 1.84% 0%, rgba(255, 0, 122, 0.2) 0%, rgba(33, 114, 229, 0.2) 100%), #FFFFFF;'};\n// `\n// const ConfirmedIcon = styled(ColumnCenter)`\n//   padding: 60px 0;\n// `\n// export default function AddressClaimModal({ isOpen, onDismiss }: { isOpen: boolean; onDismiss: () => void }) {\n//   const { chainId } = useActiveWeb3React()\n//   // state for smart contract input\n//   const [typed, setTyped] = useState('')\n//   function handleRecipientType(val: string) {\n//     setTyped(val)\n//   }\n//   // monitor for third party recipient of claim\n//   const { address: parsedAddress } = useENS(typed)\n//   // used for UI loading states\n//   const [attempting, setAttempting] = useState<boolean>(false)\n//   // monitor the status of the claim from contracts and txns\n//   const { claimCallback } = useClaimCallback(parsedAddress)\n//   const unclaimedAmount: TokenAmount | undefined = useUserUnclaimedAmount(parsedAddress)\n//   // check if the user has something available\n//   const hasAvailableClaim = useUserHasAvailableClaim(parsedAddress)\n//   const [hash, setHash] = useState<string | undefined>()\n//   // monitor the status of the claim from contracts and txns\n//   const claimPending = useIsTransactionPending(hash ?? '')\n//   const claimConfirmed = hash && !claimPending\n//   // use the hash to monitor this txn\n//   function onClaim() {\n//     setAttempting(true)\n//     claimCallback()\n//       .then(hash => {\n//         setHash(hash)\n//       })\n//       // reset modal and log error\n//       .catch(error => {\n//         setAttempting(false)\n//         console.log(error)\n//       })\n//   }\n//   function wrappedOnDismiss() {\n//     setAttempting(false)\n//     setHash(undefined)\n//     setTyped('')\n//     onDismiss()\n//   }\n//   return (\n//     <Modal isOpen={isOpen} onDismiss={wrappedOnDismiss} maxHeight={90}>\n//       <Confetti start={Boolean(isOpen && claimConfirmed && attempting)} />\n//       {!attempting && (\n//         <ContentWrapper gap=\"lg\">\n//           <ModalUpper>\n//             <CardBGImage />\n//             <CardNoise />\n//             <CardSection gap=\"md\">\n//               <RowBetween>\n//                 <TYPE.white fontWeight={500}>Claim POGO Token</TYPE.white>\n//                 <CloseIcon onClick={wrappedOnDismiss} style={{ zIndex: 99 }} stroke=\"white\" />\n//               </RowBetween>\n//               <TYPE.white fontWeight={700} fontSize={36}>\n//                 {unclaimedAmount?.toFixed(0, { groupSeparator: ',' } ?? '-')} POGO\n//               </TYPE.white>\n//             </CardSection>\n//             <Break />\n//           </ModalUpper>\n//           <AutoColumn gap=\"md\" style={{ padding: '1rem', paddingTop: '0' }} justify=\"center\">\n//             <TYPE.subHeader fontWeight={500}>\n//               Enter an address to trigger a POGO claim. If the address has any claimable POGO it will be sent to them on\n//               submission.\n//             </TYPE.subHeader>\n//             <AddressInputPanel value={typed} onChange={handleRecipientType} />\n//             {parsedAddress && !hasAvailableClaim && (\n//               <TYPE.error error={true}>Address has no available claim</TYPE.error>\n//             )}\n//             <ButtonPrimary\n//               disabled={!isAddress(parsedAddress ?? '') || !hasAvailableClaim}\n//               padding=\"16px 16px\"\n//               width=\"100%\"\n//               borderRadius=\"12px\"\n//               mt=\"1rem\"\n//               onClick={onClaim}\n//             >\n//               Claim POGO\n//             </ButtonPrimary>\n//           </AutoColumn>\n//         </ContentWrapper>\n//       )}\n//       {(attempting || claimConfirmed) && (\n//         <ConfirmOrLoadingWrapper activeBG={true}>\n//           <CardNoise />\n//           <CardBGImageSmaller desaturate />\n//           <RowBetween>\n//             <div />\n//             <CloseIcon onClick={wrappedOnDismiss} style={{ zIndex: 99 }} stroke=\"black\" />\n//           </RowBetween>\n//           <ConfirmedIcon>\n//             {!claimConfirmed ? (\n//               <CustomLightSpinner src={Circle} alt=\"loader\" size={'90px'} />\n//             ) : (\n//               <UniTokenAnimated width=\"72px\" src={tokenLogo} />\n//             )}\n//           </ConfirmedIcon>\n//           <AutoColumn gap=\"100px\" justify={'center'}>\n//             <AutoColumn gap=\"12px\" justify={'center'}>\n//               <TYPE.largeHeader fontWeight={600} color=\"black\">\n//                 {claimConfirmed ? 'Claimed' : 'Claiming'}\n//               </TYPE.largeHeader>\n//               {!claimConfirmed && (\n//                 <Text fontSize={36} color={'#ff007a'} fontWeight={800}>\n//                   {unclaimedAmount?.toFixed(0, { groupSeparator: ',' } ?? '-')} UNI\n//                 </Text>\n//               )}\n//               {parsedAddress && (\n//                 <TYPE.largeHeader fontWeight={600} color=\"black\">\n//                   for {shortenAddress(parsedAddress)}\n//                 </TYPE.largeHeader>\n//               )}\n//             </AutoColumn>\n//             {claimConfirmed && (\n//               <>\n//                 <TYPE.subHeader fontWeight={500} color=\"black\">\n//                   <span role=\"img\" aria-label=\"party-hat\">\n//                     ðŸŽ‰{' '}\n//                   </span>\n//                   Welcome to team Unicorn :){' '}\n//                   <span role=\"img\" aria-label=\"party-hat\">\n//                     ðŸŽ‰\n//                   </span>\n//                 </TYPE.subHeader>\n//               </>\n//             )}\n//             {attempting && !hash && (\n//               <TYPE.subHeader color=\"black\">Confirm this transaction in your wallet</TYPE.subHeader>\n//             )}\n//             {attempting && hash && !claimConfirmed && chainId && hash && (\n//               <ExternalLink href={getEtherscanLink(chainId, hash, 'transaction')} style={{ zIndex: 99 }}>\n//                 View transaction on Etherscan\n//               </ExternalLink>\n//             )}\n//           </AutoColumn>\n//         </ConfirmOrLoadingWrapper>\n//       )}\n//     </Modal>\n//   )\n// }","map":{"version":3,"sources":["/Users/chichke/Documents/Work/Freelance/swap-project/src/components/claim/AddressClaimModal.tsx"],"names":[],"mappingssourcesContent":["// import React, { useState } from 'react'\n// import Modal from '../Modal'\n// import { AutoColumn, ColumnCenter } from '../Column'\n// import styled from 'styled-components'\n// import { DataCard, CardSection, Break } from '../earn/styled'\n// import { RowBetween } from '../Row'\n// import { TYPE, ExternalLink, CloseIcon, CustomLightSpinner, UniTokenAnimated } from '../../theme'\n// import { ButtonPrimary } from '../Button'\n// import { useClaimCallback, useUserUnclaimedAmount, useUserHasAvailableClaim } from '../../state/claim/hooks'\n// import tokenLogo from '../../assets/images/token-logo.png'\n// import Circle from '../../assets/images/blue-loader.svg'\n// import { Text } from 'rebass'\n// import AddressInputPanel from '../AddressInputPanel'\n// import useENS from '../../hooks/useENS'\n// import { useActiveWeb3React } from '../../hooks'\n// import { isAddress } from 'ethers/lib/utils'\n// import Confetti from '../Confetti'\n// import { CardNoise, CardBGImage, CardBGImageSmaller } from '../earn/styled'\n// import { useIsTransactionPending } from '../../state/transactions/hooks'\n// import { TokenAmount } from '@uniswap/sdk'\n// import { getEtherscanLink, shortenAddress } from '../../utils'\n\n// const ContentWrapper = styled(AutoColumn)`\n//   width: 100%;\n// `\n\n// const ModalUpper = styled(DataCard)`\n//   box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\n//   background: radial-gradient(76.02% 75.41% at 1.84% 0%, #ff007a 0%, #021d43 100%);\n// `\n\n// const ConfirmOrLoadingWrapper = styled.div<{ activeBG: boolean }>`\n//   width: 100%;\n//   padding: 24px;\n//   position: relative;\n//   background: ${({ activeBG }) =>\n//     activeBG &&\n//     'radial-gradient(76.02% 75.41% at 1.84% 0%, rgba(255, 0, 122, 0.2) 0%, rgba(33, 114, 229, 0.2) 100%), #FFFFFF;'};\n// `\n\n// const ConfirmedIcon = styled(ColumnCenter)`\n//   padding: 60px 0;\n// `\n\n// export default function AddressClaimModal({ isOpen, onDismiss }: { isOpen: boolean; onDismiss: () => void }) {\n//   const { chainId } = useActiveWeb3React()\n\n//   // state for smart contract input\n//   const [typed, setTyped] = useState('')\n//   function handleRecipientType(val: string) {\n//     setTyped(val)\n//   }\n\n//   // monitor for third party recipient of claim\n//   const { address: parsedAddress } = useENS(typed)\n\n//   // used for UI loading states\n//   const [attempting, setAttempting] = useState<boolean>(false)\n\n//   // monitor the status of the claim from contracts and txns\n//   const { claimCallback } = useClaimCallback(parsedAddress)\n//   const unclaimedAmount: TokenAmount | undefined = useUserUnclaimedAmount(parsedAddress)\n\n//   // check if the user has something available\n//   const hasAvailableClaim = useUserHasAvailableClaim(parsedAddress)\n\n//   const [hash, setHash] = useState<string | undefined>()\n\n//   // monitor the status of the claim from contracts and txns\n//   const claimPending = useIsTransactionPending(hash ?? '')\n//   const claimConfirmed = hash && !claimPending\n\n//   // use the hash to monitor this txn\n\n//   function onClaim() {\n//     setAttempting(true)\n//     claimCallback()\n//       .then(hash => {\n//         setHash(hash)\n//       })\n//       // reset modal and log error\n//       .catch(error => {\n//         setAttempting(false)\n//         console.log(error)\n//       })\n//   }\n\n//   function wrappedOnDismiss() {\n//     setAttempting(false)\n//     setHash(undefined)\n//     setTyped('')\n//     onDismiss()\n//   }\n\n//   return (\n//     <Modal isOpen={isOpen} onDismiss={wrappedOnDismiss} maxHeight={90}>\n//       <Confetti start={Boolean(isOpen && claimConfirmed && attempting)} />\n//       {!attempting && (\n//         <ContentWrapper gap=\"lg\">\n//           <ModalUpper>\n//             <CardBGImage />\n//             <CardNoise />\n//             <CardSection gap=\"md\">\n//               <RowBetween>\n//                 <TYPE.white fontWeight={500}>Claim POGO Token</TYPE.white>\n//                 <CloseIcon onClick={wrappedOnDismiss} style={{ zIndex: 99 }} stroke=\"white\" />\n//               </RowBetween>\n//               <TYPE.white fontWeight={700} fontSize={36}>\n//                 {unclaimedAmount?.toFixed(0, { groupSeparator: ',' } ?? '-')} POGO\n//               </TYPE.white>\n//             </CardSection>\n//             <Break />\n//           </ModalUpper>\n//           <AutoColumn gap=\"md\" style={{ padding: '1rem', paddingTop: '0' }} justify=\"center\">\n//             <TYPE.subHeader fontWeight={500}>\n//               Enter an address to trigger a POGO claim. If the address has any claimable POGO it will be sent to them on\n//               submission.\n//             </TYPE.subHeader>\n//             <AddressInputPanel value={typed} onChange={handleRecipientType} />\n//             {parsedAddress && !hasAvailableClaim && (\n//               <TYPE.error error={true}>Address has no available claim</TYPE.error>\n//             )}\n//             <ButtonPrimary\n//               disabled={!isAddress(parsedAddress ?? '') || !hasAvailableClaim}\n//               padding=\"16px 16px\"\n//               width=\"100%\"\n//               borderRadius=\"12px\"\n//               mt=\"1rem\"\n//               onClick={onClaim}\n//             >\n//               Claim POGO\n//             </ButtonPrimary>\n//           </AutoColumn>\n//         </ContentWrapper>\n//       )}\n//       {(attempting || claimConfirmed) && (\n//         <ConfirmOrLoadingWrapper activeBG={true}>\n//           <CardNoise />\n//           <CardBGImageSmaller desaturate />\n//           <RowBetween>\n//             <div />\n//             <CloseIcon onClick={wrappedOnDismiss} style={{ zIndex: 99 }} stroke=\"black\" />\n//           </RowBetween>\n//           <ConfirmedIcon>\n//             {!claimConfirmed ? (\n//               <CustomLightSpinner src={Circle} alt=\"loader\" size={'90px'} />\n//             ) : (\n//               <UniTokenAnimated width=\"72px\" src={tokenLogo} />\n//             )}\n//           </ConfirmedIcon>\n//           <AutoColumn gap=\"100px\" justify={'center'}>\n//             <AutoColumn gap=\"12px\" justify={'center'}>\n//               <TYPE.largeHeader fontWeight={600} color=\"black\">\n//                 {claimConfirmed ? 'Claimed' : 'Claiming'}\n//               </TYPE.largeHeader>\n//               {!claimConfirmed && (\n//                 <Text fontSize={36} color={'#ff007a'} fontWeight={800}>\n//                   {unclaimedAmount?.toFixed(0, { groupSeparator: ',' } ?? '-')} UNI\n//                 </Text>\n//               )}\n//               {parsedAddress && (\n//                 <TYPE.largeHeader fontWeight={600} color=\"black\">\n//                   for {shortenAddress(parsedAddress)}\n//                 </TYPE.largeHeader>\n//               )}\n//             </AutoColumn>\n//             {claimConfirmed && (\n//               <>\n//                 <TYPE.subHeader fontWeight={500} color=\"black\">\n//                   <span role=\"img\" aria-label=\"party-hat\">\n//                     ðŸŽ‰{' '}\n//                   </span>\n//                   Welcome to team Unicorn :){' '}\n//                   <span role=\"img\" aria-label=\"party-hat\">\n//                     ðŸŽ‰\n//                   </span>\n//                 </TYPE.subHeader>\n//               </>\n//             )}\n//             {attempting && !hash && (\n//               <TYPE.subHeader color=\"black\">Confirm this transaction in your wallet</TYPE.subHeader>\n//             )}\n//             {attempting && hash && !claimConfirmed && chainId && hash && (\n//               <ExternalLink href={getEtherscanLink(chainId, hash, 'transaction')} style={{ zIndex: 99 }}>\n//                 View transaction on Etherscan\n//               </ExternalLink>\n//             )}\n//           </AutoColumn>\n//         </ConfirmOrLoadingWrapper>\n//       )}\n//     </Modal>\n//   )\n// }\n"]},"metadata":{},"sourceType":"module"}