{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { fetchTokenList } from \"../state/lists/actions\";\nimport getTokenList from \"../utils/getTokenList\";\nexport const useFetchListCallback = () => {\n  _s();\n\n  const dispatch = useDispatch(); // note: prevent dispatch if using for list search or unsupported list\n\n  return useCallback(async (listUrl, sendDispatch = true) => {\n    const requestId = nanoid();\n    sendDispatch && dispatch(fetchTokenList.pending({\n      requestId,\n      url: listUrl\n    }));\n    return getTokenList().then(tokenList => {\n      const {\n        tokens\n      } = tokenList;\n      sendDispatch && dispatch(fetchTokenList.fulfilled({\n        tokenList: tokens,\n        requestId\n      }));\n      return tokenList;\n    }).catch(error => {\n      console.debug(`Failed to get list at url ${listUrl}`, error);\n      sendDispatch && dispatch(fetchTokenList.rejected({\n        requestId,\n        errorMessage: error.message\n      }));\n      throw error;\n    });\n  }, [dispatch]);\n};\n\n_s(useFetchListCallback, \"nhyv+fhSuBJ7yx/uYuCmtG3KTzU=\", false, function () {\n  return [useDispatch];\n});","map":{"version":3,"sources":["/Users/chichke/Documents/Work/Freelance/swap-project/src/hooks/useFetchListCallback.ts"],"names":["nanoid","useCallback","useDispatch","fetchTokenList","getTokenList","useFetchListCallback","dispatch","listUrl","sendDispatch","requestId","pending","url","then","tokenList","tokens","fulfilled","catch","error","console","debug","rejected","errorMessage","message"],"mappings":";;AAAA,SAASA,MAAT,QAAuB,kBAAvB;AAGA,SAASC,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,aAA5B;AAGA,SAASC,cAAT,QAA+B,wBAA/B;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AAIA,OAAO,MAAMC,oBAAoB,GAAG,MAAM;AAAA;;AACxC,QAAMC,QAAQ,GAAGJ,WAAW,EAA5B,CADwC,CAGxC;;AACA,SAAOD,WAAW,CAChB,OAAOM,OAAP,EAAwBC,YAAY,GAAG,IAAvC,KAAgD;AAC9C,UAAMC,SAAS,GAAGT,MAAM,EAAxB;AACAQ,IAAAA,YAAY,IACVF,QAAQ,CAACH,cAAc,CAACO,OAAf,CAAuB;AAAED,MAAAA,SAAF;AAAaE,MAAAA,GAAG,EAAEJ;AAAlB,KAAvB,CAAD,CADV;AAEA,WAAOH,YAAY,GAChBQ,IADI,CACEC,SAAD,IAAe;AACnB,YAAM;AAAEC,QAAAA;AAAF,UAAaD,SAAnB;AACAL,MAAAA,YAAY,IACVF,QAAQ,CACNH,cAAc,CAACY,SAAf,CAAyB;AAAEF,QAAAA,SAAS,EAAEC,MAAb;AAAqBL,QAAAA;AAArB,OAAzB,CADM,CADV;AAIA,aAAOI,SAAP;AACD,KARI,EASJG,KATI,CASGC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACC,KAAR,CAAe,6BAA4BZ,OAAQ,EAAnD,EAAsDU,KAAtD;AACAT,MAAAA,YAAY,IACVF,QAAQ,CACNH,cAAc,CAACiB,QAAf,CAAwB;AACtBX,QAAAA,SADsB;AAEtBY,QAAAA,YAAY,EAAEJ,KAAK,CAACK;AAFE,OAAxB,CADM,CADV;AAOA,YAAML,KAAN;AACD,KAnBI,CAAP;AAoBD,GAzBe,EA0BhB,CAACX,QAAD,CA1BgB,CAAlB;AA4BD,CAhCM;;GAAMD,oB;UACMH,W","sourcesContent":["import { nanoid } from \"@reduxjs/toolkit\";\nimport { ChainId } from \"@uniswap/sdk\";\nimport { TokenList } from \"../types\";\nimport { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getNetworkLibrary } from \"../connectors\";\nimport { AppDispatch } from \"../state\";\nimport { fetchTokenList } from \"../state/lists/actions\";\nimport getTokenList from \"../utils/getTokenList\";\nimport resolveENSContentHash from \"../utils/resolveENSContentHash\";\nimport { useActiveWeb3React } from \"./index\";\n\nexport const useFetchListCallback = () => {\n  const dispatch = useDispatch<AppDispatch>();\n\n  // note: prevent dispatch if using for list search or unsupported list\n  return useCallback(\n    async (listUrl: string, sendDispatch = true) => {\n      const requestId = nanoid();\n      sendDispatch &&\n        dispatch(fetchTokenList.pending({ requestId, url: listUrl }));\n      return getTokenList()\n        .then((tokenList) => {\n          const { tokens } = tokenList;\n          sendDispatch &&\n            dispatch(\n              fetchTokenList.fulfilled({ tokenList: tokens, requestId })\n            );\n          return tokenList;\n        })\n        .catch((error) => {\n          console.debug(`Failed to get list at url ${listUrl}`, error);\n          sendDispatch &&\n            dispatch(\n              fetchTokenList.rejected({\n                requestId,\n                errorMessage: error.message,\n              })\n            );\n          throw error;\n        });\n    },\n    [dispatch]\n  );\n};\n"]},"metadata":{},"sourceType":"module"}