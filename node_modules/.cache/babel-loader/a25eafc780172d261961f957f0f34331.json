{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$(),\n    _s9 = $RefreshSig$(),\n    _s10 = $RefreshSig$();\n\nimport { useDefaultTokenList, useUnsupportedTokenList } from \"./../state/lists/hooks\";\nimport { parseBytes32String } from \"@ethersproject/strings\";\nimport { ETHER, Token, currencyEquals } from \"@uniswap/sdk\";\nimport { useMemo } from \"react\";\nimport { useCombinedActiveList, useCombinedInactiveList } from \"../state/lists/hooks\";\nimport { NEVER_RELOAD, useSingleCallResult } from \"../state/multicall/hooks\"; // import { useUserAddedTokens } from \"../state/user/hooks\";\n\nimport { isAddress } from \"../utils\";\nimport { useActiveWeb3React } from \"./index\";\nimport { useBytes32TokenContract, useTokenContract } from \"./useContract\";\nimport { filterTokens } from \"../components/SearchModal/filtering\";\nimport { arrayify } from \"ethers/lib/utils\"; // reduce token map into standard address <-> Token mapping, optionally include user added tokens\n\nfunction useTokensFromMap(tokenMap, includeUserAdded) {\n  _s();\n\n  const {\n    chainId\n  } = useActiveWeb3React(); // const userAddedTokens = useUserAddedTokens();\n\n  return useMemo(() => {\n    if (!chainId) return {}; // reduce to just tokens\n\n    const mapWithoutUrls = Object.keys(tokenMap[chainId]).reduce((newMap, address) => {\n      newMap[address] = tokenMap[chainId][address].token;\n      return newMap;\n    }, {});\n\n    if (includeUserAdded) {\n      return userAddedTokens // reduce into all ALL_TOKENS filtered by the current chain\n      .reduce((tokenMap, token) => {\n        tokenMap[token.address] = token;\n        return tokenMap;\n      }, // must make a copy because reduce modifies the map, and we do not\n      // want to make a copy in every iteration\n      { ...mapWithoutUrls\n      });\n    }\n\n    return mapWithoutUrls;\n  }, [chainId, userAddedTokens, tokenMap, includeUserAdded]);\n}\n\n_s(useTokensFromMap, \"MZB4M8cyCV+h94y3JGwcy21BfBk=\", false, function () {\n  return [useActiveWeb3React];\n});\n\nexport function useDefaultTokens() {\n  _s2();\n\n  const defaultList = useDefaultTokenList();\n  return useTokensFromMap(defaultList, false);\n}\n\n_s2(useDefaultTokens, \"KFd6g+TcR728AgRacaW35zCvQZc=\", false, function () {\n  return [useDefaultTokenList, useTokensFromMap];\n});\n\nexport function useAllTokens() {\n  _s3();\n\n  const allTokens = useCombinedActiveList();\n  return useTokensFromMap(allTokens, true);\n}\n\n_s3(useAllTokens, \"jCGW4tI4Rs1UGm9shzKA8VnDJ0A=\", false, function () {\n  return [useCombinedActiveList, useTokensFromMap];\n});\n\nexport function useAllInactiveTokens() {\n  _s4();\n\n  // get inactive tokens\n  const inactiveTokensMap = useCombinedInactiveList();\n  const inactiveTokens = useTokensFromMap(inactiveTokensMap, false); // filter out any token that are on active list\n\n  const activeTokensAddresses = Object.keys(useAllTokens());\n  const filteredInactive = activeTokensAddresses ? Object.keys(inactiveTokens).reduce((newMap, address) => {\n    if (!activeTokensAddresses.includes(address)) {\n      newMap[address] = inactiveTokens[address];\n    }\n\n    return newMap;\n  }, {}) : inactiveTokens;\n  return filteredInactive;\n}\n\n_s4(useAllInactiveTokens, \"y9223uP8GCC/3ME2n383kLmFOz4=\", false, function () {\n  return [useCombinedInactiveList, useTokensFromMap, useAllTokens];\n});\n\nexport function useUnsupportedTokens() {\n  _s5();\n\n  const unsupportedTokensMap = useUnsupportedTokenList();\n  return useTokensFromMap(unsupportedTokensMap, false);\n}\n\n_s5(useUnsupportedTokens, \"cfUcH2/tU9tFbaAvFr6x9maL1ms=\", false, function () {\n  return [useUnsupportedTokenList, useTokensFromMap];\n});\n\nexport function useIsTokenActive(token) {\n  _s6();\n\n  const activeTokens = useAllTokens();\n\n  if (!activeTokens || !token) {\n    return false;\n  }\n\n  return !!activeTokens[token.address];\n} // used to detect extra search results\n\n_s6(useIsTokenActive, \"/DZnqUeqi963rU8m84lshLFLG1g=\", false, function () {\n  return [useAllTokens];\n});\n\nexport function useFoundOnInactiveList(searchQuery) {\n  _s7();\n\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const inactiveTokens = useAllInactiveTokens();\n  return useMemo(() => {\n    if (!chainId || searchQuery === \"\") {\n      return undefined;\n    } else {\n      const tokens = filterTokens(Object.values(inactiveTokens), searchQuery);\n      return tokens;\n    }\n  }, [chainId, inactiveTokens, searchQuery]);\n} // Check if currency is included in custom list from user storage\n\n_s7(useFoundOnInactiveList, \"hwNPd01dv/ucAD4kWZcYbreBqQU=\", false, function () {\n  return [useActiveWeb3React, useAllInactiveTokens];\n});\n\nexport function useIsUserAddedToken(currency) {\n  _s8();\n\n  const userAddedTokens = useUserAddedTokens();\n\n  if (!currency) {\n    return false;\n  }\n\n  return !!userAddedTokens.find(token => currencyEquals(currency, token));\n} // parse a name or symbol from a token response\n\n_s8(useIsUserAddedToken, \"/J12HuilTfT8HPlUWn/aslQP0JY=\", true);\n\nconst BYTES32_REGEX = /^0x[a-fA-F0-9]{64}$/;\n\nfunction parseStringOrBytes32(str, bytes32, defaultValue) {\n  return str && str.length > 0 ? str : // need to check for proper bytes string and valid terminator\n  bytes32 && BYTES32_REGEX.test(bytes32) && arrayify(bytes32)[31] === 0 ? parseBytes32String(bytes32) : defaultValue;\n} // undefined if invalid or does not exist\n// null if loading\n// otherwise returns the token\n\n\nexport function useToken(tokenAddress) {\n  _s9();\n\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const tokens = useAllTokens();\n  const address = isAddress(tokenAddress);\n  const tokenContract = useTokenContract(address ? address : undefined, false);\n  const tokenContractBytes32 = useBytes32TokenContract(address ? address : undefined, false);\n  const token = address ? tokens[address] : undefined;\n  const tokenName = useSingleCallResult(token ? undefined : tokenContract, \"name\", undefined, NEVER_RELOAD);\n  const tokenNameBytes32 = useSingleCallResult(token ? undefined : tokenContractBytes32, \"name\", undefined, NEVER_RELOAD);\n  const symbol = useSingleCallResult(token ? undefined : tokenContract, \"symbol\", undefined, NEVER_RELOAD);\n  const symbolBytes32 = useSingleCallResult(token ? undefined : tokenContractBytes32, \"symbol\", undefined, NEVER_RELOAD);\n  const decimals = useSingleCallResult(token ? undefined : tokenContract, \"decimals\", undefined, NEVER_RELOAD);\n  return useMemo(() => {\n    if (token) return token;\n    if (!chainId || !address) return undefined;\n    if (decimals.loading || symbol.loading || tokenName.loading) return null;\n\n    if (decimals.result) {\n      var _symbol$result, _symbolBytes32$result, _tokenName$result, _tokenNameBytes32$res;\n\n      return new Token(chainId, address, decimals.result[0], parseStringOrBytes32((_symbol$result = symbol.result) === null || _symbol$result === void 0 ? void 0 : _symbol$result[0], (_symbolBytes32$result = symbolBytes32.result) === null || _symbolBytes32$result === void 0 ? void 0 : _symbolBytes32$result[0], \"UNKNOWN\"), parseStringOrBytes32((_tokenName$result = tokenName.result) === null || _tokenName$result === void 0 ? void 0 : _tokenName$result[0], (_tokenNameBytes32$res = tokenNameBytes32.result) === null || _tokenNameBytes32$res === void 0 ? void 0 : _tokenNameBytes32$res[0], \"Unknown Token\"));\n    }\n\n    return undefined;\n  }, [address, chainId, decimals.loading, decimals.result, symbol.loading, symbol.result, symbolBytes32.result, token, tokenName.loading, tokenName.result, tokenNameBytes32.result]);\n}\n\n_s9(useToken, \"eKyRyOw1MkhB0rg/op393nwat5k=\", false, function () {\n  return [useActiveWeb3React, useAllTokens, useTokenContract, useBytes32TokenContract, useSingleCallResult, useSingleCallResult, useSingleCallResult, useSingleCallResult, useSingleCallResult];\n});\n\nexport function useCurrency(currencyId) {\n  _s10();\n\n  const isETH = (currencyId === null || currencyId === void 0 ? void 0 : currencyId.toUpperCase()) === \"ETH\";\n  const token = useToken(isETH ? undefined : currencyId);\n  return isETH ? ETHER : token;\n}\n\n_s10(useCurrency, \"YdEbLWY6/B/ql2/5vHiby7UXKcg=\", false, function () {\n  return [useToken];\n});","map":{"version":3,"sources":["/Users/chichke/Documents/Work/Freelance/swap-project/src/hooks/Tokens.ts"],"names":["useDefaultTokenList","useUnsupportedTokenList","parseBytes32String","ETHER","Token","currencyEquals","useMemo","useCombinedActiveList","useCombinedInactiveList","NEVER_RELOAD","useSingleCallResult","isAddress","useActiveWeb3React","useBytes32TokenContract","useTokenContract","filterTokens","arrayify","useTokensFromMap","tokenMap","includeUserAdded","chainId","mapWithoutUrls","Object","keys","reduce","newMap","address","token","userAddedTokens","useDefaultTokens","defaultList","useAllTokens","allTokens","useAllInactiveTokens","inactiveTokensMap","inactiveTokens","activeTokensAddresses","filteredInactive","includes","useUnsupportedTokens","unsupportedTokensMap","useIsTokenActive","activeTokens","useFoundOnInactiveList","searchQuery","undefined","tokens","values","useIsUserAddedToken","currency","useUserAddedTokens","find","BYTES32_REGEX","parseStringOrBytes32","str","bytes32","defaultValue","length","test","useToken","tokenAddress","tokenContract","tokenContractBytes32","tokenName","tokenNameBytes32","symbol","symbolBytes32","decimals","loading","result","useCurrency","currencyId","isETH","toUpperCase"],"mappings":"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","sourcesContent":["import {\n  TokenAddressMap,\n  useDefaultTokenList,\n  useUnsupportedTokenList,\n} from \"./../state/lists/hooks\";\nimport { parseBytes32String } from \"@ethersproject/strings\";\nimport { Currency, ETHER, Token, currencyEquals } from \"@uniswap/sdk\";\nimport { useMemo } from \"react\";\nimport {\n  useCombinedActiveList,\n  useCombinedInactiveList,\n} from \"../state/lists/hooks\";\nimport { NEVER_RELOAD, useSingleCallResult } from \"../state/multicall/hooks\";\n// import { useUserAddedTokens } from \"../state/user/hooks\";\nimport { isAddress } from \"../utils\";\n\nimport { useActiveWeb3React } from \"./index\";\nimport { useBytes32TokenContract, useTokenContract } from \"./useContract\";\nimport { filterTokens } from \"../components/SearchModal/filtering\";\nimport { arrayify } from \"ethers/lib/utils\";\n\n// reduce token map into standard address <-> Token mapping, optionally include user added tokens\nfunction useTokensFromMap(\n  tokenMap: TokenAddressMap,\n  includeUserAdded: boolean\n): { [address: string]: Token } {\n  const { chainId } = useActiveWeb3React();\n  // const userAddedTokens = useUserAddedTokens();\n\n  return useMemo(() => {\n    if (!chainId) return {};\n\n    // reduce to just tokens\n    const mapWithoutUrls = Object.keys(tokenMap[chainId]).reduce<{\n      [address: string]: Token;\n    }>((newMap, address) => {\n      newMap[address] = tokenMap[chainId][address].token;\n      return newMap;\n    }, {});\n\n    if (includeUserAdded) {\n      return (\n        userAddedTokens\n          // reduce into all ALL_TOKENS filtered by the current chain\n          .reduce<{ [address: string]: Token }>(\n            (tokenMap, token) => {\n              tokenMap[token.address] = token;\n              return tokenMap;\n            },\n            // must make a copy because reduce modifies the map, and we do not\n            // want to make a copy in every iteration\n            { ...mapWithoutUrls }\n          )\n      );\n    }\n\n    return mapWithoutUrls;\n  }, [chainId, userAddedTokens, tokenMap, includeUserAdded]);\n}\n\nexport function useDefaultTokens(): { [address: string]: Token } {\n  const defaultList = useDefaultTokenList();\n  return useTokensFromMap(defaultList, false);\n}\n\nexport function useAllTokens(): { [address: string]: Token } {\n  const allTokens = useCombinedActiveList();\n  return useTokensFromMap(allTokens, true);\n}\n\nexport function useAllInactiveTokens(): { [address: string]: Token } {\n  // get inactive tokens\n  const inactiveTokensMap = useCombinedInactiveList();\n  const inactiveTokens = useTokensFromMap(inactiveTokensMap, false);\n\n  // filter out any token that are on active list\n  const activeTokensAddresses = Object.keys(useAllTokens());\n  const filteredInactive = activeTokensAddresses\n    ? Object.keys(inactiveTokens).reduce<{ [address: string]: Token }>(\n        (newMap, address) => {\n          if (!activeTokensAddresses.includes(address)) {\n            newMap[address] = inactiveTokens[address];\n          }\n          return newMap;\n        },\n        {}\n      )\n    : inactiveTokens;\n\n  return filteredInactive;\n}\n\nexport function useUnsupportedTokens(): { [address: string]: Token } {\n  const unsupportedTokensMap = useUnsupportedTokenList();\n  return useTokensFromMap(unsupportedTokensMap, false);\n}\n\nexport function useIsTokenActive(token: Token | undefined | null): boolean {\n  const activeTokens = useAllTokens();\n\n  if (!activeTokens || !token) {\n    return false;\n  }\n\n  return !!activeTokens[token.address];\n}\n\n// used to detect extra search results\nexport function useFoundOnInactiveList(\n  searchQuery: string\n): Token[] | undefined {\n  const { chainId } = useActiveWeb3React();\n  const inactiveTokens = useAllInactiveTokens();\n\n  return useMemo(() => {\n    if (!chainId || searchQuery === \"\") {\n      return undefined;\n    } else {\n      const tokens = filterTokens(Object.values(inactiveTokens), searchQuery);\n      return tokens;\n    }\n  }, [chainId, inactiveTokens, searchQuery]);\n}\n\n// Check if currency is included in custom list from user storage\nexport function useIsUserAddedToken(\n  currency: Currency | undefined | null\n): boolean {\n  const userAddedTokens = useUserAddedTokens();\n\n  if (!currency) {\n    return false;\n  }\n\n  return !!userAddedTokens.find((token) => currencyEquals(currency, token));\n}\n\n// parse a name or symbol from a token response\nconst BYTES32_REGEX = /^0x[a-fA-F0-9]{64}$/;\n\nfunction parseStringOrBytes32(\n  str: string | undefined,\n  bytes32: string | undefined,\n  defaultValue: string\n): string {\n  return str && str.length > 0\n    ? str\n    : // need to check for proper bytes string and valid terminator\n    bytes32 && BYTES32_REGEX.test(bytes32) && arrayify(bytes32)[31] === 0\n    ? parseBytes32String(bytes32)\n    : defaultValue;\n}\n\n// undefined if invalid or does not exist\n// null if loading\n// otherwise returns the token\nexport function useToken(tokenAddress?: string): Token | undefined | null {\n  const { chainId } = useActiveWeb3React();\n  const tokens = useAllTokens();\n\n  const address = isAddress(tokenAddress);\n\n  const tokenContract = useTokenContract(address ? address : undefined, false);\n  const tokenContractBytes32 = useBytes32TokenContract(\n    address ? address : undefined,\n    false\n  );\n  const token: Token | undefined = address ? tokens[address] : undefined;\n\n  const tokenName = useSingleCallResult(\n    token ? undefined : tokenContract,\n    \"name\",\n    undefined,\n    NEVER_RELOAD\n  );\n  const tokenNameBytes32 = useSingleCallResult(\n    token ? undefined : tokenContractBytes32,\n    \"name\",\n    undefined,\n    NEVER_RELOAD\n  );\n  const symbol = useSingleCallResult(\n    token ? undefined : tokenContract,\n    \"symbol\",\n    undefined,\n    NEVER_RELOAD\n  );\n  const symbolBytes32 = useSingleCallResult(\n    token ? undefined : tokenContractBytes32,\n    \"symbol\",\n    undefined,\n    NEVER_RELOAD\n  );\n  const decimals = useSingleCallResult(\n    token ? undefined : tokenContract,\n    \"decimals\",\n    undefined,\n    NEVER_RELOAD\n  );\n\n  return useMemo(() => {\n    if (token) return token;\n    if (!chainId || !address) return undefined;\n    if (decimals.loading || symbol.loading || tokenName.loading) return null;\n    if (decimals.result) {\n      return new Token(\n        chainId,\n        address,\n        decimals.result[0],\n        parseStringOrBytes32(\n          symbol.result?.[0],\n          symbolBytes32.result?.[0],\n          \"UNKNOWN\"\n        ),\n        parseStringOrBytes32(\n          tokenName.result?.[0],\n          tokenNameBytes32.result?.[0],\n          \"Unknown Token\"\n        )\n      );\n    }\n    return undefined;\n  }, [\n    address,\n    chainId,\n    decimals.loading,\n    decimals.result,\n    symbol.loading,\n    symbol.result,\n    symbolBytes32.result,\n    token,\n    tokenName.loading,\n    tokenName.result,\n    tokenNameBytes32.result,\n  ]);\n}\n\nexport function useCurrency(\n  currencyId: string | undefined\n): Currency | null | undefined {\n  const isETH = currencyId?.toUpperCase() === \"ETH\";\n  const token = useToken(isETH ? undefined : currencyId);\n  return isETH ? ETHER : token;\n}\n"]},"metadata":{},"sourceType":"module"}