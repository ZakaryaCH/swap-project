{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$(),\n    _s9 = $RefreshSig$(),\n    _s10 = $RefreshSig$(),\n    _s11 = $RefreshSig$(),\n    _s12 = $RefreshSig$(),\n    _s13 = $RefreshSig$(),\n    _s14 = $RefreshSig$();\n\nimport { Pair, Token } from \"@uniswap/sdk\";\nimport flatMap from \"lodash.flatmap\";\nimport ReactGA from \"react-ga\";\nimport { useCallback, useMemo } from \"react\";\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\nimport { PINNED_PAIRS } from \"../../constants\";\nimport { useActiveWeb3React } from \"../../hooks\";\nimport { useAllTokens } from \"../../hooks/Tokens\";\nimport { addSerializedPair, addSerializedToken, removeSerializedToken, updateUserDarkMode, updateUserDeadline, updateUserExpertMode, updateUserSlippageTolerance, toggleURLWarning, updateUserSingleHopOnly } from \"./actions\";\n\nfunction serializeToken(token) {\n  return {\n    chainId: token.chainId,\n    address: token.address,\n    decimals: token.decimals,\n    symbol: token.symbol,\n    name: token.name\n  };\n}\n\nfunction deserializeToken(serializedToken) {\n  return new Token(serializedToken.chainId, serializedToken.address, serializedToken.decimals, serializedToken.symbol, serializedToken.name);\n}\n\nexport function useIsDarkMode() {\n  _s();\n\n  const {\n    userDarkMode,\n    matchesDarkMode\n  } = useSelector(({\n    user: {\n      matchesDarkMode,\n      userDarkMode\n    }\n  }) => ({\n    userDarkMode,\n    matchesDarkMode\n  }), shallowEqual);\n  return userDarkMode === null ? matchesDarkMode : userDarkMode;\n}\n\n_s(useIsDarkMode, \"fn6etfcHXfMs02JV/usc15XJU0k=\", false, function () {\n  return [useSelector];\n});\n\nexport function useDarkModeManager() {\n  _s2();\n\n  const dispatch = useDispatch();\n  const darkMode = useIsDarkMode();\n  const toggleSetDarkMode = useCallback(() => {\n    dispatch(updateUserDarkMode({\n      userDarkMode: !darkMode\n    }));\n  }, [darkMode, dispatch]);\n  return [darkMode, toggleSetDarkMode];\n}\n\n_s2(useDarkModeManager, \"C48Gp1zKEL4YakCYKMkkFweY0qg=\", false, function () {\n  return [useDispatch, useIsDarkMode];\n});\n\nexport function useIsExpertMode() {\n  _s3();\n\n  return useSelector(state => state.user.userExpertMode);\n}\n\n_s3(useIsExpertMode, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport function useExpertModeManager() {\n  _s4();\n\n  const dispatch = useDispatch();\n  const expertMode = useIsExpertMode();\n  const toggleSetExpertMode = useCallback(() => {\n    dispatch(updateUserExpertMode({\n      userExpertMode: !expertMode\n    }));\n  }, [expertMode, dispatch]);\n  return [expertMode, toggleSetExpertMode];\n}\n\n_s4(useExpertModeManager, \"ULLfsmjCcahFerd6rXziokiA+RI=\", false, function () {\n  return [useDispatch, useIsExpertMode];\n});\n\nexport function useUserSingleHopOnly() {\n  _s5();\n\n  const dispatch = useDispatch();\n  const singleHopOnly = useSelector(state => state.user.userSingleHopOnly);\n  const setSingleHopOnly = useCallback(newSingleHopOnly => {\n    ReactGA.event({\n      category: \"Routing\",\n      action: newSingleHopOnly ? \"enable single hop\" : \"disable single hop\"\n    });\n    dispatch(updateUserSingleHopOnly({\n      userSingleHopOnly: newSingleHopOnly\n    }));\n  }, [dispatch]);\n  return [singleHopOnly, setSingleHopOnly];\n}\n\n_s5(useUserSingleHopOnly, \"WikX7qzoMFkBpAxkb0uK96O/O0E=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\nexport function useUserSlippageTolerance() {\n  _s6();\n\n  const dispatch = useDispatch();\n  const userSlippageTolerance = useSelector(state => {\n    return state.user.userSlippageTolerance;\n  });\n  const setUserSlippageTolerance = useCallback(userSlippageTolerance => {\n    dispatch(updateUserSlippageTolerance({\n      userSlippageTolerance\n    }));\n  }, [dispatch]);\n  return [userSlippageTolerance, setUserSlippageTolerance];\n}\n\n_s6(useUserSlippageTolerance, \"lO9PfBe6MbiNxNv0Q3TS/IyxyIE=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\nexport function useUserTransactionTTL() {\n  _s7();\n\n  const dispatch = useDispatch();\n  const userDeadline = useSelector(state => {\n    return state.user.userDeadline;\n  });\n  const setUserDeadline = useCallback(userDeadline => {\n    dispatch(updateUserDeadline({\n      userDeadline\n    }));\n  }, [dispatch]);\n  return [userDeadline, setUserDeadline];\n}\n\n_s7(useUserTransactionTTL, \"nR4EOlfoy/fKrJpN3ITukwrTqzM=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\nexport function useAddUserToken() {\n  _s8();\n\n  const dispatch = useDispatch();\n  return useCallback(token => {\n    dispatch(addSerializedToken({\n      serializedToken: serializeToken(token)\n    }));\n  }, [dispatch]);\n}\n\n_s8(useAddUserToken, \"nhyv+fhSuBJ7yx/uYuCmtG3KTzU=\", false, function () {\n  return [useDispatch];\n});\n\nexport function useRemoveUserAddedToken() {\n  _s9();\n\n  const dispatch = useDispatch();\n  return useCallback((chainId, address) => {\n    dispatch(removeSerializedToken({\n      chainId,\n      address\n    }));\n  }, [dispatch]);\n}\n\n_s9(useRemoveUserAddedToken, \"nhyv+fhSuBJ7yx/uYuCmtG3KTzU=\", false, function () {\n  return [useDispatch];\n});\n\nexport function useUserAddedTokens() {\n  _s10();\n\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const serializedTokensMap = useSelector(({\n    user: {\n      tokens\n    }\n  }) => tokens);\n  return useMemo(() => {\n    var _serializedTokensMap;\n\n    if (!chainId) return [];\n    return Object.values((_serializedTokensMap = serializedTokensMap[chainId]) !== null && _serializedTokensMap !== void 0 ? _serializedTokensMap : {}).map(deserializeToken);\n  }, [serializedTokensMap, chainId]);\n}\n\n_s10(useUserAddedTokens, \"PdCPfDsyvt0iyDvIy6GqqMS0G5U=\", false, function () {\n  return [useActiveWeb3React, useSelector];\n});\n\nfunction serializePair(pair) {\n  return {\n    token0: serializeToken(pair.token0),\n    token1: serializeToken(pair.token1)\n  };\n}\n\nexport function usePairAdder() {\n  _s11();\n\n  const dispatch = useDispatch();\n  return useCallback(pair => {\n    dispatch(addSerializedPair({\n      serializedPair: serializePair(pair)\n    }));\n  }, [dispatch]);\n}\n\n_s11(usePairAdder, \"nhyv+fhSuBJ7yx/uYuCmtG3KTzU=\", false, function () {\n  return [useDispatch];\n});\n\nexport function useURLWarningVisible() {\n  _s12();\n\n  return useSelector(state => state.user.URLWarningVisible);\n}\n\n_s12(useURLWarningVisible, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport function useURLWarningToggle() {\n  _s13();\n\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(toggleURLWarning()), [dispatch]);\n}\n/**\n * Given two tokens return the liquidity token that represents its liquidity shares\n * @param tokenA one of the two tokens\n * @param tokenB the other token\n */\n\n_s13(useURLWarningToggle, \"nhyv+fhSuBJ7yx/uYuCmtG3KTzU=\", false, function () {\n  return [useDispatch];\n});\n\nexport function toV2LiquidityToken([tokenA, tokenB]) {\n  return new Token(tokenA.chainId, Pair.getAddress(tokenA, tokenB), 18, \"UNI-V2\", \"Uniswap V2\");\n}\n/**\n * Returns all the pairs of tokens that are tracked by the user for the current chain ID.\n */\n\nexport function useTrackedTokenPairs() {\n  _s14();\n\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const tokens = useAllTokens(); // pinned pairs\n\n  const pinnedPairs = useMemo(() => {\n    var _PINNED_PAIRS$chainId;\n\n    return chainId ? (_PINNED_PAIRS$chainId = PINNED_PAIRS[chainId]) !== null && _PINNED_PAIRS$chainId !== void 0 ? _PINNED_PAIRS$chainId : [] : [];\n  }, [chainId]); // pairs for every token against every base\n\n  const generatedPairs = useMemo(() => chainId ? flatMap(Object.keys(tokens), tokenAddress => {\n    var _BASES_TO_TRACK_LIQUI;\n\n    const token = tokens[tokenAddress]; // for each token on the current chain,\n\n    return (// loop though all bases on the current chain\n      ((_BASES_TO_TRACK_LIQUI = BASES_TO_TRACK_LIQUIDITY_FOR[chainId]) !== null && _BASES_TO_TRACK_LIQUI !== void 0 ? _BASES_TO_TRACK_LIQUI : []). // to construct pairs of the given token with each base\n      map(base => {\n        if (base.address === token.address) {\n          return null;\n        } else {\n          return [base, token];\n        }\n      }).filter(p => p !== null)\n    );\n  }) : [], [tokens, chainId]); // pairs saved by users\n\n  const savedSerializedPairs = useSelector(({\n    user: {\n      pairs\n    }\n  }) => pairs);\n  const userPairs = useMemo(() => {\n    if (!chainId || !savedSerializedPairs) return [];\n    const forChain = savedSerializedPairs[chainId];\n    if (!forChain) return [];\n    return Object.keys(forChain).map(pairId => {\n      return [deserializeToken(forChain[pairId].token0), deserializeToken(forChain[pairId].token1)];\n    });\n  }, [savedSerializedPairs, chainId]);\n  const combinedList = useMemo(() => userPairs.concat(generatedPairs).concat(pinnedPairs), [generatedPairs, pinnedPairs, userPairs]);\n  return useMemo(() => {\n    // dedupes pairs of tokens in the combined list\n    const keyed = combinedList.reduce((memo, [tokenA, tokenB]) => {\n      const sorted = tokenA.sortsBefore(tokenB);\n      const key = sorted ? `${tokenA.address}:${tokenB.address}` : `${tokenB.address}:${tokenA.address}`;\n      if (memo[key]) return memo;\n      memo[key] = sorted ? [tokenA, tokenB] : [tokenB, tokenA];\n      return memo;\n    }, {});\n    return Object.keys(keyed).map(key => keyed[key]);\n  }, [combinedList]);\n}\n\n_s14(useTrackedTokenPairs, \"oBOSU+ngm2b9bAOkfOtlhmAQB98=\", false, function () {\n  return [useActiveWeb3React, useAllTokens, useSelector];\n});","map":{"version":3,"sources":["/Users/chichke/Documents/Work/Freelance/swap-project/src/state/user/hooks.tsx"],"names":["Pair","Token","flatMap","ReactGA","useCallback","useMemo","shallowEqual","useDispatch","useSelector","PINNED_PAIRS","useActiveWeb3React","useAllTokens","addSerializedPair","addSerializedToken","removeSerializedToken","updateUserDarkMode","updateUserDeadline","updateUserExpertMode","updateUserSlippageTolerance","toggleURLWarning","updateUserSingleHopOnly","serializeToken","token","chainId","address","decimals","symbol","name","deserializeToken","serializedToken","useIsDarkMode","userDarkMode","matchesDarkMode","user","useDarkModeManager","dispatch","darkMode","toggleSetDarkMode","useIsExpertMode","state","userExpertMode","useExpertModeManager","expertMode","toggleSetExpertMode","useUserSingleHopOnly","singleHopOnly","userSingleHopOnly","setSingleHopOnly","newSingleHopOnly","event","category","action","useUserSlippageTolerance","userSlippageTolerance","setUserSlippageTolerance","useUserTransactionTTL","userDeadline","setUserDeadline","useAddUserToken","useRemoveUserAddedToken","useUserAddedTokens","serializedTokensMap","tokens","Object","values","map","serializePair","pair","token0","token1","usePairAdder","serializedPair","useURLWarningVisible","URLWarningVisible","useURLWarningToggle","toV2LiquidityToken","tokenA","tokenB","getAddress","useTrackedTokenPairs","pinnedPairs","generatedPairs","keys","tokenAddress","BASES_TO_TRACK_LIQUIDITY_FOR","base","filter","p","savedSerializedPairs","pairs","userPairs","forChain","pairId","combinedList","concat","keyed","reduce","memo","sorted","sortsBefore","key"],"mappings":"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","sourcesContent":["import { ChainId, Pair, Token } from \"@uniswap/sdk\";\nimport flatMap from \"lodash.flatmap\";\nimport ReactGA from \"react-ga\";\nimport { useCallback, useMemo } from \"react\";\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\nimport { PINNED_PAIRS } from \"../../constants\";\n\nimport { useActiveWeb3React } from \"../../hooks\";\nimport { useAllTokens } from \"../../hooks/Tokens\";\nimport { AppDispatch, AppState } from \"../index\";\nimport {\n  addSerializedPair,\n  addSerializedToken,\n  removeSerializedToken,\n  SerializedPair,\n  SerializedToken,\n  updateUserDarkMode,\n  updateUserDeadline,\n  updateUserExpertMode,\n  updateUserSlippageTolerance,\n  toggleURLWarning,\n  updateUserSingleHopOnly,\n} from \"./actions\";\n\nfunction serializeToken(token: Token): SerializedToken {\n  return {\n    chainId: token.chainId,\n    address: token.address,\n    decimals: token.decimals,\n    symbol: token.symbol,\n    name: token.name,\n  };\n}\n\nfunction deserializeToken(serializedToken: SerializedToken): Token {\n  return new Token(\n    serializedToken.chainId,\n    serializedToken.address,\n    serializedToken.decimals,\n    serializedToken.symbol,\n    serializedToken.name\n  );\n}\n\nexport function useIsDarkMode(): boolean {\n  const { userDarkMode, matchesDarkMode } = useSelector<\n    AppState,\n    { userDarkMode: boolean | null; matchesDarkMode: boolean }\n  >(\n    ({ user: { matchesDarkMode, userDarkMode } }) => ({\n      userDarkMode,\n      matchesDarkMode,\n    }),\n    shallowEqual\n  );\n\n  return userDarkMode === null ? matchesDarkMode : userDarkMode;\n}\n\nexport function useDarkModeManager(): [boolean, () => void] {\n  const dispatch = useDispatch<AppDispatch>();\n  const darkMode = useIsDarkMode();\n\n  const toggleSetDarkMode = useCallback(() => {\n    dispatch(updateUserDarkMode({ userDarkMode: !darkMode }));\n  }, [darkMode, dispatch]);\n\n  return [darkMode, toggleSetDarkMode];\n}\n\nexport function useIsExpertMode(): boolean {\n  return useSelector<AppState, AppState[\"user\"][\"userExpertMode\"]>(\n    (state) => state.user.userExpertMode\n  );\n}\n\nexport function useExpertModeManager(): [boolean, () => void] {\n  const dispatch = useDispatch<AppDispatch>();\n  const expertMode = useIsExpertMode();\n\n  const toggleSetExpertMode = useCallback(() => {\n    dispatch(updateUserExpertMode({ userExpertMode: !expertMode }));\n  }, [expertMode, dispatch]);\n\n  return [expertMode, toggleSetExpertMode];\n}\n\nexport function useUserSingleHopOnly(): [\n  boolean,\n  (newSingleHopOnly: boolean) => void\n] {\n  const dispatch = useDispatch<AppDispatch>();\n\n  const singleHopOnly = useSelector<\n    AppState,\n    AppState[\"user\"][\"userSingleHopOnly\"]\n  >((state) => state.user.userSingleHopOnly);\n\n  const setSingleHopOnly = useCallback(\n    (newSingleHopOnly: boolean) => {\n      ReactGA.event({\n        category: \"Routing\",\n        action: newSingleHopOnly ? \"enable single hop\" : \"disable single hop\",\n      });\n      dispatch(\n        updateUserSingleHopOnly({ userSingleHopOnly: newSingleHopOnly })\n      );\n    },\n    [dispatch]\n  );\n\n  return [singleHopOnly, setSingleHopOnly];\n}\n\nexport function useUserSlippageTolerance(): [\n  number,\n  (slippage: number) => void\n] {\n  const dispatch = useDispatch<AppDispatch>();\n  const userSlippageTolerance = useSelector<\n    AppState,\n    AppState[\"user\"][\"userSlippageTolerance\"]\n  >((state) => {\n    return state.user.userSlippageTolerance;\n  });\n\n  const setUserSlippageTolerance = useCallback(\n    (userSlippageTolerance: number) => {\n      dispatch(updateUserSlippageTolerance({ userSlippageTolerance }));\n    },\n    [dispatch]\n  );\n\n  return [userSlippageTolerance, setUserSlippageTolerance];\n}\n\nexport function useUserTransactionTTL(): [number, (slippage: number) => void] {\n  const dispatch = useDispatch<AppDispatch>();\n  const userDeadline = useSelector<AppState, AppState[\"user\"][\"userDeadline\"]>(\n    (state) => {\n      return state.user.userDeadline;\n    }\n  );\n\n  const setUserDeadline = useCallback(\n    (userDeadline: number) => {\n      dispatch(updateUserDeadline({ userDeadline }));\n    },\n    [dispatch]\n  );\n\n  return [userDeadline, setUserDeadline];\n}\n\nexport function useAddUserToken(): (token: Token) => void {\n  const dispatch = useDispatch<AppDispatch>();\n  return useCallback(\n    (token: Token) => {\n      dispatch(addSerializedToken({ serializedToken: serializeToken(token) }));\n    },\n    [dispatch]\n  );\n}\n\nexport function useRemoveUserAddedToken(): (\n  chainId: number,\n  address: string\n) => void {\n  const dispatch = useDispatch<AppDispatch>();\n  return useCallback(\n    (chainId: number, address: string) => {\n      dispatch(removeSerializedToken({ chainId, address }));\n    },\n    [dispatch]\n  );\n}\n\nexport function useUserAddedTokens(): Token[] {\n  const { chainId } = useActiveWeb3React();\n  const serializedTokensMap = useSelector<AppState, AppState[\"user\"][\"tokens\"]>(\n    ({ user: { tokens } }) => tokens\n  );\n\n  return useMemo(() => {\n    if (!chainId) return [];\n    return Object.values(serializedTokensMap[chainId as ChainId] ?? {}).map(\n      deserializeToken\n    );\n  }, [serializedTokensMap, chainId]);\n}\n\nfunction serializePair(pair: Pair): SerializedPair {\n  return {\n    token0: serializeToken(pair.token0),\n    token1: serializeToken(pair.token1),\n  };\n}\n\nexport function usePairAdder(): (pair: Pair) => void {\n  const dispatch = useDispatch<AppDispatch>();\n\n  return useCallback(\n    (pair: Pair) => {\n      dispatch(addSerializedPair({ serializedPair: serializePair(pair) }));\n    },\n    [dispatch]\n  );\n}\n\nexport function useURLWarningVisible(): boolean {\n  return useSelector((state: AppState) => state.user.URLWarningVisible);\n}\n\nexport function useURLWarningToggle(): () => void {\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(toggleURLWarning()), [dispatch]);\n}\n\n/**\n * Given two tokens return the liquidity token that represents its liquidity shares\n * @param tokenA one of the two tokens\n * @param tokenB the other token\n */\nexport function toV2LiquidityToken([tokenA, tokenB]: [Token, Token]): Token {\n  return new Token(\n    tokenA.chainId,\n    Pair.getAddress(tokenA, tokenB),\n    18,\n    \"UNI-V2\",\n    \"Uniswap V2\"\n  );\n}\n\n/**\n * Returns all the pairs of tokens that are tracked by the user for the current chain ID.\n */\nexport function useTrackedTokenPairs(): [Token, Token][] {\n  const { chainId } = useActiveWeb3React();\n  const tokens = useAllTokens();\n\n  // pinned pairs\n  const pinnedPairs = useMemo(\n    () => (chainId ? PINNED_PAIRS[chainId] ?? [] : []),\n    [chainId]\n  );\n\n  // pairs for every token against every base\n  const generatedPairs: [Token, Token][] = useMemo(\n    () =>\n      chainId\n        ? flatMap(Object.keys(tokens), (tokenAddress) => {\n            const token = tokens[tokenAddress];\n            // for each token on the current chain,\n            return (\n              // loop though all bases on the current chain\n              (BASES_TO_TRACK_LIQUIDITY_FOR[chainId] ?? [])\n                // to construct pairs of the given token with each base\n                .map((base) => {\n                  if (base.address === token.address) {\n                    return null;\n                  } else {\n                    return [base, token];\n                  }\n                })\n                .filter((p): p is [Token, Token] => p !== null)\n            );\n          })\n        : [],\n    [tokens, chainId]\n  );\n\n  // pairs saved by users\n  const savedSerializedPairs = useSelector<AppState, AppState[\"user\"][\"pairs\"]>(\n    ({ user: { pairs } }) => pairs\n  );\n\n  const userPairs: [Token, Token][] = useMemo(() => {\n    if (!chainId || !savedSerializedPairs) return [];\n    const forChain = savedSerializedPairs[chainId];\n    if (!forChain) return [];\n\n    return Object.keys(forChain).map((pairId) => {\n      return [\n        deserializeToken(forChain[pairId].token0),\n        deserializeToken(forChain[pairId].token1),\n      ];\n    });\n  }, [savedSerializedPairs, chainId]);\n\n  const combinedList = useMemo(\n    () => userPairs.concat(generatedPairs).concat(pinnedPairs),\n    [generatedPairs, pinnedPairs, userPairs]\n  );\n\n  return useMemo(() => {\n    // dedupes pairs of tokens in the combined list\n    const keyed = combinedList.reduce<{ [key: string]: [Token, Token] }>(\n      (memo, [tokenA, tokenB]) => {\n        const sorted = tokenA.sortsBefore(tokenB);\n        const key = sorted\n          ? `${tokenA.address}:${tokenB.address}`\n          : `${tokenB.address}:${tokenA.address}`;\n        if (memo[key]) return memo;\n        memo[key] = sorted ? [tokenA, tokenB] : [tokenB, tokenA];\n        return memo;\n      },\n      {}\n    );\n\n    return Object.keys(keyed).map((key) => keyed[key]);\n  }, [combinedList]);\n}\n"]},"metadata":{},"sourceType":"module"}