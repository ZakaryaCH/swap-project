{"ast":null,"code":"// import { Currency, CurrencyAmount, ETHER, TokenAmount } from \"@uniswap/sdk\";\n// import { Token } from \"@uniswap/sdk-core\";\n// import { ChainId, BNB } from \"../types\";\n// export function wrappedCurrency(\n//   currency: Currency | undefined,\n//   chainId: ChainId | undefined\n// ): Token | undefined {\n//   return chainId && currency === ETHER\n//     ? BNB[chainId]\n//     : currency instanceof Token\n//     ? currency\n//     : undefined;\n// }\n// export function wrappedCurrencyAmount(\n//   currencyAmount: CurrencyAmount | undefined,\n//   chainId: ChainId | undefined\n// ): TokenAmount | undefined {\n//   const token =\n//     currencyAmount && chainId\n//       ? wrappedCurrency(currencyAmount.currency, chainId)\n//       : undefined;\n//   return token && currencyAmount\n//     ? new TokenAmount(token, currencyAmount.raw)\n//     : undefined;\n// }\n// export function unwrappedToken(token: Token): Currency {\n//   if (token.equals(BNB[token.chainId as ChainId])) return ETHER;\n//   return token;\n// }","map":{"version":3,"sources":["/Users/chichke/Documents/Work/Freelance/swap-project/src/utils/wrappedCurrency.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["// import { Currency, CurrencyAmount, ETHER, TokenAmount } from \"@uniswap/sdk\";\n// import { Token } from \"@uniswap/sdk-core\";\n// import { ChainId, BNB } from \"../types\";\n// export function wrappedCurrency(\n//   currency: Currency | undefined,\n//   chainId: ChainId | undefined\n// ): Token | undefined {\n//   return chainId && currency === ETHER\n//     ? BNB[chainId]\n//     : currency instanceof Token\n//     ? currency\n//     : undefined;\n// }\n\n// export function wrappedCurrencyAmount(\n//   currencyAmount: CurrencyAmount | undefined,\n//   chainId: ChainId | undefined\n// ): TokenAmount | undefined {\n//   const token =\n//     currencyAmount && chainId\n//       ? wrappedCurrency(currencyAmount.currency, chainId)\n//       : undefined;\n//   return token && currencyAmount\n//     ? new TokenAmount(token, currencyAmount.raw)\n//     : undefined;\n// }\n\n// export function unwrappedToken(token: Token): Currency {\n//   if (token.equals(BNB[token.chainId as ChainId])) return ETHER;\n//   return token;\n// }\n"]},"metadata":{},"sourceType":"module"}