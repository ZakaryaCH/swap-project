{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { getTokenLogoURL } from \"./../components/CurrencyLogo/index\"; // import { wrappedCurrency } from 'utils/wrappedCurrency'\n\nimport { useCallback, useState } from \"react\";\nimport { useActiveWeb3React } from \"hooks\";\nexport default function useAddTokenToMetamask(currencyToAdd) {\n  _s();\n\n  const {\n    library,\n    chainId\n  } = useActiveWeb3React(); // const token: Token | undefined = wrappedCurrency(currencyToAdd, chainId);\n\n  const [success, setSuccess] = useState();\n  const addToken = useCallback(() => {\n    if (library && library.provider.isMetaMask && library.provider.request && token) {\n      library.provider.request({\n        method: \"wallet_watchAsset\",\n        params: {\n          //@ts-ignore // need this for incorrect ethers provider type\n          type: \"ERC20\",\n          options: {\n            address: token.address,\n            symbol: token.symbol,\n            decimals: token.decimals,\n            image: getTokenLogoURL(token.address)\n          }\n        }\n      }).then(success => {\n        setSuccess(success);\n      }).catch(() => setSuccess(false));\n    } else {\n      setSuccess(false);\n    }\n  }, [library, token]);\n  return {\n    addToken,\n    success\n  };\n}\n\n_s(useAddTokenToMetamask, \"e8ozs9FtjX4ug5kxLh/Aof/sv2Q=\", false, function () {\n  return [useActiveWeb3React];\n});","map":{"version":3,"sources":["/Users/chichke/Documents/Work/Freelance/swap-project/src/hooks/useAddTokenToMetamask.ts"],"names":["getTokenLogoURL","useCallback","useState","useActiveWeb3React","useAddTokenToMetamask","currencyToAdd","library","chainId","success","setSuccess","addToken","provider","isMetaMask","request","token","method","params","type","options","address","symbol","decimals","image","then","catch"],"mappings":";;AAAA,SAASA,eAAT,QAAgC,oCAAhC,C,CACA;;AAEA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,SAASC,kBAAT,QAAmC,OAAnC;AAEA,eAAe,SAASC,qBAAT,CACbC,aADa,EAE2C;AAAA;;AACxD,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBJ,kBAAkB,EAA/C,CADwD,CAGxD;;AAEA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,EAAtC;AAEA,QAAMQ,QAAQ,GAAGT,WAAW,CAAC,MAAM;AACjC,QACEK,OAAO,IACPA,OAAO,CAACK,QAAR,CAAiBC,UADjB,IAEAN,OAAO,CAACK,QAAR,CAAiBE,OAFjB,IAGAC,KAJF,EAKE;AACAR,MAAAA,OAAO,CAACK,QAAR,CACGE,OADH,CACW;AACPE,QAAAA,MAAM,EAAE,mBADD;AAEPC,QAAAA,MAAM,EAAE;AACN;AACAC,UAAAA,IAAI,EAAE,OAFA;AAGNC,UAAAA,OAAO,EAAE;AACPC,YAAAA,OAAO,EAAEL,KAAK,CAACK,OADR;AAEPC,YAAAA,MAAM,EAAEN,KAAK,CAACM,MAFP;AAGPC,YAAAA,QAAQ,EAAEP,KAAK,CAACO,QAHT;AAIPC,YAAAA,KAAK,EAAEtB,eAAe,CAACc,KAAK,CAACK,OAAP;AAJf;AAHH;AAFD,OADX,EAcGI,IAdH,CAcSf,OAAD,IAAa;AACjBC,QAAAA,UAAU,CAACD,OAAD,CAAV;AACD,OAhBH,EAiBGgB,KAjBH,CAiBS,MAAMf,UAAU,CAAC,KAAD,CAjBzB;AAkBD,KAxBD,MAwBO;AACLA,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,GA5B2B,EA4BzB,CAACH,OAAD,EAAUQ,KAAV,CA5ByB,CAA5B;AA8BA,SAAO;AAAEJ,IAAAA,QAAF;AAAYF,IAAAA;AAAZ,GAAP;AACD;;GAxCuBJ,qB;UAGOD,kB","sourcesContent":["import { getTokenLogoURL } from \"./../components/CurrencyLogo/index\";\n// import { wrappedCurrency } from 'utils/wrappedCurrency'\nimport { Currency, Token } from \"@uniswap/sdk\";\nimport { useCallback, useState } from \"react\";\nimport { useActiveWeb3React } from \"hooks\";\n\nexport default function useAddTokenToMetamask(\n  currencyToAdd: Currency | undefined\n): { addToken: () => void; success: boolean | undefined } {\n  const { library, chainId } = useActiveWeb3React();\n\n  // const token: Token | undefined = wrappedCurrency(currencyToAdd, chainId);\n\n  const [success, setSuccess] = useState<boolean | undefined>();\n\n  const addToken = useCallback(() => {\n    if (\n      library &&\n      library.provider.isMetaMask &&\n      library.provider.request &&\n      token\n    ) {\n      library.provider\n        .request({\n          method: \"wallet_watchAsset\",\n          params: {\n            //@ts-ignore // need this for incorrect ethers provider type\n            type: \"ERC20\",\n            options: {\n              address: token.address,\n              symbol: token.symbol,\n              decimals: token.decimals,\n              image: getTokenLogoURL(token.address),\n            },\n          },\n        })\n        .then((success) => {\n          setSuccess(success);\n        })\n        .catch(() => setSuccess(false));\n    } else {\n      setSuccess(false);\n    }\n  }, [library, token]);\n\n  return { addToken, success };\n}\n"]},"metadata":{},"sourceType":"module"}