{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport useENS from \"../../hooks/useENS\";\nimport { Version } from \"../../hooks/useToggledVersion\";\nimport { parseUnits } from \"@ethersproject/units\";\nimport { CurrencyAmount, ETHER, JSBI, Token, TokenAmount } from \"@uniswap/sdk\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useV1Trade } from \"../../data/V1\";\nimport { useActiveWeb3React } from \"../../hooks\";\nimport { useCurrency } from \"../../hooks/Tokens\";\nimport useParsedQueryString from \"../../hooks/useParsedQueryString\";\nimport { isAddress } from \"../../utils\";\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from \"./actions\";\nimport useToggledVersion from \"../../hooks/useToggledVersion\";\nimport { useUserSlippageTolerance } from \"../user/hooks\";\nimport { computeSlippageAdjustedAmounts } from \"../../utils/prices\";\nexport function useSwapState() {\n  _s();\n\n  return useSelector(state => state.swap);\n}\n\n_s(useSwapState, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport function useSwapActionHandlers() {\n  _s2();\n\n  const dispatch = useDispatch();\n  const onCurrencySelection = useCallback((field, currency) => {\n    dispatch(selectCurrency({\n      field,\n      currencyId: currency instanceof Token ? currency.address : currency === ETHER ? \"ETH\" : \"\"\n    }));\n  }, [dispatch]);\n  const onSwitchTokens = useCallback(() => {\n    dispatch(switchCurrencies());\n  }, [dispatch]);\n  const onUserInput = useCallback((field, typedValue) => {\n    dispatch(typeInput({\n      field,\n      typedValue\n    }));\n  }, [dispatch]);\n  const onChangeRecipient = useCallback(recipient => {\n    dispatch(setRecipient({\n      recipient\n    }));\n  }, [dispatch]);\n  return {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient\n  };\n} // try to parse a user entered amount for a given token\n\n_s2(useSwapActionHandlers, \"oIW3xZhV8GZLW5UVB2t9AN9x/ck=\", false, function () {\n  return [useDispatch];\n});\n\nexport function tryParseAmount(value, currency) {\n  if (!value || !currency) {\n    return undefined;\n  }\n\n  try {\n    const typedValueParsed = parseUnits(value, currency.decimals).toString();\n\n    if (typedValueParsed !== \"0\") {\n      return currency instanceof Token ? new TokenAmount(currency, JSBI.BigInt(typedValueParsed)) : CurrencyAmount.ether(JSBI.BigInt(typedValueParsed));\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(`Failed to parse input amount: \"${value}\"`, error);\n  } // necessary for all paths to return a value\n\n\n  return undefined;\n} // const BAD_RECIPIENT_ADDRESSES: string[] = [\n//   '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f', // v2 factory\n//   '0xf164fC0Ec4E93095b804a4795bBe1e041497b92a', // v2 router 01\n//   '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D' // v2 router 02\n// ]\n\nconst BAD_RECIPIENT_ADDRESSES = [\"0xe2983AeD183e45dF4249A69Bb9D4cB1e79f5990F\", // v2 factory\n\"0xf164fC0Ec4E93095b804a4795bBe1e041497b92a\", // v2 router 01\n\"0xa743c67f4c888713534BDC6b25C3CF41aD3B4Bc6\" // v2 router 02\n];\n/**\n * Returns true if any of the pairs or tokens in a trade have the given checksummed address\n * @param trade to check for the given address\n * @param checksummedAddress address to check in the pairs and tokens\n */\n\nfunction involvesAddress(trade, checksummedAddress) {\n  return trade.route.path.some(token => token.address === checksummedAddress) || trade.route.pairs.some(pair => pair.liquidityToken.address === checksummedAddress);\n} // from the current swap inputs, compute the best trade and return it.\n\n\nexport function useDerivedSwapInfo() {\n  _s3();\n\n  var _ref, _ref2;\n\n  const {\n    account\n  } = useActiveWeb3React();\n  const toggledVersion = useToggledVersion();\n  const {\n    independentField,\n    typedValue,\n    [Field.INPUT]: {\n      currencyId: inputCurrencyId\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrencyId\n    },\n    recipient\n  } = useSwapState();\n  const inputCurrency = useCurrency(inputCurrencyId);\n  const outputCurrency = useCurrency(outputCurrencyId);\n  const recipientLookup = useENS(recipient !== null && recipient !== void 0 ? recipient : undefined);\n  const to = (_ref = recipient === null ? account : recipientLookup.address) !== null && _ref !== void 0 ? _ref : null;\n  const relevantTokenBalances = useCurrencyBalances(account !== null && account !== void 0 ? account : undefined, [inputCurrency !== null && inputCurrency !== void 0 ? inputCurrency : undefined, outputCurrency !== null && outputCurrency !== void 0 ? outputCurrency : undefined]);\n  const isExactIn = independentField === Field.INPUT;\n  const parsedAmount = tryParseAmount(typedValue, (_ref2 = isExactIn ? inputCurrency : outputCurrency) !== null && _ref2 !== void 0 ? _ref2 : undefined);\n  const bestTradeExactIn = useTradeExactIn(isExactIn ? parsedAmount : undefined, outputCurrency !== null && outputCurrency !== void 0 ? outputCurrency : undefined);\n  const bestTradeExactOut = useTradeExactOut(inputCurrency !== null && inputCurrency !== void 0 ? inputCurrency : undefined, !isExactIn ? parsedAmount : undefined);\n  const v2Trade = isExactIn ? bestTradeExactIn : bestTradeExactOut;\n  const currencyBalances = {\n    [Field.INPUT]: relevantTokenBalances[0],\n    [Field.OUTPUT]: relevantTokenBalances[1]\n  };\n  const currencies = {\n    [Field.INPUT]: inputCurrency !== null && inputCurrency !== void 0 ? inputCurrency : undefined,\n    [Field.OUTPUT]: outputCurrency !== null && outputCurrency !== void 0 ? outputCurrency : undefined\n  }; // get link to trade on v1, if a better rate exists\n\n  const v1Trade = useV1Trade(isExactIn, currencies[Field.INPUT], currencies[Field.OUTPUT], parsedAmount);\n  let inputError;\n\n  if (!account) {\n    inputError = \"Connect Wallet\";\n  }\n\n  if (!parsedAmount) {\n    var _inputError;\n\n    inputError = (_inputError = inputError) !== null && _inputError !== void 0 ? _inputError : \"Enter an amount\";\n  }\n\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n    var _inputError2;\n\n    inputError = (_inputError2 = inputError) !== null && _inputError2 !== void 0 ? _inputError2 : \"Select a token\";\n  }\n\n  const formattedTo = isAddress(to);\n\n  if (!to || !formattedTo) {\n    var _inputError3;\n\n    inputError = (_inputError3 = inputError) !== null && _inputError3 !== void 0 ? _inputError3 : \"Enter a recipient\";\n  } else {\n    if (BAD_RECIPIENT_ADDRESSES.indexOf(formattedTo) !== -1 || bestTradeExactIn && involvesAddress(bestTradeExactIn, formattedTo) || bestTradeExactOut && involvesAddress(bestTradeExactOut, formattedTo)) {\n      var _inputError4;\n\n      inputError = (_inputError4 = inputError) !== null && _inputError4 !== void 0 ? _inputError4 : \"Invalid recipient\";\n    }\n  }\n\n  const [allowedSlippage] = useUserSlippageTolerance();\n  const slippageAdjustedAmounts = v2Trade && allowedSlippage && computeSlippageAdjustedAmounts(v2Trade, allowedSlippage);\n  const slippageAdjustedAmountsV1 = v1Trade && allowedSlippage && computeSlippageAdjustedAmounts(v1Trade, allowedSlippage); // compare input balance to max input based on version\n\n  const [balanceIn, amountIn] = [currencyBalances[Field.INPUT], toggledVersion === Version.v1 ? slippageAdjustedAmountsV1 ? slippageAdjustedAmountsV1[Field.INPUT] : null : slippageAdjustedAmounts ? slippageAdjustedAmounts[Field.INPUT] : null];\n\n  if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\n    inputError = \"Insufficient \" + amountIn.currency.symbol + \" balance\";\n  }\n\n  return {\n    currencies,\n    currencyBalances,\n    parsedAmount,\n    v2Trade: v2Trade !== null && v2Trade !== void 0 ? v2Trade : undefined,\n    inputError,\n    v1Trade\n  };\n}\n\n_s3(useDerivedSwapInfo, \"5zoJNFn7a93D+IwVYTnMmD2WcIM=\", true, function () {\n  return [useActiveWeb3React, useToggledVersion, useSwapState, useCurrency, useCurrency, useENS, useV1Trade, useUserSlippageTolerance];\n});\n\nfunction parseCurrencyFromURLParameter(urlParam) {\n  var _ETH;\n\n  if (typeof urlParam === \"string\") {\n    const valid = isAddress(urlParam);\n    if (valid) return valid;\n    if (urlParam.toUpperCase() === \"ETH\") return \"ETH\";\n    if (valid === false) return \"ETH\";\n  }\n\n  return (_ETH = \"ETH\") !== null && _ETH !== void 0 ? _ETH : \"\";\n}\n\nfunction parseTokenAmountURLParameter(urlParam) {\n  return typeof urlParam === \"string\" && !isNaN(parseFloat(urlParam)) ? urlParam : \"\";\n}\n\nfunction parseIndependentFieldURLParameter(urlParam) {\n  return typeof urlParam === \"string\" && urlParam.toLowerCase() === \"output\" ? Field.OUTPUT : Field.INPUT;\n}\n\nconst ENS_NAME_REGEX = /^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/;\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/;\n\nfunction validatedRecipient(recipient) {\n  if (typeof recipient !== \"string\") return null;\n  const address = isAddress(recipient);\n  if (address) return address;\n  if (ENS_NAME_REGEX.test(recipient)) return recipient;\n  if (ADDRESS_REGEX.test(recipient)) return recipient;\n  return null;\n}\n\nexport function queryParametersToSwapState(parsedQs) {\n  let inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency);\n  let outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency);\n\n  if (inputCurrency === outputCurrency) {\n    if (typeof parsedQs.outputCurrency === \"string\") {\n      inputCurrency = \"\";\n    } else {\n      outputCurrency = \"\";\n    }\n  }\n\n  const recipient = validatedRecipient(parsedQs.recipient);\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrency\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrency\n    },\n    typedValue: parseTokenAmountURLParameter(parsedQs.exactAmount),\n    independentField: parseIndependentFieldURLParameter(parsedQs.exactField),\n    recipient\n  };\n} // updates the swap state to use the defaults for a given network\n\nexport function useDefaultsFromURLSearch() {\n  _s4();\n\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const dispatch = useDispatch();\n  const parsedQs = useParsedQueryString();\n  const [result, setResult] = useState();\n  useEffect(() => {\n    if (!chainId) return;\n    const parsed = queryParametersToSwapState(parsedQs);\n    dispatch(replaceSwapState({\n      typedValue: parsed.typedValue,\n      field: parsed.independentField,\n      inputCurrencyId: parsed[Field.INPUT].currencyId,\n      outputCurrencyId: parsed[Field.OUTPUT].currencyId,\n      recipient: parsed.recipient\n    }));\n    setResult({\n      inputCurrencyId: parsed[Field.INPUT].currencyId,\n      outputCurrencyId: parsed[Field.OUTPUT].currencyId\n    }); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, chainId]);\n  return result;\n}\n\n_s4(useDefaultsFromURLSearch, \"2CnDlZ82rqfhhBu4OPGgJbxv0gQ=\", false, function () {\n  return [useActiveWeb3React, useDispatch, useParsedQueryString];\n});","map":{"version":3,"sources":["/Users/chichke/Documents/Work/Freelance/swap-project/src/state/swap/hooks.ts"],"names":["useENS","Version","parseUnits","CurrencyAmount","ETHER","JSBI","Token","TokenAmount","useCallback","useEffect","useState","useDispatch","useSelector","useV1Trade","useActiveWeb3React","useCurrency","useParsedQueryString","isAddress","Field","replaceSwapState","selectCurrency","setRecipient","switchCurrencies","typeInput","useToggledVersion","useUserSlippageTolerance","computeSlippageAdjustedAmounts","useSwapState","state","swap","useSwapActionHandlers","dispatch","onCurrencySelection","field","currency","currencyId","address","onSwitchTokens","onUserInput","typedValue","onChangeRecipient","recipient","tryParseAmount","value","undefined","typedValueParsed","decimals","toString","BigInt","ether","error","console","debug","BAD_RECIPIENT_ADDRESSES","involvesAddress","trade","checksummedAddress","route","path","some","token","pairs","pair","liquidityToken","useDerivedSwapInfo","account","toggledVersion","independentField","INPUT","inputCurrencyId","OUTPUT","outputCurrencyId","inputCurrency","outputCurrency","recipientLookup","to","relevantTokenBalances","useCurrencyBalances","isExactIn","parsedAmount","bestTradeExactIn","useTradeExactIn","bestTradeExactOut","useTradeExactOut","v2Trade","currencyBalances","currencies","v1Trade","inputError","formattedTo","indexOf","allowedSlippage","slippageAdjustedAmounts","slippageAdjustedAmountsV1","balanceIn","amountIn","v1","lessThan","symbol","parseCurrencyFromURLParameter","urlParam","valid","toUpperCase","parseTokenAmountURLParameter","isNaN","parseFloat","parseIndependentFieldURLParameter","toLowerCase","ENS_NAME_REGEX","ADDRESS_REGEX","validatedRecipient","test","queryParametersToSwapState","parsedQs","exactAmount","exactField","useDefaultsFromURLSearch","chainId","result","setResult","parsed"],"mappings":"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","sourcesContent":["import useENS from \"../../hooks/useENS\";\nimport { Version } from \"../../hooks/useToggledVersion\";\nimport { parseUnits } from \"@ethersproject/units\";\nimport {\n  Currency,\n  CurrencyAmount,\n  ETHER,\n  JSBI,\n  Token,\n  TokenAmount,\n  Trade,\n} from \"@uniswap/sdk\";\nimport { ParsedQs } from \"qs\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useV1Trade } from \"../../data/V1\";\nimport { useActiveWeb3React } from \"../../hooks\";\nimport { useCurrency } from \"../../hooks/Tokens\";\nimport useParsedQueryString from \"../../hooks/useParsedQueryString\";\nimport { isAddress } from \"../../utils\";\nimport { AppDispatch, AppState } from \"../index\";\nimport {\n  Field,\n  replaceSwapState,\n  selectCurrency,\n  setRecipient,\n  switchCurrencies,\n  typeInput,\n} from \"./actions\";\nimport { SwapState } from \"./reducer\";\nimport useToggledVersion from \"../../hooks/useToggledVersion\";\nimport { useUserSlippageTolerance } from \"../user/hooks\";\nimport { computeSlippageAdjustedAmounts } from \"../../utils/prices\";\n\nexport function useSwapState(): AppState[\"swap\"] {\n  return useSelector<AppState, AppState[\"swap\"]>((state) => state.swap);\n}\n\nexport function useSwapActionHandlers(): {\n  onCurrencySelection: (field: Field, currency: Currency) => void;\n  onSwitchTokens: () => void;\n  onUserInput: (field: Field, typedValue: string) => void;\n  onChangeRecipient: (recipient: string | null) => void;\n} {\n  const dispatch = useDispatch<AppDispatch>();\n  const onCurrencySelection = useCallback(\n    (field: Field, currency: Currency) => {\n      dispatch(\n        selectCurrency({\n          field,\n          currencyId:\n            currency instanceof Token\n              ? currency.address\n              : currency === ETHER\n              ? \"ETH\"\n              : \"\",\n        })\n      );\n    },\n    [dispatch]\n  );\n\n  const onSwitchTokens = useCallback(() => {\n    dispatch(switchCurrencies());\n  }, [dispatch]);\n\n  const onUserInput = useCallback(\n    (field: Field, typedValue: string) => {\n      dispatch(typeInput({ field, typedValue }));\n    },\n    [dispatch]\n  );\n\n  const onChangeRecipient = useCallback(\n    (recipient: string | null) => {\n      dispatch(setRecipient({ recipient }));\n    },\n    [dispatch]\n  );\n\n  return {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient,\n  };\n}\n\n// try to parse a user entered amount for a given token\nexport function tryParseAmount(\n  value?: string,\n  currency?: Currency\n): CurrencyAmount | undefined {\n  if (!value || !currency) {\n    return undefined;\n  }\n  try {\n    const typedValueParsed = parseUnits(value, currency.decimals).toString();\n    if (typedValueParsed !== \"0\") {\n      return currency instanceof Token\n        ? new TokenAmount(currency, JSBI.BigInt(typedValueParsed))\n        : CurrencyAmount.ether(JSBI.BigInt(typedValueParsed));\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(`Failed to parse input amount: \"${value}\"`, error);\n  }\n  // necessary for all paths to return a value\n  return undefined;\n}\n\n// const BAD_RECIPIENT_ADDRESSES: string[] = [\n//   '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f', // v2 factory\n//   '0xf164fC0Ec4E93095b804a4795bBe1e041497b92a', // v2 router 01\n//   '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D' // v2 router 02\n// ]\n\nconst BAD_RECIPIENT_ADDRESSES: string[] = [\n  \"0xe2983AeD183e45dF4249A69Bb9D4cB1e79f5990F\", // v2 factory\n  \"0xf164fC0Ec4E93095b804a4795bBe1e041497b92a\", // v2 router 01\n  \"0xa743c67f4c888713534BDC6b25C3CF41aD3B4Bc6\", // v2 router 02\n];\n\n/**\n * Returns true if any of the pairs or tokens in a trade have the given checksummed address\n * @param trade to check for the given address\n * @param checksummedAddress address to check in the pairs and tokens\n */\nfunction involvesAddress(trade: Trade, checksummedAddress: string): boolean {\n  return (\n    trade.route.path.some((token) => token.address === checksummedAddress) ||\n    trade.route.pairs.some(\n      (pair) => pair.liquidityToken.address === checksummedAddress\n    )\n  );\n}\n\n// from the current swap inputs, compute the best trade and return it.\nexport function useDerivedSwapInfo(): {\n  currencies: { [field in Field]?: Currency };\n  currencyBalances: { [field in Field]?: CurrencyAmount };\n  parsedAmount: CurrencyAmount | undefined;\n  v2Trade: Trade | undefined;\n  inputError?: string;\n  v1Trade: Trade | undefined;\n} {\n  const { account } = useActiveWeb3React();\n\n  const toggledVersion = useToggledVersion();\n\n  const {\n    independentField,\n    typedValue,\n    [Field.INPUT]: { currencyId: inputCurrencyId },\n    [Field.OUTPUT]: { currencyId: outputCurrencyId },\n    recipient,\n  } = useSwapState();\n\n  const inputCurrency = useCurrency(inputCurrencyId);\n  const outputCurrency = useCurrency(outputCurrencyId);\n  const recipientLookup = useENS(recipient ?? undefined);\n  const to: string | null =\n    (recipient === null ? account : recipientLookup.address) ?? null;\n\n  const relevantTokenBalances = useCurrencyBalances(account ?? undefined, [\n    inputCurrency ?? undefined,\n    outputCurrency ?? undefined,\n  ]);\n\n  const isExactIn: boolean = independentField === Field.INPUT;\n  const parsedAmount = tryParseAmount(\n    typedValue,\n    (isExactIn ? inputCurrency : outputCurrency) ?? undefined\n  );\n\n  const bestTradeExactIn = useTradeExactIn(\n    isExactIn ? parsedAmount : undefined,\n    outputCurrency ?? undefined\n  );\n  const bestTradeExactOut = useTradeExactOut(\n    inputCurrency ?? undefined,\n    !isExactIn ? parsedAmount : undefined\n  );\n\n  const v2Trade = isExactIn ? bestTradeExactIn : bestTradeExactOut;\n\n  const currencyBalances = {\n    [Field.INPUT]: relevantTokenBalances[0],\n    [Field.OUTPUT]: relevantTokenBalances[1],\n  };\n\n  const currencies: { [field in Field]?: Currency } = {\n    [Field.INPUT]: inputCurrency ?? undefined,\n    [Field.OUTPUT]: outputCurrency ?? undefined,\n  };\n\n  // get link to trade on v1, if a better rate exists\n  const v1Trade = useV1Trade(\n    isExactIn,\n    currencies[Field.INPUT],\n    currencies[Field.OUTPUT],\n    parsedAmount\n  );\n\n  let inputError: string | undefined;\n  if (!account) {\n    inputError = \"Connect Wallet\";\n  }\n\n  if (!parsedAmount) {\n    inputError = inputError ?? \"Enter an amount\";\n  }\n\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n    inputError = inputError ?? \"Select a token\";\n  }\n\n  const formattedTo = isAddress(to);\n  if (!to || !formattedTo) {\n    inputError = inputError ?? \"Enter a recipient\";\n  } else {\n    if (\n      BAD_RECIPIENT_ADDRESSES.indexOf(formattedTo) !== -1 ||\n      (bestTradeExactIn && involvesAddress(bestTradeExactIn, formattedTo)) ||\n      (bestTradeExactOut && involvesAddress(bestTradeExactOut, formattedTo))\n    ) {\n      inputError = inputError ?? \"Invalid recipient\";\n    }\n  }\n\n  const [allowedSlippage] = useUserSlippageTolerance();\n\n  const slippageAdjustedAmounts =\n    v2Trade &&\n    allowedSlippage &&\n    computeSlippageAdjustedAmounts(v2Trade, allowedSlippage);\n\n  const slippageAdjustedAmountsV1 =\n    v1Trade &&\n    allowedSlippage &&\n    computeSlippageAdjustedAmounts(v1Trade, allowedSlippage);\n\n  // compare input balance to max input based on version\n  const [balanceIn, amountIn] = [\n    currencyBalances[Field.INPUT],\n    toggledVersion === Version.v1\n      ? slippageAdjustedAmountsV1\n        ? slippageAdjustedAmountsV1[Field.INPUT]\n        : null\n      : slippageAdjustedAmounts\n      ? slippageAdjustedAmounts[Field.INPUT]\n      : null,\n  ];\n\n  if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\n    inputError = \"Insufficient \" + amountIn.currency.symbol + \" balance\";\n  }\n\n  return {\n    currencies,\n    currencyBalances,\n    parsedAmount,\n    v2Trade: v2Trade ?? undefined,\n    inputError,\n    v1Trade,\n  };\n}\n\nfunction parseCurrencyFromURLParameter(urlParam: any): string {\n  if (typeof urlParam === \"string\") {\n    const valid = isAddress(urlParam);\n    if (valid) return valid;\n    if (urlParam.toUpperCase() === \"ETH\") return \"ETH\";\n    if (valid === false) return \"ETH\";\n  }\n  return \"ETH\" ?? \"\";\n}\n\nfunction parseTokenAmountURLParameter(urlParam: any): string {\n  return typeof urlParam === \"string\" && !isNaN(parseFloat(urlParam))\n    ? urlParam\n    : \"\";\n}\n\nfunction parseIndependentFieldURLParameter(urlParam: any): Field {\n  return typeof urlParam === \"string\" && urlParam.toLowerCase() === \"output\"\n    ? Field.OUTPUT\n    : Field.INPUT;\n}\n\nconst ENS_NAME_REGEX =\n  /^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/;\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/;\nfunction validatedRecipient(recipient: any): string | null {\n  if (typeof recipient !== \"string\") return null;\n  const address = isAddress(recipient);\n  if (address) return address;\n  if (ENS_NAME_REGEX.test(recipient)) return recipient;\n  if (ADDRESS_REGEX.test(recipient)) return recipient;\n  return null;\n}\n\nexport function queryParametersToSwapState(parsedQs: ParsedQs): SwapState {\n  let inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency);\n  let outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency);\n  if (inputCurrency === outputCurrency) {\n    if (typeof parsedQs.outputCurrency === \"string\") {\n      inputCurrency = \"\";\n    } else {\n      outputCurrency = \"\";\n    }\n  }\n\n  const recipient = validatedRecipient(parsedQs.recipient);\n\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrency,\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrency,\n    },\n    typedValue: parseTokenAmountURLParameter(parsedQs.exactAmount),\n    independentField: parseIndependentFieldURLParameter(parsedQs.exactField),\n    recipient,\n  };\n}\n\n// updates the swap state to use the defaults for a given network\nexport function useDefaultsFromURLSearch():\n  | {\n      inputCurrencyId: string | undefined;\n      outputCurrencyId: string | undefined;\n    }\n  | undefined {\n  const { chainId } = useActiveWeb3React();\n  const dispatch = useDispatch<AppDispatch>();\n  const parsedQs = useParsedQueryString();\n  const [result, setResult] =\n    useState<\n      | {\n          inputCurrencyId: string | undefined;\n          outputCurrencyId: string | undefined;\n        }\n      | undefined\n    >();\n\n  useEffect(() => {\n    if (!chainId) return;\n    const parsed = queryParametersToSwapState(parsedQs);\n\n    dispatch(\n      replaceSwapState({\n        typedValue: parsed.typedValue,\n        field: parsed.independentField,\n        inputCurrencyId: parsed[Field.INPUT].currencyId,\n        outputCurrencyId: parsed[Field.OUTPUT].currencyId,\n        recipient: parsed.recipient,\n      })\n    );\n\n    setResult({\n      inputCurrencyId: parsed[Field.INPUT].currencyId,\n      outputCurrencyId: parsed[Field.OUTPUT].currencyId,\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, chainId]);\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}