{"ast":null,"code":"var _jsxFileName = \"/Users/chichke/Documents/Work/Freelance/swap-project/src/pages/Swap/redirects.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { ApplicationModal, setOpenModal } from '../../state/application/actions'; // Redirects to swap but only replace the pathname\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function RedirectPathToSwapOnly({\n  location\n}) {\n  return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: { ...location,\n      pathname: '/swap'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 10\n  }, this);\n} // Redirects from the /swap/:outputCurrency path to the /swap?outputCurrency=:outputCurrency format\n\n_c = RedirectPathToSwapOnly;\nexport function RedirectToSwap(props) {\n  const {\n    location: {\n      search\n    },\n    match: {\n      params: {\n        outputCurrency\n      }\n    }\n  } = props;\n  return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: { ...props.location,\n      pathname: '/swap',\n      search: search && search.length > 1 ? `${search}&outputCurrency=${outputCurrency}` : `?outputCurrency=${outputCurrency}`\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n_c2 = RedirectToSwap;\nexport function OpenClaimAddressModalAndRedirectToSwap(props) {\n  _s();\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(setOpenModal(ApplicationModal.ADDRESS_CLAIM));\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(RedirectPathToSwapOnly, { ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 10\n  }, this);\n}\n\n_s(OpenClaimAddressModalAndRedirectToSwap, \"rAh3tY+Iv6hWC9AI4Dm+rCbkwNE=\", false, function () {\n  return [useDispatch];\n});\n\n_c3 = OpenClaimAddressModalAndRedirectToSwap;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"RedirectPathToSwapOnly\");\n$RefreshReg$(_c2, \"RedirectToSwap\");\n$RefreshReg$(_c3, \"OpenClaimAddressModalAndRedirectToSwap\");","map":{"version":3,"sources":["/Users/chichke/Documents/Work/Freelance/swap-project/src/pages/Swap/redirects.tsx"],"names":["React","useEffect","useDispatch","Redirect","ApplicationModal","setOpenModal","RedirectPathToSwapOnly","location","pathname","RedirectToSwap","props","search","match","params","outputCurrency","length","OpenClaimAddressModalAndRedirectToSwap","dispatch","ADDRESS_CLAIM"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,QAAT,QAA8C,kBAA9C;AAEA,SAASC,gBAAT,EAA2BC,YAA3B,QAA+C,iCAA/C,C,CAEA;;;AACA,OAAO,SAASC,sBAAT,CAAgC;AAAEC,EAAAA;AAAF,CAAhC,EAAmE;AACxE,sBAAO,QAAC,QAAD;AAAU,IAAA,EAAE,EAAE,EAAE,GAAGA,QAAL;AAAeC,MAAAA,QAAQ,EAAE;AAAzB;AAAd;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,C,CAED;;KAJgBF,sB;AAKhB,OAAO,SAASG,cAAT,CAAwBC,KAAxB,EAAgF;AACrF,QAAM;AACJH,IAAAA,QAAQ,EAAE;AAAEI,MAAAA;AAAF,KADN;AAEJC,IAAAA,KAAK,EAAE;AACLC,MAAAA,MAAM,EAAE;AAAEC,QAAAA;AAAF;AADH;AAFH,MAKFJ,KALJ;AAOA,sBACE,QAAC,QAAD;AACE,IAAA,EAAE,EAAE,EACF,GAAGA,KAAK,CAACH,QADP;AAEFC,MAAAA,QAAQ,EAAE,OAFR;AAGFG,MAAAA,MAAM,EACJA,MAAM,IAAIA,MAAM,CAACI,MAAP,GAAgB,CAA1B,GACK,GAAEJ,MAAO,mBAAkBG,cAAe,EAD/C,GAEK,mBAAkBA,cAAe;AANtC;AADN;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;MApBeL,c;AAsBhB,OAAO,SAASO,sCAAT,CAAgDN,KAAhD,EAA4E;AAAA;;AACjF,QAAMO,QAAQ,GAAGf,WAAW,EAA5B;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,QAAQ,CAACZ,YAAY,CAACD,gBAAgB,CAACc,aAAlB,CAAb,CAAR;AACD,GAFQ,EAEN,CAACD,QAAD,CAFM,CAAT;AAGA,sBAAO,QAAC,sBAAD,OAA4BP;AAA5B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GANeM,sC;UACGd,W;;;MADHc,sC","sourcesContent":["import React, { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { Redirect, RouteComponentProps } from 'react-router-dom'\nimport { AppDispatch } from '../../state'\nimport { ApplicationModal, setOpenModal } from '../../state/application/actions'\n\n// Redirects to swap but only replace the pathname\nexport function RedirectPathToSwapOnly({ location }: RouteComponentProps) {\n  return <Redirect to={{ ...location, pathname: '/swap' }} />\n}\n\n// Redirects from the /swap/:outputCurrency path to the /swap?outputCurrency=:outputCurrency format\nexport function RedirectToSwap(props: RouteComponentProps<{ outputCurrency: string }>) {\n  const {\n    location: { search },\n    match: {\n      params: { outputCurrency }\n    }\n  } = props\n\n  return (\n    <Redirect\n      to={{\n        ...props.location,\n        pathname: '/swap',\n        search:\n          search && search.length > 1\n            ? `${search}&outputCurrency=${outputCurrency}`\n            : `?outputCurrency=${outputCurrency}`\n      }}\n    />\n  )\n}\n\nexport function OpenClaimAddressModalAndRedirectToSwap(props: RouteComponentProps) {\n  const dispatch = useDispatch<AppDispatch>()\n  useEffect(() => {\n    dispatch(setOpenModal(ApplicationModal.ADDRESS_CLAIM))\n  }, [dispatch])\n  return <RedirectPathToSwapOnly {...props} />\n}\n"]},"metadata":{},"sourceType":"module"}