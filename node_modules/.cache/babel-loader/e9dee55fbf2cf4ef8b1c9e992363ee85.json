{"ast":null,"code":"var _jsxFileName = \"/Users/chichke/Documents/Work/Freelance/swap-project/src/components/CurrencyLogo/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { ETHER, Token } from '@uniswap/sdk';\nimport React, { useMemo } from 'react';\nimport styled from 'styled-components';\nimport EthereumLogo from '../../assets/images/ethereum-logo.png';\nimport useHttpLocations from '../../hooks/useHttpLocations';\nimport { WrappedTokenInfo } from '../../state/lists/hooks';\nimport Logo from '../Logo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const getTokenLogoURL = address => `https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/${address}/logo.png`;\nconst StyledEthereumLogo = styled.img`\n  width: ${({\n  size\n}) => size};\n  height: ${({\n  size\n}) => size};\n  box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.075);\n  border-radius: 24px;\n`;\n_c = StyledEthereumLogo;\nconst StyledLogo = styled(Logo)`\n  width: ${({\n  size\n}) => size};\n  height: ${({\n  size\n}) => size};\n  border-radius: ${({\n  size\n}) => size};\n  box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.075);\n  background-color: ${({\n  theme\n}) => theme.white};\n`;\n_c2 = StyledLogo;\nexport default function CurrencyLogo({\n  currency,\n  size = '24px',\n  style\n}) {\n  _s();\n\n  var _currency$symbol;\n\n  const uriLocations = useHttpLocations(currency instanceof WrappedTokenInfo ? currency.logoURI : undefined);\n  const srcs = useMemo(() => {\n    if (currency === ETHER) return [];\n\n    if (currency instanceof Token) {\n      if (currency instanceof WrappedTokenInfo) {\n        return [...uriLocations, getTokenLogoURL(currency.address)];\n      }\n\n      return [getTokenLogoURL(currency.address)];\n    }\n\n    return [];\n  }, [currency, uriLocations]);\n\n  if (currency === ETHER) {\n    return /*#__PURE__*/_jsxDEV(StyledEthereumLogo, {\n      src: EthereumLogo,\n      size: size,\n      style: style\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(StyledLogo, {\n    size: size,\n    srcs: srcs,\n    alt: `${(_currency$symbol = currency === null || currency === void 0 ? void 0 : currency.symbol) !== null && _currency$symbol !== void 0 ? _currency$symbol : 'token'} logo`,\n    style: style\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 10\n  }, this);\n}\n\n_s(CurrencyLogo, \"jo2gP9fsIv3AxI3dA7ElsR2yU5g=\", false, function () {\n  return [useHttpLocations];\n});\n\n_c3 = CurrencyLogo;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"StyledEthereumLogo\");\n$RefreshReg$(_c2, \"StyledLogo\");\n$RefreshReg$(_c3, \"CurrencyLogo\");","map":{"version":3,"sources":["/Users/chichke/Documents/Work/Freelance/swap-project/src/components/CurrencyLogo/index.tsx"],"names":["ETHER","Token","React","useMemo","styled","EthereumLogo","useHttpLocations","WrappedTokenInfo","Logo","getTokenLogoURL","address","StyledEthereumLogo","img","size","StyledLogo","theme","white","CurrencyLogo","currency","style","uriLocations","logoURI","undefined","srcs","symbol"],"mappings":";;;AAAA,SAAmBA,KAAnB,EAA0BC,KAA1B,QAAuC,cAAvC;AACA,OAAOC,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,OAAOC,YAAP,MAAyB,uCAAzB;AACA,OAAOC,gBAAP,MAA6B,8BAA7B;AACA,SAASC,gBAAT,QAAiC,yBAAjC;AACA,OAAOC,IAAP,MAAiB,SAAjB;;AAEA,OAAO,MAAMC,eAAe,GAAIC,OAAD,IAC5B,2FAA0FA,OAAQ,WAD9F;AAGP,MAAMC,kBAAkB,GAAGP,MAAM,CAACQ,GAAsB;AACxD,WAAW,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAcA,IAAK;AAC9B,YAAY,CAAC;AAAEA,EAAAA;AAAF,CAAD,KAAcA,IAAK;AAC/B;AACA;AACA,CALA;KAAMF,kB;AAON,MAAMG,UAAU,GAAGV,MAAM,CAACI,IAAD,CAAyB;AAClD,WAAW,CAAC;AAAEK,EAAAA;AAAF,CAAD,KAAcA,IAAK;AAC9B,YAAY,CAAC;AAAEA,EAAAA;AAAF,CAAD,KAAcA,IAAK;AAC/B,mBAAmB,CAAC;AAAEA,EAAAA;AAAF,CAAD,KAAcA,IAAK;AACtC;AACA,sBAAsB,CAAC;AAAEE,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACC,KAAM;AACjD,CANA;MAAMF,U;AAQN,eAAe,SAASG,YAAT,CAAsB;AACnCC,EAAAA,QADmC;AAEnCL,EAAAA,IAAI,GAAG,MAF4B;AAGnCM,EAAAA;AAHmC,CAAtB,EAQZ;AAAA;;AAAA;;AACD,QAAMC,YAAY,GAAGd,gBAAgB,CAACY,QAAQ,YAAYX,gBAApB,GAAuCW,QAAQ,CAACG,OAAhD,GAA0DC,SAA3D,CAArC;AAEA,QAAMC,IAAc,GAAGpB,OAAO,CAAC,MAAM;AACnC,QAAIe,QAAQ,KAAKlB,KAAjB,EAAwB,OAAO,EAAP;;AAExB,QAAIkB,QAAQ,YAAYjB,KAAxB,EAA+B;AAC7B,UAAIiB,QAAQ,YAAYX,gBAAxB,EAA0C;AACxC,eAAO,CAAC,GAAGa,YAAJ,EAAkBX,eAAe,CAACS,QAAQ,CAACR,OAAV,CAAjC,CAAP;AACD;;AACD,aAAO,CAACD,eAAe,CAACS,QAAQ,CAACR,OAAV,CAAhB,CAAP;AACD;;AACD,WAAO,EAAP;AACD,GAV6B,EAU3B,CAACQ,QAAD,EAAWE,YAAX,CAV2B,CAA9B;;AAYA,MAAIF,QAAQ,KAAKlB,KAAjB,EAAwB;AACtB,wBAAO,QAAC,kBAAD;AAAoB,MAAA,GAAG,EAAEK,YAAzB;AAAuC,MAAA,IAAI,EAAEQ,IAA7C;AAAmD,MAAA,KAAK,EAAEM;AAA1D;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBAAO,QAAC,UAAD;AAAY,IAAA,IAAI,EAAEN,IAAlB;AAAwB,IAAA,IAAI,EAAEU,IAA9B;AAAoC,IAAA,GAAG,EAAG,GAAD,oBAAGL,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEM,MAAb,+DAAuB,OAAQ,OAAxE;AAAgF,IAAA,KAAK,EAAEL;AAAvF;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GA5BuBF,Y;UASDX,gB;;;MATCW,Y","sourcesContent":["import { Currency, ETHER, Token } from '@uniswap/sdk'\nimport React, { useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport EthereumLogo from '../../assets/images/ethereum-logo.png'\nimport useHttpLocations from '../../hooks/useHttpLocations'\nimport { WrappedTokenInfo } from '../../state/lists/hooks'\nimport Logo from '../Logo'\n\nexport const getTokenLogoURL = (address: string) =>\n  `https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/${address}/logo.png`\n\nconst StyledEthereumLogo = styled.img<{ size: string }>`\n  width: ${({ size }) => size};\n  height: ${({ size }) => size};\n  box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.075);\n  border-radius: 24px;\n`\n\nconst StyledLogo = styled(Logo)<{ size: string }>`\n  width: ${({ size }) => size};\n  height: ${({ size }) => size};\n  border-radius: ${({ size }) => size};\n  box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.075);\n  background-color: ${({ theme }) => theme.white};\n`\n\nexport default function CurrencyLogo({\n  currency,\n  size = '24px',\n  style,\n}: {\n  currency?: Currency\n  size?: string\n  style?: React.CSSProperties\n}) {\n  const uriLocations = useHttpLocations(currency instanceof WrappedTokenInfo ? currency.logoURI : undefined)\n\n  const srcs: string[] = useMemo(() => {\n    if (currency === ETHER) return []\n\n    if (currency instanceof Token) {\n      if (currency instanceof WrappedTokenInfo) {\n        return [...uriLocations, getTokenLogoURL(currency.address)]\n      }\n      return [getTokenLogoURL(currency.address)]\n    }\n    return []\n  }, [currency, uriLocations])\n\n  if (currency === ETHER) {\n    return <StyledEthereumLogo src={EthereumLogo} size={size} style={style} />\n  }\n\n  return <StyledLogo size={size} srcs={srcs} alt={`${currency?.symbol ?? 'token'} logo`} style={style} />\n}\n"]},"metadata":{},"sourceType":"module"}