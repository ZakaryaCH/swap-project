{"ast":null,"code":"var _jsxFileName = \"/Users/chichke/Documents/Work/Freelance/swap-project/src/pages/Swap/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { JSBI, Token } from \"@uniswap/sdk\";\nimport React, { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport { ArrowDown } from \"react-feather\";\nimport ReactGA from \"react-ga\";\nimport { Text } from \"rebass\";\nimport { ThemeContext } from \"styled-components\";\nimport AddressInputPanel from \"../../components/AddressInputPanel\";\nimport { ButtonError, ButtonLight, ButtonPrimary, ButtonConfirmed } from \"../../components/Button\";\nimport Card, { GreyCard } from \"../../components/Card\";\nimport Column, { AutoColumn } from \"../../components/Column\";\nimport ConfirmSwapModal from \"../../components/swap/ConfirmSwapModal\";\nimport CurrencyInputPanel from \"../../components/CurrencyInputPanel\";\nimport { SwapPoolTabs } from \"../../components/NavigationTabs\";\nimport { AutoRow, RowBetween } from \"../../components/Row\";\nimport AdvancedSwapDetailsDropdown from \"../../components/swap/AdvancedSwapDetailsDropdown\";\nimport BetterTradeLink, { DefaultVersionLink } from \"../../components/swap/BetterTradeLink\";\nimport confirmPriceImpactWithoutFee from \"../../components/swap/confirmPriceImpactWithoutFee\";\nimport { ArrowWrapper, BottomGrouping, SwapCallbackError, Wrapper } from \"../../components/swap/styleds\";\nimport TradePrice from \"../../components/swap/TradePrice\";\nimport TokenWarningModal from \"../../components/TokenWarningModal\";\nimport ProgressSteps from \"../../components/ProgressSteps\";\nimport SwapHeader from \"../../components/swap/SwapHeader\";\nimport { INITIAL_ALLOWED_SLIPPAGE } from \"../../constants\";\nimport { getTradeVersion } from \"../../data/V1\";\nimport { useActiveWeb3React } from \"../../hooks\";\nimport { useCurrency } from \"../../hooks/Tokens\";\nimport { ApprovalState, useApproveCallbackFromTrade } from \"../../hooks/useApproveCallback\";\nimport useENSAddress from \"../../hooks/useENSAddress\";\nimport { useSwapCallback } from \"../../hooks/useSwapCallback\";\nimport useToggledVersion, { DEFAULT_VERSION, Version } from \"../../hooks/useToggledVersion\";\nimport useWrapCallback, { WrapType } from \"../../hooks/useWrapCallback\";\nimport { useToggleSettingsMenu, useWalletModalToggle } from \"../../state/application/hooks\";\nimport { Field } from \"../../state/swap/actions\";\nimport { useDefaultsFromURLSearch, useDerivedSwapInfo, useSwapActionHandlers, useSwapState } from \"../../state/swap/hooks\";\nimport { useExpertModeManager, useUserSlippageTolerance, useUserSingleHopOnly } from \"../../state/user/hooks\";\nimport { LinkStyledButton, TYPE } from \"../../theme\";\nimport { maxAmountSpend } from \"../../utils/maxAmountSpend\";\nimport { computeTradePriceBreakdown, warningSeverity } from \"../../utils/prices\";\nimport AppBody from \"../AppBody\";\nimport { ClickableText } from \"../Pool/styleds\";\nimport Loader from \"../../components/Loader\";\nimport UnsupportedCurrencyFooter from \"components/swap/UnsupportedCurrencyFooter\";\nimport { isTradeBetter } from \"utils/trades\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Swap() {\n  _s();\n\n  var _parsedAmounts$indepe, _parsedAmounts$indepe2, _parsedAmounts$depend, _parsedAmounts$depend2, _parsedAmounts$indepe3, _parsedAmounts$Field$, _currencies$Field$INP;\n\n  const loadedUrlParams = useDefaultsFromURLSearch(); // token warning stuff\n\n  const [loadedInputCurrency, loadedOutputCurrency] = [useCurrency(loadedUrlParams === null || loadedUrlParams === void 0 ? void 0 : loadedUrlParams.inputCurrencyId), useCurrency(loadedUrlParams === null || loadedUrlParams === void 0 ? void 0 : loadedUrlParams.outputCurrencyId)];\n  const [dismissTokenWarning, setDismissTokenWarning] = useState(false);\n  const urlLoadedTokens = useMemo(() => {\n    var _filter, _ref;\n\n    return (_filter = (_ref = [loadedInputCurrency, loadedOutputCurrency]) === null || _ref === void 0 ? void 0 : _ref.filter(c => c instanceof Token)) !== null && _filter !== void 0 ? _filter : [];\n  }, [loadedInputCurrency, loadedOutputCurrency]);\n  const handleConfirmTokenWarning = useCallback(() => {\n    setDismissTokenWarning(true);\n  }, []); // dismiss warning if all imported tokens are in active lists\n\n  const defaultTokens = useAllTokens();\n  const importTokensNotInDefault = urlLoadedTokens && urlLoadedTokens.filter(token => {\n    return !Boolean(token.address in defaultTokens);\n  });\n  const {\n    account\n  } = useActiveWeb3React();\n  const theme = useContext(ThemeContext); // toggle wallet when disconnected\n\n  const toggleWalletModal = useWalletModalToggle(); // for expert mode\n\n  const toggleSettings = useToggleSettingsMenu();\n  const [isExpertMode] = useExpertModeManager(); // get custom setting values for user\n\n  const [allowedSlippage] = useUserSlippageTolerance(); // swap state\n\n  const {\n    independentField,\n    typedValue,\n    recipient\n  } = useSwapState();\n  const {\n    v1Trade,\n    v2Trade,\n    currencyBalances,\n    parsedAmount,\n    currencies,\n    inputError: swapInputError\n  } = useDerivedSwapInfo();\n  const {\n    wrapType,\n    execute: onWrap,\n    inputError: wrapInputError\n  } = useWrapCallback(currencies[Field.INPUT], currencies[Field.OUTPUT], typedValue);\n  const showWrap = wrapType !== WrapType.NOT_APPLICABLE;\n  const {\n    address: recipientAddress\n  } = useENSAddress(recipient);\n  const toggledVersion = useToggledVersion();\n  const tradesByVersion = {\n    [Version.v1]: v1Trade,\n    [Version.v2]: v2Trade\n  };\n  const trade = showWrap ? undefined : tradesByVersion[toggledVersion];\n  const defaultTrade = showWrap ? undefined : tradesByVersion[DEFAULT_VERSION];\n  const betterTradeLinkV2 = toggledVersion === Version.v1 && isTradeBetter(v1Trade, v2Trade) ? Version.v2 : undefined;\n  const parsedAmounts = showWrap ? {\n    [Field.INPUT]: parsedAmount,\n    [Field.OUTPUT]: parsedAmount\n  } : {\n    [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade === null || trade === void 0 ? void 0 : trade.inputAmount,\n    [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade === null || trade === void 0 ? void 0 : trade.outputAmount\n  };\n  const {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient\n  } = useSwapActionHandlers();\n  const isValid = !swapInputError;\n  const dependentField = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT;\n  const handleTypeInput = useCallback(value => {\n    onUserInput(Field.INPUT, value);\n  }, [onUserInput]);\n  const handleTypeOutput = useCallback(value => {\n    onUserInput(Field.OUTPUT, value);\n  }, [onUserInput]); // modal and loading\n\n  const [{\n    showConfirm,\n    tradeToConfirm,\n    swapErrorMessage,\n    attemptingTxn,\n    txHash\n  }, setSwapState] = useState({\n    showConfirm: false,\n    tradeToConfirm: undefined,\n    attemptingTxn: false,\n    swapErrorMessage: undefined,\n    txHash: undefined\n  });\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: showWrap ? (_parsedAmounts$indepe = (_parsedAmounts$indepe2 = parsedAmounts[independentField]) === null || _parsedAmounts$indepe2 === void 0 ? void 0 : _parsedAmounts$indepe2.toExact()) !== null && _parsedAmounts$indepe !== void 0 ? _parsedAmounts$indepe : \"\" : (_parsedAmounts$depend = (_parsedAmounts$depend2 = parsedAmounts[dependentField]) === null || _parsedAmounts$depend2 === void 0 ? void 0 : _parsedAmounts$depend2.toSignificant(6)) !== null && _parsedAmounts$depend !== void 0 ? _parsedAmounts$depend : \"\"\n  };\n  const route = trade === null || trade === void 0 ? void 0 : trade.route;\n  const userHasSpecifiedInputOutput = Boolean(currencies[Field.INPUT] && currencies[Field.OUTPUT] && ((_parsedAmounts$indepe3 = parsedAmounts[independentField]) === null || _parsedAmounts$indepe3 === void 0 ? void 0 : _parsedAmounts$indepe3.greaterThan(JSBI.BigInt(0))));\n  const noRoute = !route; // check whether the user has approved the router on the input token\n\n  const [approval, approveCallback] = useApproveCallbackFromTrade(trade, allowedSlippage); // check if user has gone through approval process, used to show two step buttons, reset on token change\n\n  const [approvalSubmitted, setApprovalSubmitted] = useState(false); // mark when a user has submitted an approval, reset onTokenSelection for input field\n\n  useEffect(() => {\n    if (approval === ApprovalState.PENDING) {\n      setApprovalSubmitted(true);\n    }\n  }, [approval, approvalSubmitted]);\n  const maxAmountInput = maxAmountSpend(currencyBalances[Field.INPUT]);\n  const atMaxAmountInput = Boolean(maxAmountInput && ((_parsedAmounts$Field$ = parsedAmounts[Field.INPUT]) === null || _parsedAmounts$Field$ === void 0 ? void 0 : _parsedAmounts$Field$.equalTo(maxAmountInput))); // the callback to execute the swap\n\n  const {\n    callback: swapCallback,\n    error: swapCallbackError\n  } = useSwapCallback(trade, allowedSlippage, recipient);\n  const {\n    priceImpactWithoutFee\n  } = computeTradePriceBreakdown(trade);\n  const [singleHopOnly] = useUserSingleHopOnly();\n  const handleSwap = useCallback(() => {\n    if (priceImpactWithoutFee && !confirmPriceImpactWithoutFee(priceImpactWithoutFee)) {\n      return;\n    }\n\n    if (!swapCallback) {\n      return;\n    }\n\n    setSwapState({\n      attemptingTxn: true,\n      tradeToConfirm,\n      showConfirm,\n      swapErrorMessage: undefined,\n      txHash: undefined\n    });\n    swapCallback().then(hash => {\n      var _trade$inputAmount, _trade$inputAmount$cu, _trade$outputAmount, _trade$outputAmount$c;\n\n      setSwapState({\n        attemptingTxn: false,\n        tradeToConfirm,\n        showConfirm,\n        swapErrorMessage: undefined,\n        txHash: hash\n      });\n      ReactGA.event({\n        category: \"Swap\",\n        action: recipient === null ? \"Swap w/o Send\" : (recipientAddress !== null && recipientAddress !== void 0 ? recipientAddress : recipient) === account ? \"Swap w/o Send + recipient\" : \"Swap w/ Send\",\n        label: [trade === null || trade === void 0 ? void 0 : (_trade$inputAmount = trade.inputAmount) === null || _trade$inputAmount === void 0 ? void 0 : (_trade$inputAmount$cu = _trade$inputAmount.currency) === null || _trade$inputAmount$cu === void 0 ? void 0 : _trade$inputAmount$cu.symbol, trade === null || trade === void 0 ? void 0 : (_trade$outputAmount = trade.outputAmount) === null || _trade$outputAmount === void 0 ? void 0 : (_trade$outputAmount$c = _trade$outputAmount.currency) === null || _trade$outputAmount$c === void 0 ? void 0 : _trade$outputAmount$c.symbol, getTradeVersion(trade)].join(\"/\")\n      });\n      ReactGA.event({\n        category: \"Routing\",\n        action: singleHopOnly ? \"Swap with multihop disabled\" : \"Swap with multihop enabled\"\n      });\n    }).catch(error => {\n      setSwapState({\n        attemptingTxn: false,\n        tradeToConfirm,\n        showConfirm,\n        swapErrorMessage: error.message,\n        txHash: undefined\n      });\n    });\n  }, [priceImpactWithoutFee, swapCallback, tradeToConfirm, showConfirm, recipient, recipientAddress, account, trade, singleHopOnly]); // errors\n\n  const [showInverted, setShowInverted] = useState(false); // warnings on slippage\n\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee); // show approve flow when: no error on inputs, not approved or pending, or approved in current session\n  // never show if price impact is above threshold in non expert mode\n\n  const showApproveFlow = !swapInputError && (approval === ApprovalState.NOT_APPROVED || approval === ApprovalState.PENDING || approvalSubmitted && approval === ApprovalState.APPROVED) && !(priceImpactSeverity > 3 && !isExpertMode);\n  const handleConfirmDismiss = useCallback(() => {\n    setSwapState({\n      showConfirm: false,\n      tradeToConfirm,\n      attemptingTxn,\n      swapErrorMessage,\n      txHash\n    }); // if there was a tx hash, we want to clear the input\n\n    if (txHash) {\n      onUserInput(Field.INPUT, \"\");\n    }\n  }, [attemptingTxn, onUserInput, swapErrorMessage, tradeToConfirm, txHash]);\n  const handleAcceptChanges = useCallback(() => {\n    setSwapState({\n      tradeToConfirm: trade,\n      swapErrorMessage,\n      txHash,\n      attemptingTxn,\n      showConfirm\n    });\n  }, [attemptingTxn, showConfirm, swapErrorMessage, trade, txHash]);\n  const handleInputSelect = useCallback(inputCurrency => {\n    setApprovalSubmitted(false); // reset 2 step UI for approvals\n\n    onCurrencySelection(Field.INPUT, inputCurrency);\n  }, [onCurrencySelection]);\n  const handleMaxInput = useCallback(() => {\n    maxAmountInput && onUserInput(Field.INPUT, maxAmountInput.toExact());\n  }, [maxAmountInput, onUserInput]);\n  const handleOutputSelect = useCallback(outputCurrency => onCurrencySelection(Field.OUTPUT, outputCurrency), [onCurrencySelection]);\n  const swapIsUnsupported = useIsTransactionUnsupported(currencies === null || currencies === void 0 ? void 0 : currencies.INPUT, currencies === null || currencies === void 0 ? void 0 : currencies.OUTPUT);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TokenWarningModal, {\n      isOpen: importTokensNotInDefault.length > 0 && !dismissTokenWarning,\n      tokens: importTokensNotInDefault,\n      onConfirm: handleConfirmTokenWarning\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SwapPoolTabs, {\n      active: \"swap\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AppBody, {\n      children: [/*#__PURE__*/_jsxDEV(SwapHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Wrapper, {\n        id: \"swap-page\",\n        children: [/*#__PURE__*/_jsxDEV(ConfirmSwapModal, {\n          isOpen: showConfirm,\n          trade: trade,\n          originalTrade: tradeToConfirm,\n          onAcceptChanges: handleAcceptChanges,\n          attemptingTxn: attemptingTxn,\n          txHash: txHash,\n          recipient: recipient,\n          allowedSlippage: allowedSlippage,\n          onConfirm: handleSwap,\n          swapErrorMessage: swapErrorMessage,\n          onDismiss: handleConfirmDismiss\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AutoColumn, {\n          gap: \"md\",\n          children: [/*#__PURE__*/_jsxDEV(CurrencyInputPanel, {\n            label: independentField === Field.OUTPUT && !showWrap && trade ? \"From (estimated)\" : \"From\",\n            value: formattedAmounts[Field.INPUT],\n            showMaxButton: !atMaxAmountInput,\n            currency: currencies[Field.INPUT],\n            onUserInput: handleTypeInput,\n            onMax: handleMaxInput,\n            onCurrencySelect: handleInputSelect,\n            otherCurrency: currencies[Field.OUTPUT],\n            id: \"swap-currency-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(AutoColumn, {\n            justify: \"space-between\",\n            children: /*#__PURE__*/_jsxDEV(AutoRow, {\n              justify: isExpertMode ? \"space-between\" : \"center\",\n              style: {\n                padding: \"0 1rem\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(ArrowWrapper, {\n                clickable: true,\n                children: /*#__PURE__*/_jsxDEV(ArrowDown, {\n                  size: \"16\",\n                  onClick: () => {\n                    setApprovalSubmitted(false); // reset 2 step UI for approvals\n\n                    onSwitchTokens();\n                  },\n                  color: currencies[Field.INPUT] && currencies[Field.OUTPUT] ? theme.primary1 : theme.text2\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 443,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 442,\n                columnNumber: 17\n              }, this), recipient === null && !showWrap && isExpertMode ? /*#__PURE__*/_jsxDEV(LinkStyledButton, {\n                id: \"add-recipient-button\",\n                onClick: () => onChangeRecipient(\"\"),\n                children: \"+ Add a send (optional)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 457,\n                columnNumber: 19\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CurrencyInputPanel, {\n            value: formattedAmounts[Field.OUTPUT],\n            onUserInput: handleTypeOutput,\n            label: independentField === Field.INPUT && !showWrap && trade ? \"To (estimated)\" : \"To\",\n            showMaxButton: false,\n            currency: currencies[Field.OUTPUT],\n            onCurrencySelect: handleOutputSelect,\n            otherCurrency: currencies[Field.INPUT],\n            id: \"swap-currency-output\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 13\n          }, this), recipient !== null && !showWrap ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(AutoRow, {\n              justify: \"space-between\",\n              style: {\n                padding: \"0 1rem\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(ArrowWrapper, {\n                clickable: false,\n                children: /*#__PURE__*/_jsxDEV(ArrowDown, {\n                  size: \"16\",\n                  color: theme.text2\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 485,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 484,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(LinkStyledButton, {\n                id: \"remove-recipient-button\",\n                onClick: () => onChangeRecipient(null),\n                children: \"- Remove send\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 487,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 483,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(AddressInputPanel, {\n              id: \"recipient\",\n              value: recipient,\n              onChange: onChangeRecipient\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 494,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true) : null, showWrap ? null : /*#__PURE__*/_jsxDEV(Card, {\n            padding: showWrap ? \".25rem 1rem 0 1rem\" : \"0px\",\n            borderRadius: \"20px\",\n            children: /*#__PURE__*/_jsxDEV(AutoColumn, {\n              gap: \"8px\",\n              style: {\n                padding: \"0 16px\"\n              },\n              children: [Boolean(trade) && /*#__PURE__*/_jsxDEV(RowBetween, {\n                align: \"center\",\n                children: [/*#__PURE__*/_jsxDEV(Text, {\n                  fontWeight: 500,\n                  fontSize: 14,\n                  color: theme.text2,\n                  children: \"Price\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 510,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TradePrice, {\n                  price: trade === null || trade === void 0 ? void 0 : trade.executionPrice,\n                  showInverted: showInverted,\n                  setShowInverted: setShowInverted\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 513,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 509,\n                columnNumber: 21\n              }, this), allowedSlippage !== INITIAL_ALLOWED_SLIPPAGE && /*#__PURE__*/_jsxDEV(RowBetween, {\n                align: \"center\",\n                children: [/*#__PURE__*/_jsxDEV(ClickableText, {\n                  fontWeight: 500,\n                  fontSize: 14,\n                  color: theme.text2,\n                  onClick: toggleSettings,\n                  children: \"Slippage Tolerance\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 522,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(ClickableText, {\n                  fontWeight: 500,\n                  fontSize: 14,\n                  color: theme.text2,\n                  onClick: toggleSettings,\n                  children: [allowedSlippage / 100, \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 530,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 521,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 507,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 503,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(BottomGrouping, {\n          children: [!account ? /*#__PURE__*/_jsxDEV(ButtonLight, {\n            onClick: toggleWalletModal,\n            children: \"Connect Wallet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 546,\n            columnNumber: 15\n          }, this) : showWrap ? /*#__PURE__*/_jsxDEV(ButtonPrimary, {\n            disabled: Boolean(wrapInputError),\n            onClick: onWrap,\n            children: wrapInputError !== null && wrapInputError !== void 0 ? wrapInputError : wrapType === WrapType.WRAP ? \"Wrap\" : wrapType === WrapType.UNWRAP ? \"Unwrap\" : null\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 550,\n            columnNumber: 15\n          }, this) : noRoute && userHasSpecifiedInputOutput ? /*#__PURE__*/_jsxDEV(GreyCard, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(TYPE.main, {\n              mb: \"4px\",\n              children: \"Insufficient liquidity for this trade.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 563,\n              columnNumber: 17\n            }, this), singleHopOnly && /*#__PURE__*/_jsxDEV(TYPE.main, {\n              mb: \"4px\",\n              children: \"Try enabling multi-hop trades.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 567,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 562,\n            columnNumber: 15\n          }, this) : showApproveFlow ? /*#__PURE__*/_jsxDEV(RowBetween, {\n            children: [/*#__PURE__*/_jsxDEV(ButtonConfirmed, {\n              onClick: approveCallback,\n              disabled: approval !== ApprovalState.NOT_APPROVED || approvalSubmitted,\n              width: \"48%\",\n              altDisabledStyle: approval === ApprovalState.PENDING // show solid button while waiting\n              ,\n              confirmed: approval === ApprovalState.APPROVED,\n              children: approval === ApprovalState.PENDING ? /*#__PURE__*/_jsxDEV(AutoRow, {\n                gap: \"6px\",\n                justify: \"center\",\n                children: [\"Approving \", /*#__PURE__*/_jsxDEV(Loader, {\n                  stroke: \"white\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 583,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 582,\n                columnNumber: 21\n              }, this) : approvalSubmitted && approval === ApprovalState.APPROVED ? \"Approved\" : \"Approve \" + ((_currencies$Field$INP = currencies[Field.INPUT]) === null || _currencies$Field$INP === void 0 ? void 0 : _currencies$Field$INP.symbol)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 572,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(ButtonError, {\n              onClick: () => {\n                if (isExpertMode) {\n                  handleSwap();\n                } else {\n                  setSwapState({\n                    tradeToConfirm: trade,\n                    attemptingTxn: false,\n                    swapErrorMessage: undefined,\n                    showConfirm: true,\n                    txHash: undefined\n                  });\n                }\n              },\n              width: \"48%\",\n              id: \"swap-button\",\n              disabled: !isValid || approval !== ApprovalState.APPROVED || priceImpactSeverity > 3 && !isExpertMode,\n              error: isValid && priceImpactSeverity > 2,\n              children: /*#__PURE__*/_jsxDEV(Text, {\n                fontSize: 16,\n                fontWeight: 500,\n                children: priceImpactSeverity > 3 && !isExpertMode ? `Price Impact High` : `Swap${priceImpactSeverity > 2 ? \" Anyway\" : \"\"}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 615,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 592,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 571,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(ButtonError, {\n            onClick: () => {\n              if (isExpertMode) {\n                handleSwap();\n              } else {\n                setSwapState({\n                  tradeToConfirm: trade,\n                  attemptingTxn: false,\n                  swapErrorMessage: undefined,\n                  showConfirm: true,\n                  txHash: undefined\n                });\n              }\n            },\n            id: \"swap-button\",\n            disabled: !isValid || priceImpactSeverity > 3 && !isExpertMode || !!swapCallbackError,\n            error: isValid && priceImpactSeverity > 2 && !swapCallbackError,\n            children: /*#__PURE__*/_jsxDEV(Text, {\n              fontSize: 20,\n              fontWeight: 500,\n              children: swapInputError ? swapInputError : priceImpactSeverity > 3 && !isExpertMode ? `Price Impact Too High` : `Swap${priceImpactSeverity > 2 ? \" Anyway\" : \"\"}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 645,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 623,\n            columnNumber: 15\n          }, this), showApproveFlow && /*#__PURE__*/_jsxDEV(Column, {\n            style: {\n              marginTop: \"1rem\"\n            },\n            children: /*#__PURE__*/_jsxDEV(ProgressSteps, {\n              steps: [approval === ApprovalState.APPROVED]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 656,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 655,\n            columnNumber: 15\n          }, this), isExpertMode && swapErrorMessage ? /*#__PURE__*/_jsxDEV(SwapCallbackError, {\n            error: swapErrorMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 660,\n            columnNumber: 15\n          }, this) : null, betterTradeLinkV2 && !swapIsUnsupported && toggledVersion === Version.v1 ? /*#__PURE__*/_jsxDEV(BetterTradeLink, {\n            version: betterTradeLinkV2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 665,\n            columnNumber: 15\n          }, this) : toggledVersion !== DEFAULT_VERSION && defaultTrade ? /*#__PURE__*/_jsxDEV(DefaultVersionLink, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 667,\n            columnNumber: 15\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 7\n    }, this), !swapIsUnsupported ? /*#__PURE__*/_jsxDEV(AdvancedSwapDetailsDropdown, {\n      trade: trade\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 673,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(UnsupportedCurrencyFooter, {\n      show: swapIsUnsupported,\n      currencies: [currencies.INPUT, currencies.OUTPUT]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 675,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Swap, \"gYpkafjA0uRr0IBFKJUw6aT0Au4=\", true, function () {\n  return [useDefaultsFromURLSearch, useCurrency, useCurrency, useActiveWeb3React, useWalletModalToggle, useToggleSettingsMenu, useExpertModeManager, useUserSlippageTolerance, useSwapState, useDerivedSwapInfo, useWrapCallback, useENSAddress, useToggledVersion, useSwapActionHandlers, useApproveCallbackFromTrade, useSwapCallback, useUserSingleHopOnly];\n});\n\n_c = Swap;\n\nvar _c;\n\n$RefreshReg$(_c, \"Swap\");","map":{"version":3,"sources":["/Users/chichke/Documents/Work/Freelance/swap-project/src/pages/Swap/index.tsx"],"names":["JSBI","Token","React","useCallback","useContext","useEffect","useMemo","useState","ArrowDown","ReactGA","Text","ThemeContext","AddressInputPanel","ButtonError","ButtonLight","ButtonPrimary","ButtonConfirmed","Card","GreyCard","Column","AutoColumn","ConfirmSwapModal","CurrencyInputPanel","SwapPoolTabs","AutoRow","RowBetween","AdvancedSwapDetailsDropdown","BetterTradeLink","DefaultVersionLink","confirmPriceImpactWithoutFee","ArrowWrapper","BottomGrouping","SwapCallbackError","Wrapper","TradePrice","TokenWarningModal","ProgressSteps","SwapHeader","INITIAL_ALLOWED_SLIPPAGE","getTradeVersion","useActiveWeb3React","useCurrency","ApprovalState","useApproveCallbackFromTrade","useENSAddress","useSwapCallback","useToggledVersion","DEFAULT_VERSION","Version","useWrapCallback","WrapType","useToggleSettingsMenu","useWalletModalToggle","Field","useDefaultsFromURLSearch","useDerivedSwapInfo","useSwapActionHandlers","useSwapState","useExpertModeManager","useUserSlippageTolerance","useUserSingleHopOnly","LinkStyledButton","TYPE","maxAmountSpend","computeTradePriceBreakdown","warningSeverity","AppBody","ClickableText","Loader","UnsupportedCurrencyFooter","isTradeBetter","Swap","loadedUrlParams","loadedInputCurrency","loadedOutputCurrency","inputCurrencyId","outputCurrencyId","dismissTokenWarning","setDismissTokenWarning","urlLoadedTokens","filter","c","handleConfirmTokenWarning","defaultTokens","useAllTokens","importTokensNotInDefault","token","Boolean","address","account","theme","toggleWalletModal","toggleSettings","isExpertMode","allowedSlippage","independentField","typedValue","recipient","v1Trade","v2Trade","currencyBalances","parsedAmount","currencies","inputError","swapInputError","wrapType","execute","onWrap","wrapInputError","INPUT","OUTPUT","showWrap","NOT_APPLICABLE","recipientAddress","toggledVersion","tradesByVersion","v1","v2","trade","undefined","defaultTrade","betterTradeLinkV2","parsedAmounts","inputAmount","outputAmount","onSwitchTokens","onCurrencySelection","onUserInput","onChangeRecipient","isValid","dependentField","handleTypeInput","value","handleTypeOutput","showConfirm","tradeToConfirm","swapErrorMessage","attemptingTxn","txHash","setSwapState","formattedAmounts","toExact","toSignificant","route","userHasSpecifiedInputOutput","greaterThan","BigInt","noRoute","approval","approveCallback","approvalSubmitted","setApprovalSubmitted","PENDING","maxAmountInput","atMaxAmountInput","equalTo","callback","swapCallback","error","swapCallbackError","priceImpactWithoutFee","singleHopOnly","handleSwap","then","hash","event","category","action","label","currency","symbol","join","catch","message","showInverted","setShowInverted","priceImpactSeverity","showApproveFlow","NOT_APPROVED","APPROVED","handleConfirmDismiss","handleAcceptChanges","handleInputSelect","inputCurrency","handleMaxInput","handleOutputSelect","outputCurrency","swapIsUnsupported","useIsTransactionUnsupported","length","padding","primary1","text2","executionPrice","WRAP","UNWRAP","textAlign","marginTop"],"mappings":"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","sourcesContent":["import { CurrencyAmount, JSBI, Token, Trade } from \"@uniswap/sdk\";\nimport React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { ArrowDown } from \"react-feather\";\nimport ReactGA from \"react-ga\";\nimport { Text } from \"rebass\";\nimport { ThemeContext } from \"styled-components\";\nimport AddressInputPanel from \"../../components/AddressInputPanel\";\nimport {\n  ButtonError,\n  ButtonLight,\n  ButtonPrimary,\n  ButtonConfirmed,\n} from \"../../components/Button\";\nimport Card, { GreyCard } from \"../../components/Card\";\nimport Column, { AutoColumn } from \"../../components/Column\";\nimport ConfirmSwapModal from \"../../components/swap/ConfirmSwapModal\";\nimport CurrencyInputPanel from \"../../components/CurrencyInputPanel\";\nimport { SwapPoolTabs } from \"../../components/NavigationTabs\";\nimport { AutoRow, RowBetween } from \"../../components/Row\";\nimport AdvancedSwapDetailsDropdown from \"../../components/swap/AdvancedSwapDetailsDropdown\";\nimport BetterTradeLink, {\n  DefaultVersionLink,\n} from \"../../components/swap/BetterTradeLink\";\nimport confirmPriceImpactWithoutFee from \"../../components/swap/confirmPriceImpactWithoutFee\";\nimport {\n  ArrowWrapper,\n  BottomGrouping,\n  SwapCallbackError,\n  Wrapper,\n} from \"../../components/swap/styleds\";\nimport TradePrice from \"../../components/swap/TradePrice\";\nimport TokenWarningModal from \"../../components/TokenWarningModal\";\nimport ProgressSteps from \"../../components/ProgressSteps\";\nimport SwapHeader from \"../../components/swap/SwapHeader\";\n\nimport { INITIAL_ALLOWED_SLIPPAGE } from \"../../constants\";\nimport { getTradeVersion } from \"../../data/V1\";\nimport { useActiveWeb3React } from \"../../hooks\";\nimport { useCurrency } from \"../../hooks/Tokens\";\nimport {\n  ApprovalState,\n  useApproveCallbackFromTrade,\n} from \"../../hooks/useApproveCallback\";\nimport useENSAddress from \"../../hooks/useENSAddress\";\nimport { useSwapCallback } from \"../../hooks/useSwapCallback\";\nimport useToggledVersion, {\n  DEFAULT_VERSION,\n  Version,\n} from \"../../hooks/useToggledVersion\";\nimport useWrapCallback, { WrapType } from \"../../hooks/useWrapCallback\";\nimport {\n  useToggleSettingsMenu,\n  useWalletModalToggle,\n} from \"../../state/application/hooks\";\nimport { Field } from \"../../state/swap/actions\";\nimport {\n  useDefaultsFromURLSearch,\n  useDerivedSwapInfo,\n  useSwapActionHandlers,\n  useSwapState,\n} from \"../../state/swap/hooks\";\nimport {\n  useExpertModeManager,\n  useUserSlippageTolerance,\n  useUserSingleHopOnly,\n} from \"../../state/user/hooks\";\nimport { LinkStyledButton, TYPE } from \"../../theme\";\nimport { maxAmountSpend } from \"../../utils/maxAmountSpend\";\nimport {\n  computeTradePriceBreakdown,\n  warningSeverity,\n} from \"../../utils/prices\";\nimport AppBody from \"../AppBody\";\nimport { ClickableText } from \"../Pool/styleds\";\nimport Loader from \"../../components/Loader\";\nimport UnsupportedCurrencyFooter from \"components/swap/UnsupportedCurrencyFooter\";\nimport { isTradeBetter } from \"utils/trades\";\n\nexport default function Swap() {\n  const loadedUrlParams = useDefaultsFromURLSearch();\n\n  // token warning stuff\n  const [loadedInputCurrency, loadedOutputCurrency] = [\n    useCurrency(loadedUrlParams?.inputCurrencyId),\n    useCurrency(loadedUrlParams?.outputCurrencyId),\n  ];\n  const [dismissTokenWarning, setDismissTokenWarning] =\n    useState<boolean>(false);\n  const urlLoadedTokens: Token[] = useMemo(\n    () =>\n      [loadedInputCurrency, loadedOutputCurrency]?.filter(\n        (c): c is Token => c instanceof Token\n      ) ?? [],\n    [loadedInputCurrency, loadedOutputCurrency]\n  );\n  const handleConfirmTokenWarning = useCallback(() => {\n    setDismissTokenWarning(true);\n  }, []);\n\n  // dismiss warning if all imported tokens are in active lists\n  const defaultTokens = useAllTokens();\n  const importTokensNotInDefault =\n    urlLoadedTokens &&\n    urlLoadedTokens.filter((token: Token) => {\n      return !Boolean(token.address in defaultTokens);\n    });\n\n  const { account } = useActiveWeb3React();\n  const theme = useContext(ThemeContext);\n\n  // toggle wallet when disconnected\n  const toggleWalletModal = useWalletModalToggle();\n\n  // for expert mode\n  const toggleSettings = useToggleSettingsMenu();\n  const [isExpertMode] = useExpertModeManager();\n\n  // get custom setting values for user\n  const [allowedSlippage] = useUserSlippageTolerance();\n\n  // swap state\n  const { independentField, typedValue, recipient } = useSwapState();\n  const {\n    v1Trade,\n    v2Trade,\n    currencyBalances,\n    parsedAmount,\n    currencies,\n    inputError: swapInputError,\n  } = useDerivedSwapInfo();\n  const {\n    wrapType,\n    execute: onWrap,\n    inputError: wrapInputError,\n  } = useWrapCallback(\n    currencies[Field.INPUT],\n    currencies[Field.OUTPUT],\n    typedValue\n  );\n  const showWrap: boolean = wrapType !== WrapType.NOT_APPLICABLE;\n  const { address: recipientAddress } = useENSAddress(recipient);\n  const toggledVersion = useToggledVersion();\n  const tradesByVersion = {\n    [Version.v1]: v1Trade,\n    [Version.v2]: v2Trade,\n  };\n  const trade = showWrap ? undefined : tradesByVersion[toggledVersion];\n  const defaultTrade = showWrap ? undefined : tradesByVersion[DEFAULT_VERSION];\n\n  const betterTradeLinkV2: Version | undefined =\n    toggledVersion === Version.v1 && isTradeBetter(v1Trade, v2Trade)\n      ? Version.v2\n      : undefined;\n\n  const parsedAmounts = showWrap\n    ? {\n        [Field.INPUT]: parsedAmount,\n        [Field.OUTPUT]: parsedAmount,\n      }\n    : {\n        [Field.INPUT]:\n          independentField === Field.INPUT ? parsedAmount : trade?.inputAmount,\n        [Field.OUTPUT]:\n          independentField === Field.OUTPUT\n            ? parsedAmount\n            : trade?.outputAmount,\n      };\n\n  const {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient,\n  } = useSwapActionHandlers();\n  const isValid = !swapInputError;\n  const dependentField: Field =\n    independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT;\n\n  const handleTypeInput = useCallback(\n    (value: string) => {\n      onUserInput(Field.INPUT, value);\n    },\n    [onUserInput]\n  );\n  const handleTypeOutput = useCallback(\n    (value: string) => {\n      onUserInput(Field.OUTPUT, value);\n    },\n    [onUserInput]\n  );\n\n  // modal and loading\n  const [\n    { showConfirm, tradeToConfirm, swapErrorMessage, attemptingTxn, txHash },\n    setSwapState,\n  ] = useState<{\n    showConfirm: boolean;\n    tradeToConfirm: Trade | undefined;\n    attemptingTxn: boolean;\n    swapErrorMessage: string | undefined;\n    txHash: string | undefined;\n  }>({\n    showConfirm: false,\n    tradeToConfirm: undefined,\n    attemptingTxn: false,\n    swapErrorMessage: undefined,\n    txHash: undefined,\n  });\n\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: showWrap\n      ? parsedAmounts[independentField]?.toExact() ?? \"\"\n      : parsedAmounts[dependentField]?.toSignificant(6) ?? \"\",\n  };\n\n  const route = trade?.route;\n  const userHasSpecifiedInputOutput = Boolean(\n    currencies[Field.INPUT] &&\n      currencies[Field.OUTPUT] &&\n      parsedAmounts[independentField]?.greaterThan(JSBI.BigInt(0))\n  );\n  const noRoute = !route;\n\n  // check whether the user has approved the router on the input token\n  const [approval, approveCallback] = useApproveCallbackFromTrade(\n    trade,\n    allowedSlippage\n  );\n\n  // check if user has gone through approval process, used to show two step buttons, reset on token change\n  const [approvalSubmitted, setApprovalSubmitted] = useState<boolean>(false);\n\n  // mark when a user has submitted an approval, reset onTokenSelection for input field\n  useEffect(() => {\n    if (approval === ApprovalState.PENDING) {\n      setApprovalSubmitted(true);\n    }\n  }, [approval, approvalSubmitted]);\n\n  const maxAmountInput: CurrencyAmount | undefined = maxAmountSpend(\n    currencyBalances[Field.INPUT]\n  );\n  const atMaxAmountInput = Boolean(\n    maxAmountInput && parsedAmounts[Field.INPUT]?.equalTo(maxAmountInput)\n  );\n\n  // the callback to execute the swap\n  const { callback: swapCallback, error: swapCallbackError } = useSwapCallback(\n    trade,\n    allowedSlippage,\n    recipient\n  );\n\n  const { priceImpactWithoutFee } = computeTradePriceBreakdown(trade);\n\n  const [singleHopOnly] = useUserSingleHopOnly();\n\n  const handleSwap = useCallback(() => {\n    if (\n      priceImpactWithoutFee &&\n      !confirmPriceImpactWithoutFee(priceImpactWithoutFee)\n    ) {\n      return;\n    }\n    if (!swapCallback) {\n      return;\n    }\n    setSwapState({\n      attemptingTxn: true,\n      tradeToConfirm,\n      showConfirm,\n      swapErrorMessage: undefined,\n      txHash: undefined,\n    });\n    swapCallback()\n      .then((hash) => {\n        setSwapState({\n          attemptingTxn: false,\n          tradeToConfirm,\n          showConfirm,\n          swapErrorMessage: undefined,\n          txHash: hash,\n        });\n\n        ReactGA.event({\n          category: \"Swap\",\n          action:\n            recipient === null\n              ? \"Swap w/o Send\"\n              : (recipientAddress ?? recipient) === account\n              ? \"Swap w/o Send + recipient\"\n              : \"Swap w/ Send\",\n          label: [\n            trade?.inputAmount?.currency?.symbol,\n            trade?.outputAmount?.currency?.symbol,\n            getTradeVersion(trade),\n          ].join(\"/\"),\n        });\n\n        ReactGA.event({\n          category: \"Routing\",\n          action: singleHopOnly\n            ? \"Swap with multihop disabled\"\n            : \"Swap with multihop enabled\",\n        });\n      })\n      .catch((error) => {\n        setSwapState({\n          attemptingTxn: false,\n          tradeToConfirm,\n          showConfirm,\n          swapErrorMessage: error.message,\n          txHash: undefined,\n        });\n      });\n  }, [\n    priceImpactWithoutFee,\n    swapCallback,\n    tradeToConfirm,\n    showConfirm,\n    recipient,\n    recipientAddress,\n    account,\n    trade,\n    singleHopOnly,\n  ]);\n\n  // errors\n  const [showInverted, setShowInverted] = useState<boolean>(false);\n\n  // warnings on slippage\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee);\n\n  // show approve flow when: no error on inputs, not approved or pending, or approved in current session\n  // never show if price impact is above threshold in non expert mode\n  const showApproveFlow =\n    !swapInputError &&\n    (approval === ApprovalState.NOT_APPROVED ||\n      approval === ApprovalState.PENDING ||\n      (approvalSubmitted && approval === ApprovalState.APPROVED)) &&\n    !(priceImpactSeverity > 3 && !isExpertMode);\n\n  const handleConfirmDismiss = useCallback(() => {\n    setSwapState({\n      showConfirm: false,\n      tradeToConfirm,\n      attemptingTxn,\n      swapErrorMessage,\n      txHash,\n    });\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onUserInput(Field.INPUT, \"\");\n    }\n  }, [attemptingTxn, onUserInput, swapErrorMessage, tradeToConfirm, txHash]);\n\n  const handleAcceptChanges = useCallback(() => {\n    setSwapState({\n      tradeToConfirm: trade,\n      swapErrorMessage,\n      txHash,\n      attemptingTxn,\n      showConfirm,\n    });\n  }, [attemptingTxn, showConfirm, swapErrorMessage, trade, txHash]);\n\n  const handleInputSelect = useCallback(\n    (inputCurrency) => {\n      setApprovalSubmitted(false); // reset 2 step UI for approvals\n      onCurrencySelection(Field.INPUT, inputCurrency);\n    },\n    [onCurrencySelection]\n  );\n\n  const handleMaxInput = useCallback(() => {\n    maxAmountInput && onUserInput(Field.INPUT, maxAmountInput.toExact());\n  }, [maxAmountInput, onUserInput]);\n\n  const handleOutputSelect = useCallback(\n    (outputCurrency) => onCurrencySelection(Field.OUTPUT, outputCurrency),\n    [onCurrencySelection]\n  );\n\n  const swapIsUnsupported = useIsTransactionUnsupported(\n    currencies?.INPUT,\n    currencies?.OUTPUT\n  );\n\n  return (\n    <>\n      <TokenWarningModal\n        isOpen={importTokensNotInDefault.length > 0 && !dismissTokenWarning}\n        tokens={importTokensNotInDefault}\n        onConfirm={handleConfirmTokenWarning}\n      />\n      <SwapPoolTabs active={\"swap\"} />\n      <AppBody>\n        <SwapHeader />\n        <Wrapper id=\"swap-page\">\n          <ConfirmSwapModal\n            isOpen={showConfirm}\n            trade={trade}\n            originalTrade={tradeToConfirm}\n            onAcceptChanges={handleAcceptChanges}\n            attemptingTxn={attemptingTxn}\n            txHash={txHash}\n            recipient={recipient}\n            allowedSlippage={allowedSlippage}\n            onConfirm={handleSwap}\n            swapErrorMessage={swapErrorMessage}\n            onDismiss={handleConfirmDismiss}\n          />\n\n          <AutoColumn gap={\"md\"}>\n            <CurrencyInputPanel\n              label={\n                independentField === Field.OUTPUT && !showWrap && trade\n                  ? \"From (estimated)\"\n                  : \"From\"\n              }\n              value={formattedAmounts[Field.INPUT]}\n              showMaxButton={!atMaxAmountInput}\n              currency={currencies[Field.INPUT]}\n              onUserInput={handleTypeInput}\n              onMax={handleMaxInput}\n              onCurrencySelect={handleInputSelect}\n              otherCurrency={currencies[Field.OUTPUT]}\n              id=\"swap-currency-input\"\n            />\n            <AutoColumn justify=\"space-between\">\n              <AutoRow\n                justify={isExpertMode ? \"space-between\" : \"center\"}\n                style={{ padding: \"0 1rem\" }}\n              >\n                <ArrowWrapper clickable>\n                  <ArrowDown\n                    size=\"16\"\n                    onClick={() => {\n                      setApprovalSubmitted(false); // reset 2 step UI for approvals\n                      onSwitchTokens();\n                    }}\n                    color={\n                      currencies[Field.INPUT] && currencies[Field.OUTPUT]\n                        ? theme.primary1\n                        : theme.text2\n                    }\n                  />\n                </ArrowWrapper>\n                {recipient === null && !showWrap && isExpertMode ? (\n                  <LinkStyledButton\n                    id=\"add-recipient-button\"\n                    onClick={() => onChangeRecipient(\"\")}\n                  >\n                    + Add a send (optional)\n                  </LinkStyledButton>\n                ) : null}\n              </AutoRow>\n            </AutoColumn>\n            <CurrencyInputPanel\n              value={formattedAmounts[Field.OUTPUT]}\n              onUserInput={handleTypeOutput}\n              label={\n                independentField === Field.INPUT && !showWrap && trade\n                  ? \"To (estimated)\"\n                  : \"To\"\n              }\n              showMaxButton={false}\n              currency={currencies[Field.OUTPUT]}\n              onCurrencySelect={handleOutputSelect}\n              otherCurrency={currencies[Field.INPUT]}\n              id=\"swap-currency-output\"\n            />\n\n            {recipient !== null && !showWrap ? (\n              <>\n                <AutoRow justify=\"space-between\" style={{ padding: \"0 1rem\" }}>\n                  <ArrowWrapper clickable={false}>\n                    <ArrowDown size=\"16\" color={theme.text2} />\n                  </ArrowWrapper>\n                  <LinkStyledButton\n                    id=\"remove-recipient-button\"\n                    onClick={() => onChangeRecipient(null)}\n                  >\n                    - Remove send\n                  </LinkStyledButton>\n                </AutoRow>\n                <AddressInputPanel\n                  id=\"recipient\"\n                  value={recipient}\n                  onChange={onChangeRecipient}\n                />\n              </>\n            ) : null}\n\n            {showWrap ? null : (\n              <Card\n                padding={showWrap ? \".25rem 1rem 0 1rem\" : \"0px\"}\n                borderRadius={\"20px\"}\n              >\n                <AutoColumn gap=\"8px\" style={{ padding: \"0 16px\" }}>\n                  {Boolean(trade) && (\n                    <RowBetween align=\"center\">\n                      <Text fontWeight={500} fontSize={14} color={theme.text2}>\n                        Price\n                      </Text>\n                      <TradePrice\n                        price={trade?.executionPrice}\n                        showInverted={showInverted}\n                        setShowInverted={setShowInverted}\n                      />\n                    </RowBetween>\n                  )}\n                  {allowedSlippage !== INITIAL_ALLOWED_SLIPPAGE && (\n                    <RowBetween align=\"center\">\n                      <ClickableText\n                        fontWeight={500}\n                        fontSize={14}\n                        color={theme.text2}\n                        onClick={toggleSettings}\n                      >\n                        Slippage Tolerance\n                      </ClickableText>\n                      <ClickableText\n                        fontWeight={500}\n                        fontSize={14}\n                        color={theme.text2}\n                        onClick={toggleSettings}\n                      >\n                        {allowedSlippage / 100}%\n                      </ClickableText>\n                    </RowBetween>\n                  )}\n                </AutoColumn>\n              </Card>\n            )}\n          </AutoColumn>\n          <BottomGrouping>\n            {!account ? (\n              <ButtonLight onClick={toggleWalletModal}>\n                Connect Wallet\n              </ButtonLight>\n            ) : showWrap ? (\n              <ButtonPrimary\n                disabled={Boolean(wrapInputError)}\n                onClick={onWrap}\n              >\n                {wrapInputError ??\n                  (wrapType === WrapType.WRAP\n                    ? \"Wrap\"\n                    : wrapType === WrapType.UNWRAP\n                    ? \"Unwrap\"\n                    : null)}\n              </ButtonPrimary>\n            ) : noRoute && userHasSpecifiedInputOutput ? (\n              <GreyCard style={{ textAlign: \"center\" }}>\n                <TYPE.main mb=\"4px\">\n                  Insufficient liquidity for this trade.\n                </TYPE.main>\n                {singleHopOnly && (\n                  <TYPE.main mb=\"4px\">Try enabling multi-hop trades.</TYPE.main>\n                )}\n              </GreyCard>\n            ) : showApproveFlow ? (\n              <RowBetween>\n                <ButtonConfirmed\n                  onClick={approveCallback}\n                  disabled={\n                    approval !== ApprovalState.NOT_APPROVED || approvalSubmitted\n                  }\n                  width=\"48%\"\n                  altDisabledStyle={approval === ApprovalState.PENDING} // show solid button while waiting\n                  confirmed={approval === ApprovalState.APPROVED}\n                >\n                  {approval === ApprovalState.PENDING ? (\n                    <AutoRow gap=\"6px\" justify=\"center\">\n                      Approving <Loader stroke=\"white\" />\n                    </AutoRow>\n                  ) : approvalSubmitted &&\n                    approval === ApprovalState.APPROVED ? (\n                    \"Approved\"\n                  ) : (\n                    \"Approve \" + currencies[Field.INPUT]?.symbol\n                  )}\n                </ButtonConfirmed>\n                <ButtonError\n                  onClick={() => {\n                    if (isExpertMode) {\n                      handleSwap();\n                    } else {\n                      setSwapState({\n                        tradeToConfirm: trade,\n                        attemptingTxn: false,\n                        swapErrorMessage: undefined,\n                        showConfirm: true,\n                        txHash: undefined,\n                      });\n                    }\n                  }}\n                  width=\"48%\"\n                  id=\"swap-button\"\n                  disabled={\n                    !isValid ||\n                    approval !== ApprovalState.APPROVED ||\n                    (priceImpactSeverity > 3 && !isExpertMode)\n                  }\n                  error={isValid && priceImpactSeverity > 2}\n                >\n                  <Text fontSize={16} fontWeight={500}>\n                    {priceImpactSeverity > 3 && !isExpertMode\n                      ? `Price Impact High`\n                      : `Swap${priceImpactSeverity > 2 ? \" Anyway\" : \"\"}`}\n                  </Text>\n                </ButtonError>\n              </RowBetween>\n            ) : (\n              <ButtonError\n                onClick={() => {\n                  if (isExpertMode) {\n                    handleSwap();\n                  } else {\n                    setSwapState({\n                      tradeToConfirm: trade,\n                      attemptingTxn: false,\n                      swapErrorMessage: undefined,\n                      showConfirm: true,\n                      txHash: undefined,\n                    });\n                  }\n                }}\n                id=\"swap-button\"\n                disabled={\n                  !isValid ||\n                  (priceImpactSeverity > 3 && !isExpertMode) ||\n                  !!swapCallbackError\n                }\n                error={isValid && priceImpactSeverity > 2 && !swapCallbackError}\n              >\n                <Text fontSize={20} fontWeight={500}>\n                  {swapInputError\n                    ? swapInputError\n                    : priceImpactSeverity > 3 && !isExpertMode\n                    ? `Price Impact Too High`\n                    : `Swap${priceImpactSeverity > 2 ? \" Anyway\" : \"\"}`}\n                </Text>\n              </ButtonError>\n            )}\n            {showApproveFlow && (\n              <Column style={{ marginTop: \"1rem\" }}>\n                <ProgressSteps steps={[approval === ApprovalState.APPROVED]} />\n              </Column>\n            )}\n            {isExpertMode && swapErrorMessage ? (\n              <SwapCallbackError error={swapErrorMessage} />\n            ) : null}\n            {betterTradeLinkV2 &&\n            !swapIsUnsupported &&\n            toggledVersion === Version.v1 ? (\n              <BetterTradeLink version={betterTradeLinkV2} />\n            ) : toggledVersion !== DEFAULT_VERSION && defaultTrade ? (\n              <DefaultVersionLink />\n            ) : null}\n          </BottomGrouping>\n        </Wrapper>\n      </AppBody>\n      {!swapIsUnsupported ? (\n        <AdvancedSwapDetailsDropdown trade={trade} />\n      ) : (\n        <UnsupportedCurrencyFooter\n          show={swapIsUnsupported}\n          currencies={[currencies.INPUT, currencies.OUTPUT]}\n        />\n      )}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}