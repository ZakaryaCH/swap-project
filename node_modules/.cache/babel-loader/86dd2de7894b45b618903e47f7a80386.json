{"ast":null,"code":"var _jsxFileName = \"/Users/chichke/Documents/Work/Freelance/swap-project/src/components/SearchModal/CurrencyList.tsx\",\n    _s = $RefreshSig$();\n\nimport { Currency // CurrencyAmount,\n, currencyEquals, ETHER, Token } from \"@uniswap/sdk\";\nimport React, { useCallback, useMemo } from \"react\";\nimport { FixedSizeList } from \"react-window\";\nimport { Text } from \"rebass\";\nimport styled from \"styled-components\";\nimport { useActiveWeb3React } from \"../../hooks\";\nimport { WrappedTokenInfo // useCombinedActiveList,\n} from \"../../state/lists/hooks\"; // import { useCurrencyBalance } from \"../../state/wallet/hooks\";\n\n// import CurrencyLogo from \"../CurrencyLogo\";\nimport { MouseoverTooltip } from \"../Tooltip\"; // import { MenuItem } from \"./styleds\";\n// import Loader from \"../Loader\";\n// import { isTokenOnList } from \"../../utils\";\n// import ImportRow from \"./ImportRow\";\n// import { wrappedCurrency } from 'utils/wrappedCurrency'\n\nimport useTheme from \"hooks/useTheme\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction currencyKey(currency) {\n  return currency instanceof Token ? currency.address : currency === ETHER ? \"ETHER\" : \"\";\n}\n\nconst StyledBalanceText = styled(Text)`\n  white-space: nowrap;\n  overflow: hidden;\n  max-width: 5rem;\n  text-overflow: ellipsis;\n`;\nconst Tag = styled.div`\n  background-color: ${({\n  theme\n}) => theme.bg3};\n  color: ${({\n  theme\n}) => theme.text2};\n  font-size: 14px;\n  border-radius: 4px;\n  padding: 0.25rem 0.3rem 0.25rem 0.3rem;\n  max-width: 6rem;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  justify-self: flex-end;\n  margin-right: 4px;\n`;\n_c = Tag;\nconst FixedContentRow = styled.div`\n  padding: 4px 20px;\n  height: 56px;\n  display: grid;\n  grid-gap: 16px;\n  align-items: center;\n`; // function Balance({ balance }: { balance: CurrencyAmount }) {\n//   return (\n//     <StyledBalanceText title={balance.toExact()}>\n//       {balance.toSignificant(4)}\n//     </StyledBalanceText>\n//   );\n// }\n\nconst TagContainer = styled.div`\n  display: flex;\n  justify-content: flex-end;\n`;\n_c2 = TagContainer;\nconst TokenListLogoWrapper = styled.img`\n  height: 20px;\n`;\n\nfunction TokenTags({\n  currency\n}) {\n  if (!(currency instanceof WrappedTokenInfo)) {\n    return /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 12\n    }, this);\n  }\n\n  const tags = currency.tags;\n  if (!tags || tags.length === 0) return /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 42\n  }, this);\n  const tag = tags[0];\n  return /*#__PURE__*/_jsxDEV(TagContainer, {\n    children: [/*#__PURE__*/_jsxDEV(MouseoverTooltip, {\n      text: tag.description,\n      children: /*#__PURE__*/_jsxDEV(Tag, {\n        children: tag.name\n      }, tag.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), tags.length > 1 ? /*#__PURE__*/_jsxDEV(MouseoverTooltip, {\n      text: tags.slice(1).map(({\n        name,\n        description\n      }) => `${name}: ${description}`).join(\"; \\n\"),\n      children: /*#__PURE__*/_jsxDEV(Tag, {\n        children: \"...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n} // function CurrencyRow({\n//   currency,\n//   onSelect,\n//   isSelected,\n//   otherSelected,\n//   style,\n// }: {\n//   currency: Currency;\n//   onSelect: () => void;\n//   isSelected: boolean;\n//   otherSelected: boolean;\n//   style: CSSProperties;\n// }) {\n//   const { account } = useActiveWeb3React();\n//   const key = currencyKey(currency);\n//   const selectedTokenList = useCombinedActiveList();\n//   const isOnSelectedList = isTokenOnList(selectedTokenList, currency);\n//   const customAdded = useIsUserAddedToken(currency);\n//   const balance = useCurrencyBalance(account ?? undefined, currency);\n//   // only show add or remove buttons if not on selected list\n//   return (\n//     <MenuItem\n//       style={style}\n//       className={`token-item-${key}`}\n//       onClick={() => (isSelected ? null : onSelect())}\n//       disabled={isSelected}\n//       selected={otherSelected}\n//     >\n//       <CurrencyLogo currency={currency} size={\"24px\"} />\n//       <Column>\n//         <Text title={currency.name} fontWeight={500}>\n//           {currency.symbol}\n//         </Text>\n//         <TYPE.darkGray ml=\"0px\" fontSize={\"12px\"} fontWeight={300}>\n//           {currency.name}{\" \"}\n//           {!isOnSelectedList && customAdded && \"â€¢ Added by user\"}\n//         </TYPE.darkGray>\n//       </Column>\n//       <TokenTags currency={currency} />\n//       <RowFixed style={{ justifySelf: \"flex-end\" }}>\n//         {balance ? <Balance balance={balance} /> : account ? <Loader /> : null}\n//       </RowFixed>\n//     </MenuItem>\n//   );\n// }\n\n\n_c3 = TokenTags;\nexport default function CurrencyList({\n  height,\n  currencies,\n  selectedCurrency,\n  onCurrencySelect,\n  otherCurrency,\n  fixedListRef,\n  showETH,\n  showImportView,\n  setImportToken,\n  breakIndex\n}) {\n  _s();\n\n  const itemData = useMemo(() => {\n    let formatted = showETH ? [Currency.ETHER, ...currencies] : currencies;\n\n    if (breakIndex !== undefined) {\n      formatted = [...formatted.slice(0, breakIndex), undefined, ...formatted.slice(breakIndex, formatted.length)];\n    }\n\n    return formatted;\n  }, [breakIndex, currencies, showETH]);\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const theme = useTheme(); // const inactiveTokens: {\n  //   [address: string]: Token;\n  // } = useAllInactiveTokens();\n\n  const Row = useCallback(({\n    data,\n    index,\n    style\n  }) => {\n    const currency = data[index];\n    const isSelected = Boolean(selectedCurrency && currencyEquals(selectedCurrency, currency));\n    const otherSelected = Boolean(otherCurrency && currencyEquals(otherCurrency, currency));\n\n    const handleSelect = () => onCurrencySelect(currency); // const token = wrappedCurrency(currency, chainId)\n    // const showImport = inactiveTokens && token && Object.keys(inactiveTokens).includes(token.address)\n\n\n    return null; // if (index === breakIndex || !data) {\n    //   return (\n    //     <FixedContentRow style={style}>\n    //       <LightGreyCard padding=\"8px 12px\" borderRadius=\"8px\">\n    //         <RowBetween>\n    //           <RowFixed>\n    //             <TokenListLogoWrapper src={TokenListLogo} />\n    //             <TYPE.main ml=\"6px\" fontSize=\"12px\" color={theme.text1}>\n    //               Expanded results from inactive Token Lists\n    //             </TYPE.main>\n    //           </RowFixed>\n    //           <QuestionHelper text=\"Tokens from inactive lists. Import specific tokens below or click 'Manage' to activate more lists.\" />\n    //         </RowBetween>\n    //       </LightGreyCard>\n    //     </FixedContentRow>\n    //   );\n    // }\n    // if (showImport && token) {\n    //   return (\n    //     <ImportRow\n    //       style={style}\n    //       token={token}\n    //       showImportView={showImportView}\n    //       setImportToken={setImportToken}\n    //       dim={true}\n    //     />\n    //   )\n    // } else {\n    //   return (\n    //     <CurrencyRow\n    //       style={style}\n    //       currency={currency}\n    //       isSelected={isSelected}\n    //       onSelect={handleSelect}\n    //       otherSelected={otherSelected}\n    //     />\n    //   )\n    // }\n  }, [// chainId,\n    // inactiveTokens,\n    // onCurrencySelect,\n    // otherCurrency,\n    // selectedCurrency,\n    // setImportToken,\n    // showImportView,\n    // breakIndex,\n    // theme.text1,\n  ]);\n  const itemKey = useCallback((index, data) => currencyKey(data[index]), []);\n  return /*#__PURE__*/_jsxDEV(FixedSizeList, {\n    height: height,\n    ref: fixedListRef,\n    width: \"100%\",\n    itemData: itemData,\n    itemCount: itemData.length,\n    itemSize: 56,\n    itemKey: itemKey,\n    children: Row\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 287,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CurrencyList, \"KDVb9R1KQ27l0JazMhB0yHc7guM=\", false, function () {\n  return [useActiveWeb3React, useTheme];\n});\n\n_c4 = CurrencyList;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Tag\");\n$RefreshReg$(_c2, \"TagContainer\");\n$RefreshReg$(_c3, \"TokenTags\");\n$RefreshReg$(_c4, \"CurrencyList\");","map":{"version":3,"sources":["/Users/chichke/Documents/Work/Freelance/swap-project/src/components/SearchModal/CurrencyList.tsx"],"names":["Currency","currencyEquals","ETHER","Token","React","useCallback","useMemo","FixedSizeList","Text","styled","useActiveWeb3React","WrappedTokenInfo","MouseoverTooltip","useTheme","currencyKey","currency","address","StyledBalanceText","Tag","div","theme","bg3","text2","FixedContentRow","TagContainer","TokenListLogoWrapper","img","TokenTags","tags","length","tag","description","name","id","slice","map","join","CurrencyList","height","currencies","selectedCurrency","onCurrencySelect","otherCurrency","fixedListRef","showETH","showImportView","setImportToken","breakIndex","itemData","formatted","undefined","chainId","Row","data","index","style","isSelected","Boolean","otherSelected","handleSelect","itemKey"],"mappings":"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","sourcesContent":["import {\n  Currency,\n  // CurrencyAmount,\n  currencyEquals,\n  ETHER,\n  Token,\n} from \"@uniswap/sdk\";\nimport React, {\n  // CSSProperties,\n  MutableRefObject,\n  useCallback,\n  useMemo,\n} from \"react\";\nimport { FixedSizeList } from \"react-window\";\nimport { Text } from \"rebass\";\nimport styled from \"styled-components\";\nimport { useActiveWeb3React } from \"../../hooks\";\nimport {\n  WrappedTokenInfo,\n  // useCombinedActiveList,\n} from \"../../state/lists/hooks\";\n// import { useCurrencyBalance } from \"../../state/wallet/hooks\";\nimport { TYPE } from \"../../theme\";\n// import { useAllInactiveTokens } from \"../../hooks/Tokens\";\n// import Column from \"../Column\";\nimport { RowFixed, RowBetween } from \"../Row\";\n// import CurrencyLogo from \"../CurrencyLogo\";\nimport { MouseoverTooltip } from \"../Tooltip\";\n// import { MenuItem } from \"./styleds\";\n// import Loader from \"../Loader\";\n// import { isTokenOnList } from \"../../utils\";\n// import ImportRow from \"./ImportRow\";\n// import { wrappedCurrency } from 'utils/wrappedCurrency'\nimport { LightGreyCard } from \"components/Card\";\nimport TokenListLogo from \"../../assets/svg/tokenlist.svg\";\nimport QuestionHelper from \"components/QuestionHelper\";\nimport useTheme from \"hooks/useTheme\";\n\nfunction currencyKey(currency: Currency): string {\n  return currency instanceof Token\n    ? currency.address\n    : currency === ETHER\n    ? \"ETHER\"\n    : \"\";\n}\n\nconst StyledBalanceText = styled(Text)`\n  white-space: nowrap;\n  overflow: hidden;\n  max-width: 5rem;\n  text-overflow: ellipsis;\n`;\n\nconst Tag = styled.div`\n  background-color: ${({ theme }) => theme.bg3};\n  color: ${({ theme }) => theme.text2};\n  font-size: 14px;\n  border-radius: 4px;\n  padding: 0.25rem 0.3rem 0.25rem 0.3rem;\n  max-width: 6rem;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  justify-self: flex-end;\n  margin-right: 4px;\n`;\n\nconst FixedContentRow = styled.div`\n  padding: 4px 20px;\n  height: 56px;\n  display: grid;\n  grid-gap: 16px;\n  align-items: center;\n`;\n\n// function Balance({ balance }: { balance: CurrencyAmount }) {\n//   return (\n//     <StyledBalanceText title={balance.toExact()}>\n//       {balance.toSignificant(4)}\n//     </StyledBalanceText>\n//   );\n// }\n\nconst TagContainer = styled.div`\n  display: flex;\n  justify-content: flex-end;\n`;\n\nconst TokenListLogoWrapper = styled.img`\n  height: 20px;\n`;\n\nfunction TokenTags({ currency }: { currency: Currency }) {\n  if (!(currency instanceof WrappedTokenInfo)) {\n    return <span />;\n  }\n\n  const tags = currency.tags;\n  if (!tags || tags.length === 0) return <span />;\n\n  const tag = tags[0];\n\n  return (\n    <TagContainer>\n      <MouseoverTooltip text={tag.description}>\n        <Tag key={tag.id}>{tag.name}</Tag>\n      </MouseoverTooltip>\n      {tags.length > 1 ? (\n        <MouseoverTooltip\n          text={tags\n            .slice(1)\n            .map(({ name, description }) => `${name}: ${description}`)\n            .join(\"; \\n\")}\n        >\n          <Tag>...</Tag>\n        </MouseoverTooltip>\n      ) : null}\n    </TagContainer>\n  );\n}\n\n// function CurrencyRow({\n//   currency,\n//   onSelect,\n//   isSelected,\n//   otherSelected,\n//   style,\n// }: {\n//   currency: Currency;\n//   onSelect: () => void;\n//   isSelected: boolean;\n//   otherSelected: boolean;\n//   style: CSSProperties;\n// }) {\n//   const { account } = useActiveWeb3React();\n//   const key = currencyKey(currency);\n//   const selectedTokenList = useCombinedActiveList();\n//   const isOnSelectedList = isTokenOnList(selectedTokenList, currency);\n//   const customAdded = useIsUserAddedToken(currency);\n//   const balance = useCurrencyBalance(account ?? undefined, currency);\n\n//   // only show add or remove buttons if not on selected list\n//   return (\n//     <MenuItem\n//       style={style}\n//       className={`token-item-${key}`}\n//       onClick={() => (isSelected ? null : onSelect())}\n//       disabled={isSelected}\n//       selected={otherSelected}\n//     >\n//       <CurrencyLogo currency={currency} size={\"24px\"} />\n//       <Column>\n//         <Text title={currency.name} fontWeight={500}>\n//           {currency.symbol}\n//         </Text>\n//         <TYPE.darkGray ml=\"0px\" fontSize={\"12px\"} fontWeight={300}>\n//           {currency.name}{\" \"}\n//           {!isOnSelectedList && customAdded && \"â€¢ Added by user\"}\n//         </TYPE.darkGray>\n//       </Column>\n//       <TokenTags currency={currency} />\n//       <RowFixed style={{ justifySelf: \"flex-end\" }}>\n//         {balance ? <Balance balance={balance} /> : account ? <Loader /> : null}\n//       </RowFixed>\n//     </MenuItem>\n//   );\n// }\n\nexport default function CurrencyList({\n  height,\n  currencies,\n  selectedCurrency,\n  onCurrencySelect,\n  otherCurrency,\n  fixedListRef,\n  showETH,\n  showImportView,\n  setImportToken,\n  breakIndex,\n}: {\n  height: number;\n  currencies: Currency[];\n  selectedCurrency?: Currency | null;\n  onCurrencySelect: (currency: Currency) => void;\n  otherCurrency?: Currency | null;\n  fixedListRef?: MutableRefObject<FixedSizeList | undefined>;\n  showETH: boolean;\n  showImportView: () => void;\n  setImportToken: (token: Token) => void;\n  breakIndex: number | undefined;\n}) {\n  const itemData: (Currency | undefined)[] = useMemo(() => {\n    let formatted: (Currency | undefined)[] = showETH\n      ? [Currency.ETHER, ...currencies]\n      : currencies;\n    if (breakIndex !== undefined) {\n      formatted = [\n        ...formatted.slice(0, breakIndex),\n        undefined,\n        ...formatted.slice(breakIndex, formatted.length),\n      ];\n    }\n    return formatted;\n  }, [breakIndex, currencies, showETH]);\n\n  const { chainId } = useActiveWeb3React();\n  const theme = useTheme();\n\n  // const inactiveTokens: {\n  //   [address: string]: Token;\n  // } = useAllInactiveTokens();\n\n  const Row = useCallback(\n    ({ data, index, style }) => {\n      const currency: Currency = data[index];\n      const isSelected = Boolean(\n        selectedCurrency && currencyEquals(selectedCurrency, currency)\n      );\n      const otherSelected = Boolean(\n        otherCurrency && currencyEquals(otherCurrency, currency)\n      );\n      const handleSelect = () => onCurrencySelect(currency);\n\n      // const token = wrappedCurrency(currency, chainId)\n\n      // const showImport = inactiveTokens && token && Object.keys(inactiveTokens).includes(token.address)\n      return null;\n      // if (index === breakIndex || !data) {\n      //   return (\n      //     <FixedContentRow style={style}>\n      //       <LightGreyCard padding=\"8px 12px\" borderRadius=\"8px\">\n      //         <RowBetween>\n      //           <RowFixed>\n      //             <TokenListLogoWrapper src={TokenListLogo} />\n      //             <TYPE.main ml=\"6px\" fontSize=\"12px\" color={theme.text1}>\n      //               Expanded results from inactive Token Lists\n      //             </TYPE.main>\n      //           </RowFixed>\n      //           <QuestionHelper text=\"Tokens from inactive lists. Import specific tokens below or click 'Manage' to activate more lists.\" />\n      //         </RowBetween>\n      //       </LightGreyCard>\n      //     </FixedContentRow>\n      //   );\n      // }\n\n      // if (showImport && token) {\n      //   return (\n      //     <ImportRow\n      //       style={style}\n      //       token={token}\n      //       showImportView={showImportView}\n      //       setImportToken={setImportToken}\n      //       dim={true}\n      //     />\n      //   )\n      // } else {\n      //   return (\n      //     <CurrencyRow\n      //       style={style}\n      //       currency={currency}\n      //       isSelected={isSelected}\n      //       onSelect={handleSelect}\n      //       otherSelected={otherSelected}\n      //     />\n      //   )\n      // }\n    },\n    [\n      // chainId,\n      // inactiveTokens,\n      // onCurrencySelect,\n      // otherCurrency,\n      // selectedCurrency,\n      // setImportToken,\n      // showImportView,\n      // breakIndex,\n      // theme.text1,\n    ]\n  );\n\n  const itemKey = useCallback(\n    (index: number, data: any) => currencyKey(data[index]),\n    []\n  );\n\n  return (\n    <FixedSizeList\n      height={height}\n      ref={fixedListRef as any}\n      width=\"100%\"\n      itemData={itemData}\n      itemCount={itemData.length}\n      itemSize={56}\n      itemKey={itemKey}\n    >\n      {Row}\n    </FixedSizeList>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}